<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用 Hexo 指令帶你無往不利</title>
    <url>/2024/06/07/%E5%B8%B8%E7%94%A8%20Hexo%20%E6%8C%87%E4%BB%A4%E5%B8%B6%E4%BD%A0%E7%84%A1%E5%BE%80%E4%B8%8D%E5%88%A9/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简单且功能强大的静态博客框架。以下是一些常用的 Hexo 指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new 文章名稱</span><br><span class="line">hexo generate 產生 public 資料夾內容</span><br><span class="line">hexo server</span><br><span class="line">hexo clean 清理緩存</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol>
<li><p><strong>安装 Hexo</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化 Hexo 项目</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成静态文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动本地服务器</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>新建文章</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发布文章</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>清理缓存和生成的静态文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>列出所有 Hexo 命令</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo list</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看 Hexo 帮助信息</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装插件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以下是一些额外的有用命令和操作：</p>
<ul>
<li><p><strong>新建页面</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page &lt;page-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>草稿转发布</strong><br>如果你使用 <code>hexo new draft &lt;title&gt;</code> 创建了草稿，可以通过以下命令将草稿发布为正式文章：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成并部署</strong><br>这会在生成静态文件后立即部署它们：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate --deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看当前配置</strong><br>你可以直接编辑 <code>_config.yml</code> 文件来配置 Hexo，但也可以用以下命令查看当前配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo config</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这些命令涵盖了 Hexo 的大部分基本功能，可以帮助你快速上手并管理你的博客。</p>
]]></content>
      <tags>
        <tag>Hexo 指令</tag>
      </tags>
  </entry>
  <entry>
    <title>關於嚴格模式</title>
    <url>/2024/06/12/%E9%97%9C%E6%96%BC%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在 JavaScript 和 PHP 中，嚴格模式（strict mode）都是後期引入的。</p>
<span id="more"></span>

<h2 id="JavaScript-的嚴格模式"><a href="#JavaScript-的嚴格模式" class="headerlink" title="JavaScript 的嚴格模式"></a>JavaScript 的嚴格模式</h2><p>JavaScript 的嚴格模式首次出現在 ECMAScript 5（ES5）標準中，於 2009 年發布。嚴格模式通過 <code>&quot;use strict&quot;;</code> 指令來啟用，它將代碼執行模式從寬鬆模式切換到嚴格模式，並引入了一些新的限制和改變，以幫助開發者避免常見的問題，提高代碼的品質和性能。</p>
<h2 id="PHP-的嚴格模式"><a href="#PHP-的嚴格模式" class="headerlink" title="PHP 的嚴格模式"></a>PHP 的嚴格模式</h2><p>PHP 的嚴格模式首次出現在 PHP 7.0 版本中，於 2015 年發布。它通過引入 <code>declare(strict_types=1);</code> 來啟用，用於強制函數和方法的傳入參數和返回值進行嚴格的類型檢查。在嚴格模式下，函數和方法的參數類型和返回類型必須與函數和方法的聲明一致，否則將引發致命錯誤。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>儘管嚴格模式在 JavaScript 和 PHP 中的實現方式有所不同，但它們的目標都是提高代碼的品質和可靠性，並幫助開發者避免常見的錯誤。JavaScript 的嚴格模式於 ECMAScript 5 中首次出現，而 PHP 的嚴格模式則在 PHP 7.0 中首次引入。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/08/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>TypeScript 完整介紹：從入門到實戰</title>
    <url>/2025/01/27/TypeScript%20%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="什麼是-TypeScript？"><a href="#什麼是-TypeScript？" class="headerlink" title="什麼是 TypeScript？"></a>什麼是 TypeScript？</h2><p>TypeScript 是由 Microsoft 開發的一種開源程式語言，它是 JavaScript 的一個<strong>型別化超集</strong>（typed superset），最終會編譯成純 JavaScript 代碼。簡單來說，任何有效的 JavaScript 代碼都是有效的 TypeScript 代碼。</p>
<span id="more"></span>

<h3 id="🎯-為什麼選擇-TypeScript？"><a href="#🎯-為什麼選擇-TypeScript？" class="headerlink" title="🎯 為什麼選擇 TypeScript？"></a>🎯 為什麼選擇 TypeScript？</h3><ol>
<li><strong>靜態型別檢查</strong> - 在編譯時期就能發現錯誤</li>
<li><strong>更好的 IDE 支援</strong> - 智能提示、自動完成、重構工具</li>
<li><strong>增強的可讀性</strong> - 代碼更容易理解和維護</li>
<li><strong>漸進式採用</strong> - 可以逐步將現有 JavaScript 專案遷移到 TypeScript</li>
</ol>
<h2 id="🚀-快速開始"><a href="#🚀-快速開始" class="headerlink" title="🚀 快速開始"></a>🚀 快速開始</h2><h3 id="安裝-TypeScript"><a href="#安裝-TypeScript" class="headerlink" title="安裝 TypeScript"></a>安裝 TypeScript</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全域安裝</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 專案內安裝</span></span><br><span class="line">npm install --save-dev typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驗證安裝</span></span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure>

<h3 id="第一個-TypeScript-檔案"><a href="#第一個-TypeScript-檔案" class="headerlink" title="第一個 TypeScript 檔案"></a>第一個 TypeScript 檔案</h3><p>建立 <code>hello.ts</code> 檔案：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userName</span>: <span class="built_in">string</span> = <span class="string">&quot;Arvin&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(userName));</span><br></pre></td></tr></table></figure>

<p>編譯並執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 編譯</span></span><br><span class="line">tsc hello.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行生成的 JavaScript</span></span><br><span class="line">node hello.js</span><br></pre></td></tr></table></figure>

<h2 id="📚-核心概念"><a href="#📚-核心概念" class="headerlink" title="📚 核心概念"></a>📚 核心概念</h2><h3 id="1-基本型別"><a href="#1-基本型別" class="headerlink" title="1. 基本型別"></a>1. 基本型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本型別</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Any 型別（盡量避免使用）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Void 型別</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warnUser</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Null 和 Undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-介面-Interface"><a href="#2-介面-Interface" class="headerlink" title="2. 介面 (Interface)"></a>2. 介面 (Interface)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可選屬性</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="comment">// 唯讀屬性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">person: Person</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;person.firstName&#125;</span> <span class="subst">$&#123;person.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-類別-Classes"><a href="#3-類別-Classes" class="headerlink" title="3. 類別 (Classes)"></a>3. 類別 (Classes)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">species</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, species: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes a sound`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">getInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;<span class="variable language_">this</span>.species&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, breed: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, <span class="string">&quot;Canine&quot;</span>, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">bark</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">makeSound</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getBreedInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.getInfo()&#125;</span> of breed <span class="subst">$&#123;<span class="variable language_">this</span>.breed&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-泛型-Generics"><a href="#4-泛型-Generics" class="headerlink" title="4. 泛型 (Generics)"></a>4. 泛型 (Generics)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型函數</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output1 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> output2 = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型介面</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">zero: T, addFn: (x: T, y: T) =&gt; T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zeroValue</span> = zero;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">add</span> = addFn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-聯合型別與交集型別"><a href="#5-聯合型別與交集型別" class="headerlink" title="5. 聯合型別與交集型別"></a>5. 聯合型別與交集型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聯合型別</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringOrNumber</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: StringOrNumber</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集型別</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ErrorHandling</span> &#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  error?: &#123; <span class="attr">message</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ArtworksData</span> &#123;</span><br><span class="line">  <span class="attr">artworks</span>: &#123; <span class="attr">title</span>: <span class="built_in">string</span> &#125;[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ArtworksResponse</span> = <span class="title class_">ArtworksData</span> &amp; <span class="title class_">ErrorHandling</span>;</span><br></pre></td></tr></table></figure>

<h2 id="⚙️-進階特性"><a href="#⚙️-進階特性" class="headerlink" title="⚙️ 進階特性"></a>⚙️ 進階特性</h2><h3 id="1-型別別名-Type-Aliases"><a href="#1-型別別名-Type-Aliases" class="headerlink" title="1. 型別別名 (Type Aliases)"></a>1. 型別別名 (Type Aliases)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EventHandler</span> = <span class="function">(<span class="params">event: Event</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="string">&quot;loading&quot;</span> | <span class="string">&quot;success&quot;</span> | <span class="string">&quot;error&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-條件型別"><a href="#2-條件型別" class="headerlink" title="2. 條件型別"></a>2. 條件型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: infer U &#125; ? U : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DogMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Dog</span>&gt;; <span class="comment">// never</span></span><br></pre></td></tr></table></figure>

<h3 id="3-映射型別"><a href="#3-映射型別" class="headerlink" title="3. 映射型別"></a>3. 映射型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyTodo</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialTodo</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="🛠️-實戰應用"><a href="#🛠️-實戰應用" class="headerlink" title="🛠️ 實戰應用"></a>🛠️ 實戰應用</h2><h3 id="TypeScript-設定檔-tsconfig-json"><a href="#TypeScript-設定檔-tsconfig-json" class="headerlink" title="TypeScript 設定檔 (tsconfig.json)"></a>TypeScript 設定檔 (tsconfig.json)</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-TypeScript-範例"><a href="#React-TypeScript-範例" class="headerlink" title="React + TypeScript 範例"></a>React + TypeScript 範例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserListProps</span> &#123;</span><br><span class="line">  initialUsers?: <span class="title class_">User</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserList</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserListProps</span>&gt; = <span class="function">(<span class="params">&#123; initialUsers = [] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState&lt;<span class="title class_">User</span>[]&gt;(initialUsers);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchUsers = <span class="keyword">async</span> (): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">userData</span>: <span class="title class_">User</span>[] = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="title function_">setUsers</span>(userData);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Failed to fetch users:&quot;</span>, error);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialUsers.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">fetchUsers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [initialUsers.<span class="property">length</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;users.map((user: User) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name&#125; - &#123;user.email&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserList</span>;</span><br></pre></td></tr></table></figure>

<h2 id="📝-最佳實踐"><a href="#📝-最佳實踐" class="headerlink" title="📝 最佳實踐"></a>📝 最佳實踐</h2><h3 id="1-型別定義"><a href="#1-型別定義" class="headerlink" title="1. 型別定義"></a>1. 型別定義</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 好的做法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 避免使用 any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">data: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 使用具體型別</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processUserData</span>(<span class="params">data: User[]</span>): <span class="title class_">ProcessedUser</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">displayName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">isActive</span>: user.<span class="property">status</span> === <span class="string">&quot;active&quot;</span>,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-錯誤處理"><a href="#2-錯誤處理" class="headerlink" title="2. 錯誤處理"></a>2. 錯誤處理</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T, E = <span class="title class_">Error</span>&gt; =</span><br><span class="line">  | &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>;</span><br><span class="line">      <span class="attr">data</span>: T;</span><br><span class="line">    &#125;</span><br><span class="line">  | &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>;</span><br><span class="line">      <span class="attr">error</span>: E;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">id: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&lt;<span class="title class_">User</span>&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP <span class="subst">$&#123;response.status&#125;</span>: <span class="subst">$&#123;response.statusText&#125;</span>`</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">data</span>: user &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">error</span>: error <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? error : <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unknown error&quot;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🔍-常見問題與解決方案"><a href="#🔍-常見問題與解決方案" class="headerlink" title="🔍 常見問題與解決方案"></a>🔍 常見問題與解決方案</h2><h3 id="1-型別斷言"><a href="#1-型別斷言" class="headerlink" title="1. 型別斷言"></a>1. 型別斷言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 型別斷言（謹慎使用）</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更安全的做法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value: <span class="built_in">unknown</span></span>): value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isString</span>(someValue)) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = someValue.<span class="property">length</span>; <span class="comment">// TypeScript 知道這裡是 string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-可選鏈與空值合併"><a href="#2-可選鏈與空值合併" class="headerlink" title="2. 可選鏈與空值合併"></a>2. 可選鏈與空值合併</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NestedObject</span> &#123;</span><br><span class="line">  level1?: &#123;</span><br><span class="line">    level2?: &#123;</span><br><span class="line">      value?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">NestedObject</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可選鏈</span></span><br><span class="line"><span class="keyword">const</span> value = obj.<span class="property">level1</span>?.<span class="property">level2</span>?.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空值合併</span></span><br><span class="line"><span class="keyword">const</span> displayValue = value ?? <span class="string">&quot;Default Value&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="🎓-學習資源與工具"><a href="#🎓-學習資源與工具" class="headerlink" title="🎓 學習資源與工具"></a>🎓 學習資源與工具</h2><h3 id="推薦工具"><a href="#推薦工具" class="headerlink" title="推薦工具"></a>推薦工具</h3><ul>
<li><strong>VS Code</strong> - 最佳的 TypeScript 開發體驗</li>
<li><strong>TypeScript Playground</strong> - 在線練習和測試</li>
<li><strong>TSLint&#x2F;ESLint</strong> - 代碼檢查工具</li>
<li><strong>Prettier</strong> - 代碼格式化工具</li>
</ul>
<h3 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h3><ul>
<li><a href="https://www.typescriptlang.org/docs/">TypeScript 官方文檔</a></li>
<li><a href="https://basarat.gitbook.io/typescript/">TypeScript Deep Dive</a></li>
<li><a href="https://github.com/typescript-cheatsheets/react">React TypeScript 速查表</a></li>
</ul>
<h2 id="📈-總結"><a href="#📈-總結" class="headerlink" title="📈 總結"></a>📈 總結</h2><p>TypeScript 為 JavaScript 開發帶來了強大的型別系統，幫助開發者：</p>
<ol>
<li><strong>提前發現錯誤</strong> - 編譯時期的型別檢查</li>
<li><strong>提升開發效率</strong> - 更好的 IDE 支援和智能提示</li>
<li><strong>改善代碼品質</strong> - 更清晰的 API 設計和文檔</li>
<li><strong>降低維護成本</strong> - 重構更安全，代碼更容易理解</li>
</ol>
<p>對於現代 JavaScript 開發，特別是大型專案，TypeScript 已經成為不可或缺的工具。它不僅提升了開發體驗，也讓代碼更加健壯和可維護。</p>
<h2 id="🚀-下一步"><a href="#🚀-下一步" class="headerlink" title="🚀 下一步"></a>🚀 下一步</h2><p>如果您剛開始學習 TypeScript，建議：</p>
<ol>
<li>從簡單的型別標註開始</li>
<li>逐步學習介面和類別</li>
<li>在小專案中實踐</li>
<li>探索進階特性如泛型和條件型別</li>
<li>整合到您喜愛的框架中（React, Vue, Angular）</li>
</ol>
<p>開始您的 TypeScript 之旅吧！這將是一個值得投資的技術選擇。</p>
<hr>
<blockquote>
<p>💡 <strong>小提示</strong>: 記住，TypeScript 的目標不是替代 JavaScript，而是讓 JavaScript 開發更加安全和高效。漸進式採用是最佳策略！</p>
</blockquote>
]]></content>
      <categories>
        <category>技術教學</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
        <tag>前端開發</tag>
        <tag>程式語言</tag>
      </tags>
  </entry>
</search>
