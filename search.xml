<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Day 1 - Typescript + Node.js 系列藍圖</title>
    <url>/2025/09/15/Day1%20-%20Typescript%20+%20Node.js%20%E7%B3%BB%E5%88%97%E8%97%8D%E5%9C%96/</url>
    <content><![CDATA[<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day1/TypeScriptNode.png?raw=true"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哈囉！很高興您點開這篇文章。如果您是 Node.js 開發者，並且想讓自己的程式碼更穩健、易於維護，那麼您來對地方了。在這場為期 30 天的技術挑戰賽中，我將一步步探索 TypeScript，並將它整合到 Node.js 的開發流程中。</p>
<p>從基礎的語法、環境建置，到常見的商業應用場景（如金流串接、檔案上傳），甚至是最後的雲端部署，我們將循序漸進地完成一些功能性的專案。這不僅僅是一場寫作馬拉松，更是一趟讓您的開發技能全面升級的旅程。</p>
<span id="more"></span>

<h2 id="為什麼要用-TypeScript？"><a href="#為什麼要用-TypeScript？" class="headerlink" title="為什麼要用 TypeScript？"></a>為什麼要用 TypeScript？</h2><p>在進入主軸之前，您可能會想：「為什麼要花時間學 TypeScript？JavaScript 不是已經夠用了嗎？」</p>
<p>確實，JavaScript 靈活、入門門檻低，但當專案規模越來越大時，它的「彈性」也可能帶來維護上的挑戰。TypeScript 正是為了解決這個問題而生。它引入了靜態型別系統，讓您在寫程式的當下就能發現潛在的錯誤，大幅降低了除錯的成本。此外，透過明確的型別定義，程式碼的可讀性會大大提升，團隊協作也變得更加順暢。</p>
<p>簡而言之，TypeScript 就像是為您的程式碼加上了安全帶，讓您在高速開發的同時，也能確保品質。</p>
<h2 id="系列文章藍圖與規劃"><a href="#系列文章藍圖與規劃" class="headerlink" title="系列文章藍圖與規劃"></a>系列文章藍圖與規劃</h2><p>為了讓這趟旅程更有方向，我規劃了接下來 30 天的學習藍圖。它將引導我們從 TypeScript 的基礎知識，航向更複雜的後端應用場景，最終將我們的成果部署到雲端。</p>
<p>這份藍圖將分為以下幾個階段：</p>
<ol>
<li><strong>Typescript 核心語法與基礎複習</strong> : 在正式進入實戰前，我們會先複習並掌握 TypeScript 的核心觀念，建立「型別思維」。</li>
<li><strong>基礎建置與環境設定</strong>：從零開始，帶您建立一個完善的 TypeScript + Node.js 開發環境，並完成一個簡單的 API 實作。</li>
<li><strong>專案工具與進階功能</strong>：讓專案更專業！我們會加入程式碼格式化工具、自動化產生 API 文件，並探索如何快速部署。</li>
<li><strong>後端常見商業應用場景</strong>：這部分將涵蓋後端開發中不可或缺的功能，如使用者驗證、金流與雲端服務串接等。</li>
<li><strong>雲端部署與維護</strong>：最後，我們會將專案部署到雲端服務上，並了解一些基本的雲端概念。</li>
</ol>
<p>每一天，我們都會專注於一些的知識點，確保您可以循序漸進地吸收新知。</p>
<p>準備好和我一起挑戰了嗎？讓我們從明天開始，正式啟動這場 TypeScript 升級之旅吧！🚀🎉</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 10 - 部署啟程！從 Render 部署前置作業到 GitHub PR</title>
    <url>/2025/09/24/Day10%20-%20GithubPR-Render/</url>
    <content><![CDATA[<h2 id="Render-服務簡介"><a href="#Render-服務簡介" class="headerlink" title="Render 服務簡介"></a>Render 服務簡介</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/1-render.png?raw=true" alt="1-render.png"></p>
<p>在前幾天的系列文章中，我們已經完成了本地端的環境建置與功能實作。但真實專案裡，光是「我的電腦能跑」是不夠的，我們需要把服務放到雲端，讓全世界都能存取。</p>
<span id="more"></span>

<p>常見的雲端平台有 <strong>AWS</strong>、<strong>GCP</strong>、<strong>Azure</strong> 等，它們提供完整的基礎建設服務（IaaS）。但對於初學者或中小型專案來說，這些平台的學習曲線偏高、設定也比較繁瑣。</p>
<p><strong>Render</strong> 屬於 <strong>PaaS（平台即服務）</strong>，提供比 AWS、GCP 更直覺的部署體驗，只需要專注於程式碼本身，Render 就能自動幫我們完成環境建置、佈署、監控。</p>
<p>👉 適合快速上手、部屬 Side Project 或個人練習專案。</p>
<hr>
<h2 id="用-Github-帳號第三方登入-Render-服務"><a href="#用-Github-帳號第三方登入-Render-服務" class="headerlink" title="用 Github 帳號第三方登入 Render 服務"></a>用 Github 帳號第三方登入 Render 服務</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/2-signin-render.png?raw=true" alt="Screenshot 2025-09-23 at 7.56.36 PM.png"></p>
<p>Render 提供 <strong>Github 帳號登入</strong>，這樣做的好處是可以直接與 GitHub 專案連動。</p>
<p>一旦我們在 GitHub 上有新的 commit（例如合併 PR），Render 就能自動觸發建置與部署。</p>
<p><strong>優點：</strong></p>
<ul>
<li>自動同步 GitHub repo</li>
<li>省去手動上傳程式碼的麻煩</li>
<li>CI&#x2F;CD 整合更簡單</li>
</ul>
<hr>
<h2 id="Node-js-專案部署前置作業"><a href="#Node-js-專案部署前置作業" class="headerlink" title="Node.js 專案部署前置作業"></a>Node.js 專案部署前置作業</h2><h3 id="修改-package-json"><a href="#修改-package-json" class="headerlink" title="修改 package.json"></a>修改 package.json</h3><ol>
<li><p><strong>新增啟動與建置指令</strong></p>
<ul>
<li><p>在 <code>package.json</code> 的 <code>scripts</code> 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node dist/app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>start</code>：執行編譯後的程式。</p>
</li>
<li><p><code>build</code>：把 TypeScript 編譯為 JavaScript。</p>
</li>
</ul>
</li>
<li><p><strong>指定 Node.js 版本</strong></p>
<ul>
<li><p>在 <code>package.json</code> 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20.x&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>為什麼要指定版本？</strong><br>Render 預設可能使用不同的 Node.js 版本，如果與本地端差異過大，可能導致部署錯誤。<br>指定 Node.js 版本能確保 Render 的執行環境與我們本地端一致，減少版本不相容的問題。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="確認-app-ts"><a href="#確認-app-ts" class="headerlink" title="確認 app.ts"></a>確認 app.ts</h3><p>確保 <code>app.ts</code> 使用環境變數的 PORT：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>小提醒</strong></p>
<p>在 Render 上，服務的埠號（<code>PORT</code>）是 <strong>自動分配</strong> 的，並透過 <code>process.env.PORT</code> 傳入程式。</p>
<p>因此 <strong>不需要在 Render 控制台手動新增 <code>PORT</code> 環境變數</strong>。</p>
<p>只要程式碼有寫：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<p>就能正確接收 Render 給的 Port。</p>
<hr>
<h3 id="編譯與運行"><a href="#編譯與運行" class="headerlink" title="編譯與運行"></a>編譯與運行</h3><p>在部署到 Render 前，先在本地端測試：</p>
<ol>
<li><p><strong>編譯程式碼</strong></p>
<ul>
<li><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
</li>
<li><p>這會將 TypeScript 編譯為 JavaScript，輸出到 <code>dist</code> 資料夾。</p>
</li>
</ul>
</li>
<li><p><strong>運行編譯後的程式</strong></p>
<ul>
<li><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
</li>
<li><p>檢查是否能正常啟動伺服器並連接到資料庫。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>[注意]：本地端測試成功後再進行部署，確保程式碼無誤。</p>
</blockquote>
<blockquote>
<p>commit : Day 10 Render Deploy setting</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/dec62b5d6891897d92eb39d5367be0471c9c2f37">範例程式碼</a></p>
<hr>
<h2 id="GitHub-Merge-PR-流程"><a href="#GitHub-Merge-PR-流程" class="headerlink" title="GitHub Merge PR 流程"></a>GitHub Merge PR 流程</h2><p>在專案開發時，我們通常會用 <strong>feature 分支</strong> 來開發新功能，完成後再透過 <strong>Pull Request (PR)</strong> 合併到 <code>develop</code> 分支。以下是簡單的操作流程：</p>
<hr>
<h3 id="Step-1-建立-Pull-Request"><a href="#Step-1-建立-Pull-Request" class="headerlink" title="Step 1. 建立 Pull Request"></a>Step 1. 建立 Pull Request</h3><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/3-create-pr.png?raw=true" alt="Screenshot 2025-09-23 at 8.58.41 PM.png"></p>
<p>點擊 <strong>Compare &amp; pull request</strong> !</p>
<hr>
<h3 id="Step-2-撰寫-PR-描述"><a href="#Step-2-撰寫-PR-描述" class="headerlink" title="Step 2. 撰寫 PR 描述"></a>Step 2. 撰寫 PR 描述</h3><p>選擇要合併的分支：</p>
<ul>
<li><strong>base</strong>：<code>develop</code></li>
<li><strong>compare</strong>：<code>feature/init-ts-express</code></li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/4-pr-desc.png?raw=true" alt="Screenshot 2025-09-23 at 9.01.06 PM.png"></p>
<p>在描述區塊中，列出這次 PR 的主要變更，例如：</p>
<ul>
<li>初始化 Node.js + TypeScript 專案架構</li>
<li>建立基本 Express server</li>
<li>新增 TodoList API (CRUD)</li>
<li>整合 TypeORM 與資料庫連線</li>
</ul>
<p>填寫 PR 標題與描述，準備送出 PR。按下 Create pull request !</p>
<hr>
<h3 id="Step-3-檢視-PR-狀態"><a href="#Step-3-檢視-PR-狀態" class="headerlink" title="Step 3. 檢視 PR 狀態"></a>Step 3. 檢視 PR 狀態</h3><p>送出 PR 後，可以看到 Commit 記錄與檔案變更。</p>
<p>此時 GitHub 會檢查與 <code>develop</code> 分支是否有衝突：</p>
<ul>
<li>✅ <strong>No conflicts</strong> → 可以安全合併</li>
<li>⚠️ <strong>有衝突</strong> → 需要先解決衝突</li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/5-check-pr.png?raw=true" alt="Screenshot 2025-09-23 at 9.01.35 PM.png"></p>
<hr>
<h3 id="Step-4-合併到-develop"><a href="#Step-4-合併到-develop" class="headerlink" title="Step 4. 合併到 develop"></a>Step 4. 合併到 develop</h3><p>確認無誤後，點擊 <strong>Merge pull request</strong> → <strong>Confirm merge</strong>，就能把 feature 分支合併到 <code>develop</code>。</p>
<p>合併完成後，<code>develop</code> 分支就會更新，包含最新的功能。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/6-merge-result.png?raw=true" alt="Screenshot 2025-09-23 at 9.02.07 PM.png"></p>
<hr>
<p>先完成這些步驟後，明天我們就能把 <code>develop</code> 分支部署到 Render 囉 🚀。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 11 - 一鍵上線！完整部署到 Render 的實戰流程</title>
    <url>/2025/09/25/Day11%20-%20Render-NodeJS/</url>
    <content><![CDATA[<p>昨天我們完成了部署的前置作業，今天當然要來實戰部署啦！這篇文章會帶你一步步把 Node.js + TypeScript 專案部署到 <strong>Render</strong>，並驗證 API 是否能正常運作。</p>
<span id="more"></span>

<hr>
<h2 id="Render-部署設定步驟"><a href="#Render-部署設定步驟" class="headerlink" title="Render 部署設定步驟"></a>Render 部署設定步驟</h2><h3 id="1-建立-Web-Service"><a href="#1-建立-Web-Service" class="headerlink" title="1. 建立 Web Service"></a>1. 建立 Web Service</h3><p>到 Render Dashboard 右上角點擊 <strong>New → Web Service</strong>，建立一個新的服務。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/1-new-web-service.png?raw=true"></p>
<p>接著選擇 <strong>連結 GitHub 專案</strong>，點擊 <strong>Connect</strong>。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/2-link-github-repo.png?raw=true"></p>
<hr>
<h3 id="2-選擇專案與分支"><a href="#2-選擇專案與分支" class="headerlink" title="2. 選擇專案與分支"></a>2. 選擇專案與分支</h3><ul>
<li><strong>Language</strong> 選擇 <code>Node</code></li>
<li><strong>Branch</strong> 選擇 GitHub 專案的 <code>develop</code> 分支</li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/3-new-service-info.png?raw=true"></p>
<hr>
<h3 id="3-設定建置與啟動指令"><a href="#3-設定建置與啟動指令" class="headerlink" title="3. 設定建置與啟動指令"></a>3. 設定建置與啟動指令</h3><p>Render 需要知道如何建置與啟動專案。</p>
<p><strong>建置指令 (Build Command)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/4-build-command.png?raw=true"></p>
<p><strong>啟動指令 (Start Command)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/5-start-command.png?raw=true"></p>
<hr>
<h3 id="4-選擇-Instance-Type"><a href="#4-選擇-Instance-Type" class="headerlink" title="4. 選擇 Instance Type"></a>4. 選擇 Instance Type</h3><p>如果是學習或 Side Project，可以先選擇 <strong>Free 方案</strong>。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/6-instance-type.png?raw=true"></p>
<hr>
<h3 id="5-配置環境變數"><a href="#5-配置環境變數" class="headerlink" title="5. 配置環境變數"></a>5. 配置環境變數</h3><p>接著到 Environment Variables 區塊，新增專案需要的環境變數。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_HOST=&lt;你的資料庫主機&gt;</span><br><span class="line">DB_PORT=5432</span><br><span class="line">DB_USERNAME=&lt;你的使用者名稱&gt;</span><br><span class="line">DB_PASSWORD=&lt;你的密碼&gt;</span><br><span class="line">DB_NAME=&lt;你的資料庫名稱&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/7-env.png?raw=true"></p>
<p>點擊 <strong>Add from .env</strong>。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/8-add-env.png?raw=true"></p>
<p>點擊 <strong>Add variables</strong>，就能看到變數成功新增。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/9-env-result.png?raw=true"></p>
<hr>
<h3 id="6-開始部署"><a href="#6-開始部署" class="headerlink" title="6. 開始部署"></a>6. 開始部署</h3><p>設定完成後，點擊 <strong>Deploy Web Service</strong>，Render 就會開始自動建置與部署。</p>
<p><strong>部署中畫面</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/10-deploying.png?raw=true"></p>
<p><strong>部署成功畫面</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/11-deployed.png?raw=true"></p>
<hr>
<h2 id="驗證部署結果"><a href="#驗證部署結果" class="headerlink" title="驗證部署結果"></a>驗證部署結果</h2><p>部署完成後，Render 會提供一個公開網址。</p>
<p>透過該網址即可呼叫 API：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/12-req-link.png?raw=true"></p>
<p>使用 Postman 測試新增 Todo 資料，API 回應正常 ✅</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/13-postman-test.png?raw=true"></p>
<hr>
<p>🎉 恭喜你完成了一個完整的 Express + TypeScript + TypeORM 後端專案，並成功部署到 Render！</p>
<p>從這一步開始，你的專案已經能讓全世界存取了 。</p>
<p>⚠️ <strong>小提醒：Render Free Plan 限制</strong></p>
<p>如果你使用的是 Render 免費方案，會有以下幾點需要注意：</p>
<ul>
<li>服務若 <strong>15 分鐘沒有流量</strong>，會自動進入休眠狀態。</li>
<li>當再次有人存取時，服務會重新啟動，通常需要等待 <strong>30 秒左右</strong>。</li>
<li>免費方案的硬體資源有限，若專案流量大或需要長時間穩定服務，建議升級到付費方案。</li>
</ul>
<hr>
<h2 id="結語：從準備到上線-🚀"><a href="#結語：從準備到上線-🚀" class="headerlink" title="結語：從準備到上線 🚀"></a>結語：從準備到上線 🚀</h2><p>在 <strong>Day 10</strong>，我們完成了部署的所有前置作業：</p>
<ul>
<li>認識 Render 與雲端平台的定位</li>
<li>修改 <code>package.json</code>，指定 Node.js 版本</li>
<li>調整程式碼以支援環境變數的 <code>PORT</code></li>
<li>學會透過 GitHub PR 把 <code>feature</code> 分支合併到 <code>develop</code></li>
</ul>
<p>接著在 <strong>Day 11</strong>，我們則把 <code>develop</code> 分支部署到 Render，並完成：</p>
<ul>
<li>建立 Web Service</li>
<li>設定 Build 與 Start 指令</li>
<li>配置資料庫環境變數</li>
<li>驗證部署成功，API 可以正常使用</li>
</ul>
<p>至此，我們已經把專案從「本地端」正式推上「雲端」，讓全世界都能透過網址存取 。</p>
<p>接下來的篇章，我們將來點輕鬆的主題，介紹 Prettier 、ESLint 小工具，並逐步探索更多進階主題（檔案上傳、驗證系統等），讓專案更接近真實商業應用。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 12 - 程式碼自動排版神器：Prettier 實戰導入</title>
    <url>/2025/09/26/Day12%20-%20Prettier/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在團隊開發時，大家常常會因為一些小細節爭得不可開交：</p>
<p>有人愛用單引號 <code>&#39;</code>，有人卻堅持雙引號 <code>&quot;</code>；有人在每行結尾必加分號，有人則覺得省略更簡潔；甚至連一行程式碼能寫多長，都可能成為爭論焦點。</p>
<p>這些差異雖然不影響程式能不能跑，但會導致專案越來越凌亂，Code Review 也常常淪為「引號大戰」、「縮排大戰」。</p>
<p>這些關於 Coding Style 的問題，當然要來利用一些好用的工具來解決。</p>
<span id="more"></span>

<hr>
<h2 id="為什麼需要-Coding-Style？"><a href="#為什麼需要-Coding-Style？" class="headerlink" title="為什麼需要 Coding Style？"></a>為什麼需要 Coding Style？</h2><p>在開發專案時，每個人都有自己的習慣：</p>
<ul>
<li>有人喜歡 <code>單引號</code>，有人堅持 <code>雙引號</code>。</li>
<li>有人會在每行 <strong>80 字元</strong>就換行，有人覺得 <strong>120 字元</strong>也沒問題。</li>
<li>有人堅持在每行結尾加上 <code>;</code>，有人認為可以省略。</li>
</ul>
<p>這些差異雖然不會影響程式能不能執行，但會造成：</p>
<ol>
<li><strong>可讀性降低</strong>：程式碼風格不一致，團隊閱讀時需要額外的腦力轉換。</li>
<li><strong>協作成本上升</strong>：Code Review 時會浪費時間在「引號」、「縮排」這些小事，而不是程式邏輯。</li>
<li><strong>維護困難</strong>：專案越大，風格越不一致，日後接手的人會更痛苦。</li>
</ol>
<p>👉 為了避免這種情況，我們需要一個「統一的 Coding Style 工具」來幫忙。這就是 <strong>Prettier</strong> 出現的理由。</p>
<hr>
<h2 id="Prettier-是什麼？"><a href="#Prettier-是什麼？" class="headerlink" title="Prettier 是什麼？"></a>Prettier 是什麼？</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/1-Prettier.png?raw=true"></p>
<p><a href="https://prettier.io/">Prettier</a> 是一個「有主見的程式碼格式化工具」。</p>
<p>它會自動幫你排版程式碼，確保整個專案的風格一致。</p>
<h3 id="特點"><a href="#特點" class="headerlink" title="特點"></a>特點</h3><ul>
<li><strong>專注在排版</strong>（縮排、引號、換行、逗號…）。</li>
<li><strong>避免爭論</strong>：大家都用相同規則，開發者不需要再為風格吵架。</li>
<li><strong>支援多種語言</strong>：JavaScript、TypeScript、JSON、Markdown、HTML、CSS…</li>
</ul>
<p>📌 簡單比喻：</p>
<ul>
<li><strong>Prettier</strong> &#x3D; 幫你「整理房間」，讓程式碼整齊乾淨。</li>
<li><strong>ESLint</strong>（明天會介紹）&#x3D; 規範你的「生活習慣」，檢查程式寫法是否符合最佳實踐。</li>
</ul>
<hr>
<h2 id="VSCode-安裝-Prettier-套件"><a href="#VSCode-安裝-Prettier-套件" class="headerlink" title="VSCode 安裝 Prettier 套件"></a>VSCode 安裝 Prettier 套件</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/2-vscode-prettier.png?raw=true"></p>
<h2 id="專案加入-Prettier"><a href="#專案加入-Prettier" class="headerlink" title="專案加入 Prettier"></a>專案加入 Prettier</h2><p>安裝 Prettier：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev prettier</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="設定-Prettier"><a href="#設定-Prettier" class="headerlink" title="設定 Prettier"></a>設定 Prettier</h2><p>在專案根目錄新增 <code>.prettierrc</code>，統一規則：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">140</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li><code>semi: true</code> → 每行結尾加上分號</li>
<li><code>singleQuote: false</code> → 使用雙引號</li>
<li><code>trailingComma: &quot;all&quot;</code> → 物件最後一項也加逗號（方便日後新增項目）</li>
<li><code>tabWidth: 2</code> → 縮排 2 格</li>
<li><code>printWidth: 140</code> → 每行最長 140 字元</li>
</ul>
<hr>
<h2 id="忽略檔案：-prettierignore"><a href="#忽略檔案：-prettierignore" class="headerlink" title="忽略檔案：.prettierignore"></a>忽略檔案：<code>.prettierignore</code></h2><p>和 <code>.gitignore</code> 類似，這裡設定 Prettier 不要處理的檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略依賴套件</span><br><span class="line">node_modules</span><br><span class="line"></span><br><span class="line"># 忽略編譯後的輸出</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"># 忽略環境變數設定檔</span><br><span class="line">.env</span><br><span class="line">.env.*</span><br><span class="line"></span><br><span class="line"># 忽略版本控制與鎖檔</span><br><span class="line">.git</span><br><span class="line">.gitignore</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br><span class="line">pnpm-lock.yaml</span><br><span class="line"></span><br><span class="line"># 測試覆蓋率報告</span><br><span class="line">coverage</span><br><span class="line"></span><br><span class="line"># Log 檔案與紀錄</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># 靜態資源或上傳資料</span><br><span class="line">public/</span><br><span class="line">static/</span><br><span class="line">uploads/</span><br><span class="line"></span><br><span class="line"># 忽略 Prettier 自己的 ignore 設定</span><br><span class="line">.prettierignore</span><br><span class="line"></span><br><span class="line"># 圖片與媒體檔案</span><br><span class="line">*.png</span><br><span class="line">*.jpg</span><br><span class="line">*.jpeg</span><br><span class="line">*.svg</span><br><span class="line">*.gif</span><br><span class="line">*.mp4</span><br><span class="line">*.webm</span><br><span class="line"></span><br><span class="line"># 可選：忽略資料庫檔案或 dump 檔</span><br><span class="line">*.sqlite</span><br><span class="line">*.sql</span><br><span class="line">*.dump</span><br></pre></td></tr></table></figure>

<h3 id="為什麼要新增-prettierignore？"><a href="#為什麼要新增-prettierignore？" class="headerlink" title="為什麼要新增 .prettierignore？"></a>為什麼要新增 <code>.prettierignore</code>？</h3><ol>
<li><strong>不必要格式化</strong>：像 <code>node_modules</code> 或 <code>dist</code>，不是我們自己寫的程式碼。</li>
<li><strong>效能考量</strong>：避免 Prettier 處理大量無意義的檔案。</li>
<li><strong>避免衝突</strong>：像 <code>.env</code> ，格式被改可能會出錯。</li>
</ol>
<hr>
<h2 id="專案格式化範例"><a href="#專案格式化範例" class="headerlink" title="專案格式化範例"></a>專案格式化範例</h2><p>在 <code>package.json</code> 加入 scripts：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;src/**/*.&#123;js,ts&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format:check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --check \&quot;src/**/*.&#123;js,ts&#125;\&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm run format:check</code>：只檢查，不會修改程式碼 (可發現 <code>todoController.ts</code> 和 <code>todoRoutes.ts</code> 有格式上的問題)<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/3-format-check.png?raw=true"></li>
<li><code>npm run format</code>：自動格式化 <code>src</code> 底下的程式碼<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/4-format-code.png?raw=true"></li>
<li>附上專案程式碼經過 prettier 格式化後的結果 (<a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commits/feature/init-ts-express/">https://github.com/ArvinYang1925/iThome2025-node-ts/commits/feature/init-ts-express/</a>)</li>
</ul>
<p><code>todoController.ts</code></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/5-format-controller.png?raw=true"></p>
<p><code>todoRoutes.ts</code></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/6-format-route.png?raw=true"></p>
<p>成功透過 Prettier 格式化程式碼 💪</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>Coding Style</strong>：避免專案變得凌亂，提高團隊協作效率。</li>
<li><strong>Prettier</strong>：專注在「排版」，讓程式碼看起來統一且乾淨。</li>
<li><strong>搭配 ESLint</strong>：Prettier 負責「長相」，ESLint 負責「習慣」，兩者搭配才完整。</li>
</ul>
<p>👉 明天 (Day12) 我們會介紹 <strong>ESLint</strong>，看看它如何幫助我們寫出更正確、更有品質的程式碼。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/ce334a8f7f3366eb00ba95c1977326a03e3e72e2">Github 連結</a></p>
<blockquote>
<p>commit : setup prettier</p>
</blockquote>
<p><a href="https://ithelp.ithome.com.tw/m/articles/10294321">隨時隨地格式化 - Prettier</a></p>
<p><a href="https://israynotarray.com/javascript/20231031/1586150719/">你終究要用 Prettier，為什麼不一開始就用「Prettier」呢？</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 13 - 一致的程式碼：ESLint 導入</title>
    <url>/2025/09/27/Day13%20-%20ESLint/</url>
    <content><![CDATA[<h2 id="ESLint-的歷史與簡介"><a href="#ESLint-的歷史與簡介" class="headerlink" title="ESLint 的歷史與簡介"></a>ESLint 的歷史與簡介</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day13-ESLint/1-eslint.png?raw=true"></p>
<p>在 JavaScript 的早期，開發者缺乏統一的規範，程式碼容易因個人習慣而變得混亂。</p>
<ul>
<li>2000 年代，出現了 <strong>JSLint</strong>（由 Douglas Crockford 開發，JavaScript 語言守護者之一），用來檢查常見錯誤。</li>
<li>之後社群又發展出 <strong>JSHint</strong>，提供更彈性的規則與設定。</li>
<li>到了 <strong>2013 年</strong>，Nicholas C. Zakas（前 Yahoo! JS 團隊成員）推出 <strong>ESLint</strong>，透過「規則驅動 + 插件機制」，讓開發者可以自由擴展並制定專案專屬規範。</li>
</ul>
<p>今天，ESLint 已經成為 JavaScript&#x2F;TypeScript 專案裡最常見的程式碼檢查工具。</p>
<span id="more"></span>

<hr>
<h2 id="為什麼需要-ESLint？"><a href="#為什麼需要-ESLint？" class="headerlink" title="為什麼需要 ESLint？"></a>為什麼需要 ESLint？</h2><p>和昨天的 <strong>Prettier</strong> 不同，ESLint 專注於 <strong>程式邏輯與最佳實踐</strong>。</p>
<h3 id="常見檢查範例"><a href="#常見檢查範例" class="headerlink" title="常見檢查範例"></a>常見檢查範例</h3><ul>
<li><strong>程式錯誤</strong>：未定義變數、未使用的變數、錯誤的語法。</li>
<li><strong>最佳實踐</strong>：禁止使用 <code>var</code>、避免 <code>any</code>、規定函式宣告風格。</li>
</ul>
<h3 id="為什麼重要？"><a href="#為什麼重要？" class="headerlink" title="為什麼重要？"></a>為什麼重要？</h3><ol>
<li><strong>降低 Bug 風險</strong>：提早發現潛在錯誤，避免程式在 runtime 才爆炸。</li>
<li><strong>提升可讀性</strong>：團隊都遵守相同規範，程式碼更一致。</li>
<li><strong>改善協作體驗</strong>：Code Review 時，機器會先抓語法與規範問題，讓人類專注於商業邏輯。</li>
</ol>
<p>👉 簡單來說：</p>
<ul>
<li><strong>Prettier</strong>：讓程式碼「好看」</li>
<li><strong>ESLint</strong>：讓程式碼「正確」</li>
</ul>
<hr>
<h2 id="VSCode-安裝-ESLint"><a href="#VSCode-安裝-ESLint" class="headerlink" title="VSCode 安裝 ESLint"></a>VSCode 安裝 ESLint</h2><p>這邊也建議在 VSCode 裡安裝 ESLint 套件：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day13-ESLint/2-vscode-eslint.png?raw=true"></p>
<hr>
<h2 id="專案安裝-ESLint"><a href="#專案安裝-ESLint" class="headerlink" title="專案安裝 ESLint"></a>專案安裝 ESLint</h2><p>在專案裡安裝 ESLint 以及相關套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install eslint @eslint/js eslint-config-prettier eslint-plugin-prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="設定-ESLint"><a href="#設定-ESLint" class="headerlink" title="設定 ESLint"></a>設定 ESLint</h2><p>在專案根目錄新增 <code>eslint.config.js</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> js = <span class="built_in">require</span>(<span class="string">&quot;@eslint/js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> globals = <span class="built_in">require</span>(<span class="string">&quot;globals&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> prettier = <span class="built_in">require</span>(<span class="string">&quot;eslint-config-prettier&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> tsParser = <span class="built_in">require</span>(<span class="string">&quot;@typescript-eslint/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> tsPlugin = <span class="built_in">require</span>(<span class="string">&quot;@typescript-eslint/eslint-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">files</span>: [<span class="string">&quot;**/*.ts&quot;</span>], <span class="comment">// 檢查 .ts 檔案</span></span><br><span class="line">    <span class="attr">languageOptions</span>: &#123;</span><br><span class="line">      <span class="attr">parser</span>: tsParser, <span class="comment">// 用 TypeScript 的解析器</span></span><br><span class="line">      <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// 支援 ES 模組</span></span><br><span class="line">      <span class="attr">globals</span>: &#123;</span><br><span class="line">        ...globals.<span class="property">node</span>, <span class="comment">// Node.js 的全域變數（像 process）</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@typescript-eslint&quot;</span>: tsPlugin, <span class="comment">// TypeScript 專屬插件</span></span><br><span class="line">      <span class="attr">prettier</span>: <span class="built_in">require</span>(<span class="string">&quot;eslint-plugin-prettier&quot;</span>), <span class="comment">// Prettier 插件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      ...js.<span class="property">configs</span>.<span class="property">recommended</span>.<span class="property">rules</span>, <span class="comment">// ESLint 基本規則</span></span><br><span class="line">      ...tsPlugin.<span class="property">configs</span>.<span class="property">recommended</span>.<span class="property">rules</span>, <span class="comment">// TypeScript 推薦規則</span></span><br><span class="line">      ...prettier.<span class="property">rules</span>, <span class="comment">// 正確使用 prettier 配置</span></span><br><span class="line">      <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// Prettier 格式錯誤會顯示</span></span><br><span class="line">      <span class="attr">semi</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">// 行尾一定要有分號</span></span><br><span class="line">      <span class="attr">quotes</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;double&quot;</span>], <span class="comment">// 用雙引號</span></span><br><span class="line">      <span class="string">&quot;no-var&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 不准用 var</span></span><br><span class="line">      <span class="string">&quot;@typescript-eslint/no-unused-vars&quot;</span>: [<span class="string">&quot;error&quot;</span>], <span class="comment">// 不准有沒用到的變數</span></span><br><span class="line">      <span class="string">&quot;@typescript-eslint/no-explicit-any&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 禁止使用 any 類型</span></span><br><span class="line">      <span class="comment">// 改用 TypeScript 版本的 func-style</span></span><br><span class="line">      <span class="string">&quot;func-style&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;declaration&quot;</span>, &#123; <span class="attr">allowArrowFunctions</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">      <span class="comment">// 禁止一般函式表達式</span></span><br><span class="line">      <span class="string">&quot;no-restricted-syntax&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">selector</span>: <span class="string">&quot;FunctionExpression&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;請使用函式宣告式或箭頭函式，避免使用一般函式表達式 😎&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>在 <code>package.json</code> 裡加上 script：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;src/**/*.ts\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;src/**/*.ts\&quot; --fix&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm run lint</code>：檢查程式碼規則</li>
<li><code>npm run lint:fix</code>：自動修復能修的錯誤</li>
</ul>
<hr>
<h2 id="測試-ESLint"><a href="#測試-ESLint" class="headerlink" title="測試 ESLint"></a>測試 ESLint</h2><p>在 <code>/src</code> 下新增 <code>testLint.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 違反 1: sayHello 宣告但未使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 違反 2: 用 any 型別（TypeScript 規則）</span></span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">&quot;Hello &quot;</span> + name; <span class="comment">// 違反 3: 用 var 宣告</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> unusedVar = <span class="number">42</span>; <span class="comment">// 違反 4: 未使用的變數</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 違反 5:請使用函式宣告式或箭頭函式，避免使用一般函式表達式</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">a</span>(<span class="string">&quot;Peter&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/test&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Test route&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day13-ESLint/3-npm-run-lint.png?raw=true"></p>
<p>你會看到 ESLint 把所有違規都列出來，幫助你更快找到問題。</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li>ESLint 誕生於 2013 年，是目前最常見的 JavaScript&#x2F;TypeScript 程式碼檢查工具。</li>
<li>與 Prettier 搭配：<ul>
<li><strong>Prettier</strong> → 排版風格一致</li>
<li><strong>ESLint</strong> → 邏輯與規範正確</li>
</ul>
</li>
<li>在專案中安裝、設定後，可以自動檢查、修復程式，避免錯誤。</li>
</ul>
<hr>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><blockquote>
<p>commit : setup ESLint</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/2786c17e588e8598f42e8349a901f3d6717afe46">Github 連結</a></p>
<p>👉 明天 (Day14) 我們則會來介紹 Zod 驗證 (API 驗證守護神)，期待期待 💪</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 2 - 為什麼要用 TypeScript 開發 Node.js？（價值、趨勢）</title>
    <url>/2025/09/16/Day2%20-%20Why%20use%20TypeScript/</url>
    <content><![CDATA[<p>在開始之前，先讓我們來談談今天的主角 —— <strong>TypeScript</strong>。</p>
<p>許多人在接觸 TypeScript 的第一反應是：「這不就是 JavaScript 加上型別嗎？」沒錯，這句話雖然簡化了很多細節，但卻說中了核心。TypeScript 本質上就是 <strong>JavaScript 的超集（superset）</strong>，它在 JavaScript 的基礎上加上了型別系統與一些進階語法糖，讓開發者能寫出更可靠、更可維護的程式。</p>
<span id="more"></span>

<hr>
<h2 id="一、TypeScript-簡介與發展歷史"><a href="#一、TypeScript-簡介與發展歷史" class="headerlink" title="一、TypeScript 簡介與發展歷史"></a>一、TypeScript 簡介與發展歷史</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day2/typescript-officle.png?raw=true"></p>
<p>TypeScript 由 <strong>微軟（Microsoft）</strong> 團隊在 <strong>2012 年</strong>發表，設計之父是著名的程式語言專家 <strong>Anders Hejlsberg</strong>，他同時也是 C# 的主要設計者。當時 JavaScript 在大型專案中經常遇到可維護性與錯誤檢查的瓶頸，因此 TypeScript 誕生的目標就是：</p>
<p>👉 <strong>讓 JavaScript 更適合大型專案的開發</strong>。</p>
<p>隨著前端框架（Angular、React、Vue）逐漸壯大，以及 Node.js 進軍後端，TypeScript 的生態圈也迅速擴展。</p>
<hr>
<h2 id="二、TypeScript-與-JavaScript-的關係"><a href="#二、TypeScript-與-JavaScript-的關係" class="headerlink" title="二、TypeScript 與 JavaScript 的關係"></a>二、TypeScript 與 JavaScript 的關係</h2><p>可以把 TypeScript 想成是 <strong>加強版的 JavaScript</strong>。</p>
<ul>
<li><strong>JavaScript</strong>：瀏覽器和 Node.js 都能直接執行的語言。</li>
<li><strong>TypeScript</strong>：在 JavaScript 的基礎上，增加了 <strong>型別系統</strong>、<strong>介面（interface）</strong>、<strong>泛型（generics）</strong> 等功能。</li>
</ul>
<p>所有 TypeScript 程式碼最終都會被「編譯（<strong>compile</strong>）」成純 JavaScript，才能在 Node.js 或瀏覽器中執行。換句話說：</p>
<p>💡 <strong>任何合法的 JavaScript 程式碼，本身就是合法的 TypeScript 程式碼。</strong></p>
<hr>
<h2 id="三、TypeScript-的優點"><a href="#三、TypeScript-的優點" class="headerlink" title="三、TypeScript 的優點"></a>三、TypeScript 的優點</h2><p>那麼 TypeScript 到底解決了什麼痛點呢？以下列幾個主要優點：</p>
<ol>
<li><strong>靜態型別檢查</strong><ul>
<li>在編譯階段就能發現型別錯誤，減少 runtime bug。</li>
<li>例如：<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line">age = <span class="string">&quot;twenty-five&quot;</span>; <span class="comment">// 編譯錯誤！</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>更好的 IDE 支援</strong><ul>
<li>自動補全、即時型別提示與錯誤檢查，都比純 JavaScript 更精準。</li>
<li>這能大幅提升開發體驗，尤其在大型專案中。</li>
</ul>
</li>
<li><strong>程式結構更清晰</strong><ul>
<li>使用 interface、type、enum 可以清楚描述資料結構，團隊成員更容易理解。</li>
</ul>
</li>
<li><strong>降低維護成本</strong><ul>
<li>型別提示與嚴格檢查，讓新成員接手專案更容易上手，也避免「看名字猜型別」的情況。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="四、為什麼要用-TypeScript-開發-Node-js？（價值與趨勢）"><a href="#四、為什麼要用-TypeScript-開發-Node-js？（價值與趨勢）" class="headerlink" title="四、為什麼要用 TypeScript 開發 Node.js？（價值與趨勢）"></a>四、為什麼要用 TypeScript 開發 Node.js？（價值與趨勢）</h2><p>很多人會問：</p>
<blockquote>
<p>Node.js 已經用 JavaScript 就能開發了，為什麼還要多學一個 TypeScript？</p>
</blockquote>
<p>理由其實很簡單，歸納成兩個關鍵字：<strong>價值</strong>與<strong>趨勢</strong>。</p>
<h3 id="1-價值"><a href="#1-價值" class="headerlink" title="1. 價值"></a>1. 價值</h3><ul>
<li><strong>提升專案可靠度</strong>：伺服器端通常牽涉到資料庫、API、使用者資料，任何錯誤都可能導致重大問題。TypeScript 的型別檢查能大幅降低這種風險。</li>
<li><strong>更好的團隊協作</strong>：Node.js 專案通常不是一人獨自開發，而是多人協作。TypeScript 的型別定義就是團隊之間的「契約（contract）」，避免誤解。</li>
<li><strong>長期維護更輕鬆</strong>：後端系統常常需要跑好幾年，TypeScript 能讓專案在 1 年、3 年後依然可讀、可維護。</li>
</ul>
<h3 id="2-趨勢"><a href="#2-趨勢" class="headerlink" title="2. 趨勢"></a>2. 趨勢</h3><ul>
<li><strong>主流框架全面支援</strong>：像是 NestJS、Next.js 都是以 TypeScript 為核心打造。</li>
<li><strong>開發者市場需求</strong>：求職網站上，TypeScript 幾乎已經是 Node.js 工程師的必備技能。</li>
<li><strong>生態系成熟</strong>：越來越多 npm 套件都提供官方的型別定義，不再需要自己額外補齊。</li>
</ul>
<p>換句話說，現在的 TypeScript 已經不是「可有可無的加分題」，而是 Node.js 開發中逐漸成為「基本配備」的技能。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總結來說，TypeScript 不是要取代 JavaScript，而是要 <strong>讓 JavaScript 更適合在大型、長期、多人協作的專案中發光發熱</strong>。</p>
<p>在 Node.js 的後端開發世界，可靠性、維護性與可擴展性是第一優先，而這正是 TypeScript 最擅長的領域。</p>
<p>所以，與其問「為什麼要用 TypeScript？」更應該問的是：</p>
<p>👉 <strong>如果不用 TypeScript，我會損失什麼？</strong></p>
<p>在未來的系列文章裡，我們會先介紹一些 TypeScript 基礎，然後一步一步示範，如何把 TypeScript 和 Node.js 結合起來，打造一個專案級的開發環境 🚀。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 4 - TypeScript 核心語法 (2)：union、enum</title>
    <url>/2025/09/18/Day4%20-%20TypeScript%20%E6%A0%B8%E5%BF%83%E8%AA%9E%E6%B3%95%20(2)/</url>
    <content><![CDATA[<p>昨天我們介紹了基本型別，今天要進一步學會 <strong>Union Type（聯合型別）</strong> 和 <strong>Enum（列舉）</strong>。</p>
<p>這次一樣用「搭火車」的例子 🚄，讓程式碼更貼近生活！</p>
<span id="more"></span>

<hr>
<h2 id="1-Union-Type（聯合型別）"><a href="#1-Union-Type（聯合型別）" class="headerlink" title="1. Union Type（聯合型別）"></a>1. Union Type（聯合型別）</h2><p>Union 的特色是用 <strong><code>|</code></strong> 將多種可能型別區分開來。</p>
<p>當一個值可能有「多種型別」時，Union 非常好用。</p>
<h3 id="搭火車範例：乘客的票號"><a href="#搭火車範例：乘客的票號" class="headerlink" title="搭火車範例：乘客的票號"></a>搭火車範例：乘客的票號</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">ticketId</span>: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">ticketId = <span class="number">12345</span>; <span class="comment">// 數字型票號</span></span><br><span class="line">ticketId = <span class="string">&quot;A12&quot;</span>; <span class="comment">// 字串型票號</span></span><br><span class="line"><span class="comment">// ticketId = true; // ❌ 編譯錯誤</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="常見搭配：型別守衛-Type-Guards"><a href="#常見搭配：型別守衛-Type-Guards" class="headerlink" title="常見搭配：型別守衛 (Type Guards)"></a>常見搭配：型別守衛 (Type Guards)</h3><p>在使用 Union 時，我們通常需要用 <strong><code>typeof</code></strong> 來判斷型別後再操作，避免出錯。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printTicketId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;票號（字串）：&quot;</span> + id.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;票號（數字）：&quot;</span> + id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printTicketId</span>(<span class="number">12345</span>);</span><br><span class="line"><span class="title function_">printTicketId</span>(<span class="string">&quot;b23&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Union-Type-補充說明-🚉"><a href="#Union-Type-補充說明-🚉" class="headerlink" title="Union Type 補充說明 🚉"></a>Union Type 補充說明 🚉</h3><ul>
<li><strong>優點</strong>：<ol>
<li>適合處理「多種可能型別」的情境，例如 <strong>API 回傳值</strong> 或 <strong>使用者輸入</strong>。</li>
<li>可以搭配 <strong>Type Guards</strong> 提高安全性。</li>
</ol>
</li>
<li><strong>常見使用場景</strong>：<ul>
<li>車票 ID（可能是數字 &#x2F; 字串）</li>
<li>車廂座位（可能是 “A12” 也可能是 12）</li>
<li>付款方式（可能是 “現金” | “信用卡” | “行動支付”）</li>
</ul>
</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PaymentMethod</span> = <span class="string">&quot;Cash&quot;</span> | <span class="string">&quot;CreditCard&quot;</span> | <span class="string">&quot;MobilePay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">payment</span>: <span class="title class_">PaymentMethod</span>;</span><br><span class="line"></span><br><span class="line">payment = <span class="string">&quot;Cash&quot;</span>; <span class="comment">// ✅</span></span><br><span class="line">payment = <span class="string">&quot;MobilePay&quot;</span>; <span class="comment">// ✅</span></span><br><span class="line"><span class="comment">// payment = &quot;Coupon&quot;;  // ❌ 不在定義範圍</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-Enum（列舉）"><a href="#2-Enum（列舉）" class="headerlink" title="2. Enum（列舉）"></a>2. Enum（列舉）</h2><p>Enum 適合定義「固定範圍內的值」，比 Union 更有「名稱 → 值」的對應關係。</p>
<h3 id="搭火車範例：車票狀態"><a href="#搭火車範例：車票狀態" class="headerlink" title="搭火車範例：車票狀態"></a>搭火車範例：車票狀態</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TicketStatus</span> &#123;</span><br><span class="line">  <span class="title class_">NotBought</span>, <span class="comment">// 尚未購買</span></span><br><span class="line">  <span class="title class_">Bought</span>, <span class="comment">// 已購票</span></span><br><span class="line">  <span class="title class_">Used</span>, <span class="comment">// 已使用</span></span><br><span class="line">  <span class="title class_">Expired</span>, <span class="comment">// 已過期</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myTicket</span>: &#123; <span class="attr">passenger</span>: <span class="built_in">string</span>; <span class="attr">status</span>: <span class="title class_">TicketStatus</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">passenger</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="title class_">TicketStatus</span>.<span class="property">Bought</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myTicket);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Enum-陣列應用：乘客清單"><a href="#Enum-陣列應用：乘客清單" class="headerlink" title="Enum + 陣列應用：乘客清單"></a>Enum + 陣列應用：乘客清單</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">passengers</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">status</span>: <span class="title class_">TicketStatus</span> &#125;[] = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addPassenger</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  passengers.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">status</span>: <span class="title class_">TicketStatus</span>.<span class="property">NotBought</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addPassenger</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="title function_">addPassenger</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(passengers);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Enum-設定字串值（更直觀）"><a href="#Enum-設定字串值（更直觀）" class="headerlink" title="Enum 設定字串值（更直觀）"></a>Enum 設定字串值（更直觀）</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TrainClass</span> &#123;</span><br><span class="line">  <span class="title class_">Express</span> = <span class="string">&quot;自強號&quot;</span>,</span><br><span class="line">  <span class="title class_">Local</span> = <span class="string">&quot;區間車&quot;</span>,</span><br><span class="line">  <span class="title class_">HighSpeed</span> = <span class="string">&quot;高鐵&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printTrainClass</span>(<span class="params">c: TrainClass</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;列車種類：&quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printTrainClass</span>(<span class="title class_">TrainClass</span>.<span class="property">Express</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Enum-補充說明-🚆"><a href="#Enum-補充說明-🚆" class="headerlink" title="Enum 補充說明 🚆"></a>Enum 補充說明 🚆</h3><ul>
<li><strong>優點</strong>：<ol>
<li>讓「固定選項」更清楚（比字串常數更有語意）。</li>
<li>避免拼錯字串（TS 編譯時就會檢查錯誤）。</li>
<li>可讀性高，適合大型專案。</li>
</ol>
</li>
<li><strong>常見使用場景</strong>：<ul>
<li>票券狀態（已購買 &#x2F; 未購買 &#x2F; 已使用 &#x2F; 過期）</li>
<li>列車種類（自強號 &#x2F; 區間車 &#x2F; 高鐵）</li>
<li>座位等級（普通 &#x2F; 商務 &#x2F; 頭等）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>Union Type</strong>：讓一個變數可以有多種型別，常用於「票號、付款方式」這類不確定型別的場景。</li>
<li><strong>Enum</strong>：讓「固定範圍的值」更有語意，常用於「票券狀態、列車種類、座位等級」。</li>
<li>Union 靈活，Enum 嚴謹 —— 搭配使用可以讓程式碼更乾淨又安全。</li>
</ul>
<p>👉 明天（Day 5）我們會介紹 <strong>interface</strong> 和 <strong>type</strong>，讓我們的火車旅程更結構化！ 🚉</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 3 - TypeScript 核心語法 (1)：型別系統與核心</title>
    <url>/2025/09/17/Day3%20-%20TypeScript%20%E6%A0%B8%E5%BF%83%E8%AA%9E%E6%B3%95%20(1)/</url>
    <content><![CDATA[<p>前兩天我們介紹了 TypeScript 的背景與價值，今天要開始動手寫程式碼，從最常見的 <strong>基本型別</strong> 與 <strong>型別推斷 &#x2F; 型別註記</strong> 講起。</p>
<hr>
<h2 id="1-基本常用型別"><a href="#1-基本常用型別" class="headerlink" title="1. 基本常用型別"></a>1. 基本常用型別</h2><p>TypeScript 在 JavaScript 基礎上，提供了更嚴謹的型別檢查。以下是常見的基本型別：</p>
<ul>
<li><strong>string</strong>：字串</li>
<li><strong>number</strong>：數字（整數、浮點數都屬於 number）</li>
<li><strong>boolean</strong>：布林值（true&#x2F;false）</li>
<li><strong>array</strong>：陣列</li>
<li><strong>object</strong>：物件，可指定 key 與 value 的型別</li>
<li><strong>null</strong> &#x2F; <strong>undefined</strong>：空值與未定義<span id="more"></span></li>
<li><strong>any</strong>：跳過型別檢查，不建議常用</li>
<li><strong>unknown</strong>：安全版的 any，需要檢查後才能使用</li>
<li><strong>void</strong>：通常用在函式沒有回傳值時</li>
</ul>
<p>我們用「搭火車」這個情境，來把 <strong>基本型別</strong> 串在一起，這樣學起來更有畫面。以下是範例：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 搭火車的情境</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘客名字（string）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">passengerName</span>: <span class="built_in">string</span> = <span class="string">&quot;Arvin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 年齡（number）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否已經買票（boolean）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isBuyTicket</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行李（array）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">packages</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;背包&quot;</span>, <span class="string">&quot;行李箱&quot;</span>, <span class="string">&quot;Mac&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 車票（object）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ticket</span>: &#123; <span class="attr">start</span>: <span class="built_in">string</span>; <span class="attr">destination</span>: <span class="built_in">string</span>; <span class="attr">price</span>: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">start</span>: <span class="string">&quot;台南&quot;</span>,</span><br><span class="line">  <span class="attr">destination</span>: <span class="string">&quot;台北&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">750</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不確定的外部輸入（unknown）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">inputSeat</span>: <span class="built_in">unknown</span> = <span class="string">&quot;A12&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> inputSeat === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`座位號碼是 <span class="subst">$&#123;inputSeat&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不小心遺失票券（null &amp; undefined）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">lostTicket</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notAssignedSeat</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// any（不建議，但有時候需要先用）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">randomInfo</span>: <span class="built_in">any</span> = <span class="string">&quot;隨便的資訊&quot;</span>;</span><br><span class="line">randomInfo = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void：檢查是否有買票（沒有回傳值）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkTicket</span>(<span class="params">name: <span class="built_in">string</span>, hasTicket: <span class="built_in">boolean</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasTicket) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> 已經買票，可以進站！`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> 尚未購票！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkTicket</span>(passengerName, isBuyTicket);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-型別推斷-vs-型別註記"><a href="#2-型別推斷-vs-型別註記" class="headerlink" title="2. 型別推斷 vs 型別註記"></a>2. 型別推斷 vs 型別註記</h2><p>TypeScript 在很多情況下會自動「推斷型別」：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> trainStation = <span class="string">&quot;台北&quot;</span>; <span class="comment">// 推斷為 string</span></span><br><span class="line"><span class="keyword">let</span> ticketPrice = <span class="number">500</span>; <span class="comment">// 推斷為 number</span></span><br></pre></td></tr></table></figure>

<p>但有時候我們需要 <strong>手動註記型別</strong>，讓程式碼更清楚：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">trainStation</span>: <span class="built_in">string</span> = <span class="string">&quot;台北&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ticketPrice</span>: <span class="built_in">number</span> = <span class="number">500</span>;</span><br></pre></td></tr></table></figure>

<h3 id="差異比較"><a href="#差異比較" class="headerlink" title="差異比較"></a>差異比較</h3><ul>
<li><strong>型別推斷</strong>：程式更簡潔，讓 TS 自動判斷。</li>
<li><strong>型別註記</strong>：在需要 <strong>可讀性</strong>、<strong>強制規範</strong>、或 <strong>複雜物件</strong> 時更適合。</li>
</ul>
<hr>
<h2 id="3-簡單使用場景"><a href="#3-簡單使用場景" class="headerlink" title="3. 簡單使用場景"></a>3. 簡單使用場景</h2><h3 id="✅-適合用型別推斷"><a href="#✅-適合用型別推斷" class="headerlink" title="✅ 適合用型別推斷"></a>✅ 適合用型別推斷</h3><p>當值一看就知道型別，TS 自動判斷即可。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> trainName = <span class="string">&quot;自強號&quot;</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">let</span> travelTime = <span class="number">120</span>; <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<h3 id="✅-適合用型別註記"><a href="#✅-適合用型別註記" class="headerlink" title="✅ 適合用型別註記"></a>✅ 適合用型別註記</h3><ol>
<li><strong>函式參數與回傳值</strong>（TS 無法從空參數自動推斷，必須標註）</li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buyTicket</span>(<span class="params">start: <span class="built_in">string</span>, destination: <span class="built_in">string</span>, price: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`已購買從 <span class="subst">$&#123;start&#125;</span> 到 <span class="subst">$&#123;destination&#125;</span> 的車票，票價 <span class="subst">$&#123;price&#125;</span> 元`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>物件結構清楚表達</strong></li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">passenger</span>: &#123; <span class="attr">id</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">hasTicket</span>: <span class="built_in">boolean</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">  <span class="attr">hasTicket</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>與 API 或外部資料互動</strong></li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TrainApiResponse</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">stations</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">TrainApiResponse</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">stations</span>: [<span class="string">&quot;台北&quot;</span>, <span class="string">&quot;新竹&quot;</span>, <span class="string">&quot;台中&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>基本型別</strong>是 TypeScript 的基礎：<code>string</code>、<code>number</code>、<code>boolean</code>、<code>array</code>、<code>object</code>、<code>null</code>、<code>undefined</code>…</li>
<li><strong>型別推斷</strong>：讓程式更簡潔。</li>
<li><strong>型別註記</strong>：在函式、物件、API 回傳值等情境中特別重要。</li>
</ul>
<p>👉 明天（Day 4）我們會進一步介紹 union、enum，讓型別系統更靈活！</p>
<hr>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 5 - TypeScript 核心語法 (3)：interface、type、generics</title>
    <url>/2025/09/19/Day5%20-%20TypeScript%20-%20interface%E3%80%81type%E3%80%81generics/</url>
    <content><![CDATA[<p>昨天我們介紹了 <strong>Union</strong> 和 <strong>Enum</strong>，今天要進一步學習如何用 <strong>Interface、Type、Generics</strong> 來讓程式更有結構、更可重用。</p>
<p>這次一樣用「搭火車」的例子 🚄，幫助你快速理解！</p>
<span id="more"></span>

<hr>
<h2 id="1-Interface（介面）"><a href="#1-Interface（介面）" class="headerlink" title="1. Interface（介面）"></a>1. Interface（介面）</h2><p>介面用來定義「物件的形狀」，就像規劃「火車乘客」需要有什麼資料。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Passenger</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  seat?: <span class="built_in">string</span>; <span class="comment">// 可選屬性（可能沒劃位）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerA</span>: <span class="title class_">Passenger</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerB</span>: <span class="title class_">Passenger</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">seat</span>: <span class="string">&quot;A12&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>👉 特點：</p>
<ul>
<li>適合用來描述「物件結構」。</li>
<li>支援 <strong>extends</strong>（繼承），方便擴充。</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">VipPassenger</span> <span class="keyword">extends</span> <span class="title class_">Passenger</span> &#123;</span><br><span class="line">  <span class="attr">loungeAccess</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">vip</span>: <span class="title class_">VipPassenger</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">  <span class="attr">seat</span>: <span class="string">&quot;B10&quot;</span>,</span><br><span class="line">  <span class="attr">loungeAccess</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-Type（型別別名）"><a href="#2-Type（型別別名）" class="headerlink" title="2. Type（型別別名）"></a>2. Type（型別別名）</h2><p><code>type</code> 與 <code>interface</code> 很像，不過它更靈活，不只可以描述物件，還能用來定義 <strong>聯合型別、基本型別別名</strong>。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 車票編號可能是數字或字串</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TicketID</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘客物件</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PassengerType</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">TicketID</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerC</span>: <span class="title class_">PassengerType</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;T-123&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>👉 差異比較：</p>
<ul>
<li><strong>interface</strong>：專注描述物件結構，可繼承、擴充。</li>
<li><strong>type</strong>：更靈活，可以描述各種型別組合（物件、Union、Tuple 等）。</li>
</ul>
<hr>
<h2 id="3-泛型（Generics）"><a href="#3-泛型（Generics）" class="headerlink" title="3. 泛型（Generics）"></a>3. 泛型（Generics）</h2><p>泛型就像「火車車廂」🚃：</p>
<p>同樣的車廂結構，可以載不同種類的乘客或貨物。</p>
<h3 id="函式中的泛型"><a href="#函式中的泛型" class="headerlink" title="函式中的泛型"></a>函式中的泛型</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 明確指定型別</span></span><br><span class="line"><span class="keyword">const</span> ticketNumber = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">const</span> passengerName = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以自動推斷</span></span><br><span class="line"><span class="keyword">const</span> autoTicket = <span class="title function_">identity</span>(<span class="string">&quot;E12&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="介面中的泛型"><a href="#介面中的泛型" class="headerlink" title="介面中的泛型"></a>介面中的泛型</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TrainResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳單一乘客</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerResponse</span>: <span class="title class_">TrainResponse</span>&lt;<span class="title class_">Passenger</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳乘客陣列</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengersResponse</span>: <span class="title class_">TrainResponse</span>&lt;<span class="title class_">Passenger</span>[]&gt; = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">seat</span>: <span class="string">&quot;C3&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="類別中的泛型"><a href="#類別中的泛型" class="headerlink" title="類別中的泛型"></a>類別中的泛型</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrainCar</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">items</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getAll</span>(): T[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立「乘客車廂」</span></span><br><span class="line"><span class="keyword">const</span> passengerCar = <span class="keyword">new</span> <span class="title class_">TrainCar</span>&lt;<span class="title class_">Passenger</span>&gt;();</span><br><span class="line">passengerCar.<span class="title function_">add</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span> &#125;);</span><br><span class="line">passengerCar.<span class="title function_">add</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立「行李車廂」</span></span><br><span class="line"><span class="keyword">const</span> luggageCar = <span class="keyword">new</span> <span class="title class_">TrainCar</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">luggageCar.<span class="title function_">add</span>(<span class="string">&quot;背包&quot;</span>);</span><br><span class="line">luggageCar.<span class="title function_">add</span>(<span class="string">&quot;行李箱&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(passengerCar.<span class="title function_">getAll</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(luggageCar.<span class="title function_">getAll</span>());</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>Interface</strong>：適合描述物件結構，例如「乘客」或「車票」。</li>
<li><strong>Type</strong>：更靈活，可以描述 <strong>物件 + Union + Tuple</strong>，常用來定義「票號、付款方式」等。</li>
<li><strong>Generics</strong>：像「火車車廂」，同一套結構可以裝不同型別，讓程式碼更可重用。</li>
</ul>
<hr>
<h2 id="Interface-vs-Type-vs-Generics-對照表"><a href="#Interface-vs-Type-vs-Generics-對照表" class="headerlink" title="Interface vs Type vs Generics 對照表"></a>Interface vs Type vs Generics 對照表</h2><table>
<thead>
<tr>
<th>特點</th>
<th>Interface</th>
<th>Type</th>
<th>Generics</th>
</tr>
</thead>
<tbody><tr>
<td><strong>用途</strong></td>
<td>定義物件結構</td>
<td>定義各種型別（物件、Union、Tuple…）</td>
<td>建立可重用、保留型別的模板</td>
</tr>
<tr>
<td><strong>延伸性</strong></td>
<td>可用 <code>extends</code> 繼承、擴充</td>
<td>不可繼承，但可用 <code>&amp;</code> 做交集合併</td>
<td>可套用在函式、介面、類別</td>
</tr>
<tr>
<td><strong>優點</strong></td>
<td>清楚描述物件結構、支援擴充</td>
<td>彈性大，可用於各種型別組合</td>
<td>可重用，提高型別安全性</td>
</tr>
</tbody></table>
<hr>
<p>👉 明天（Day 6）我們會開始進入實戰的一個全新篇章，開始初始化一個 <strong>TypeScript + Node.js 專案 !</strong></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 6 - 如何建立一個 TypeScript + Node.js 環境 (1)：初始化專案</title>
    <url>/2025/09/20/Day6%20-%20Node.js%20+%20TS%20(1)/</url>
    <content><![CDATA[<p>昨天我們聊了很多概念，今天開始要<strong>動手實作</strong>啦！💻</p>
<p>我們的目標很簡單：建立一個能跑起來的 <strong>TypeScript + Node.js 專案環境</strong>，並讓瀏覽器成功回應 <strong>「Hello, iThome2025 !」</strong> 🚀</p>
<p>準備好了嗎？Let’s go！</p>
<span id="more"></span>

<hr>
<h2 id="一、專案初始化"><a href="#一、專案初始化" class="headerlink" title="一、專案初始化"></a>一、專案初始化</h2><h3 id="1-開一個專案資料夾"><a href="#1-開一個專案資料夾" class="headerlink" title="1. 開一個專案資料夾"></a>1. 開一個專案資料夾</h3><p>你可以直接在電腦裡開一個新資料夾，或是從 GitHub Clone 專案下來。</p>
<p>這邊示範 Git 版本，順便練習一下分支管理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;你的專案網址&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;專案資料夾&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 develop 分支</span></span><br><span class="line">git checkout -b develop</span><br><span class="line">git push --set-upstream origin develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立功能分支</span></span><br><span class="line">git checkout -b feature/init-ts-express</span><br><span class="line">git push --set-upstream origin feature/init-ts-express</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>👉 這樣就能在一個乾淨的分支上開始開發，方便日後合併 PR。</p>
<hr>
<h3 id="2-加上-gitignore"><a href="#2-加上-gitignore" class="headerlink" title="2. 加上 .gitignore"></a>2. 加上 <code>.gitignore</code></h3><p>為了避免「一些不必要的檔案」被推到 GitHub，我們要新增一個 <code>.gitignore</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Node modules</span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"># Logs</span><br><span class="line">logs/</span><br><span class="line">*.log</span><br><span class="line">npm-debug.log*</span><br><span class="line"></span><br><span class="line"># Environment variables</span><br><span class="line">.env</span><br><span class="line"></span><br><span class="line"># Build output</span><br><span class="line">dist/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># TypeScript cache</span><br><span class="line">*.tsbuildinfo</span><br><span class="line"></span><br><span class="line"># OS / Editor 系統檔案</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line"></span><br><span class="line"># VS Code 設定</span><br><span class="line">.vscode/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>小提醒</strong>：這一步很容易被忽略，但很重要，因為上傳 <code>node_modules</code> 到 GitHub 真的有可能會被嫌棄 😅</p>
<hr>
<h3 id="3-初始化-Node-js-專案"><a href="#3-初始化-Node-js-專案" class="headerlink" title="3. 初始化 Node.js 專案"></a>3. 初始化 Node.js 專案</h3><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這會快速生成一個 <code>package.json</code>，裡面記錄專案資訊和套件清單。</p>
<p>按下 <code>-y</code> 代表接受所有預設值，超省時！👌</p>
<hr>
<h2 id="二、安裝必要套件"><a href="#二、安裝必要套件" class="headerlink" title="二、安裝必要套件"></a>二、安裝必要套件</h2><p>我們的工具包包含：</p>
<ul>
<li><strong>Express</strong>：後端 API 框架</li>
<li><strong>TypeScript</strong>：型別安全</li>
<li><strong>@types</strong>：型別定義檔</li>
<li><strong>ts-node-dev</strong>：開發時自動編譯 + 重啟</li>
</ul>
<p>一次裝好：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm install -D typescript @types/express @types/node ts-node-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>裝完後，<code>package.json</code> 的 <code>dependencies</code> 和 <code>devDependencies</code> 就會多出這些小夥伴。</p>
<hr>
<h2 id="三、設定-TypeScript"><a href="#三、設定-TypeScript" class="headerlink" title="三、設定 TypeScript"></a>三、設定 TypeScript</h2><h3 id="1-建立-tsconfig-json"><a href="#1-建立-tsconfig-json" class="headerlink" title="1. 建立 tsconfig.json"></a>1. 建立 <code>tsconfig.json</code></h3><p>輸入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx tsc --init</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這會生成 <code>tsconfig.json</code>。接著編輯成以下版本（直接覆蓋即可）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span> <span class="comment">// 用 ES2020 的 JavaScript 版本</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 用 CommonJS 模組</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 編譯輸出目錄</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span> <span class="comment">// 程式碼根目錄</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 啟用嚴格型別檢查</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 支援模組互操作</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 啟用裝飾器語法</span></span><br><span class="line">    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 為 TypeORM 生成元數據</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 編譯 src 資料夾內的檔案</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span> <span class="comment">// 排除 node_modules</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這邊要記住幾個關鍵設定：</p>
<ul>
<li><code>rootDir</code> → 原始碼放哪裡</li>
<li><code>outDir</code> → 編譯輸出到哪裡</li>
<li><code>strict</code> → 打開型別檢查，保護你的程式碼</li>
<li><code>experimentalDecorators</code> + <code>emitDecoratorMetadata</code> → 為之後用 TypeORM 預先鋪路</li>
</ul>
<p>然後新增一個 <code>src</code> 資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、寫第一支程式-🚀"><a href="#四、寫第一支程式-🚀" class="headerlink" title="四、寫第一支程式 🚀"></a>四、寫第一支程式 🚀</h2><p>在 <code>src</code> 裡新增 <code>app.ts</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> src/app.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>寫入以下內容：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, iThome2025!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 Server running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>到這裡，你已經完成一個最小可運行的 Express + TS 程式！🎉</p>
<hr>
<h2 id="五、啟動與測試"><a href="#五、啟動與測試" class="headerlink" title="五、啟動與測試"></a>五、啟動與測試</h2><h3 id="1-修改-package-json"><a href="#1-修改-package-json" class="headerlink" title="1. 修改 package.json"></a>1. 修改 <code>package.json</code></h3><p>在 <code>scripts</code> 中加上：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node-dev src/app.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-啟動伺服器"><a href="#2-啟動伺服器" class="headerlink" title="2. 啟動伺服器"></a>2. 啟動伺服器</h3><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果一切順利，你會看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🚀 Server running on http://localhost:3000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-開瀏覽器測試"><a href="#3-開瀏覽器測試" class="headerlink" title="3. 開瀏覽器測試"></a>3. 開瀏覽器測試</h3><p>輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看到 **Hello, iThome2025 !**，就代表環境完成 ✅</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們完成了專案初始化的整個流程：</p>
<ul>
<li>Git 分支管理</li>
<li>設定 <code>.gitignore</code></li>
<li>初始化 <code>package.json</code></li>
<li>安裝必要套件</li>
<li>設定 TypeScript</li>
<li>建立第一個 Express 程式</li>
</ul>
<p>從現在開始，你已經有一個能跑起來的 <strong>TypeScript + Node.js 開發環境</strong> 🎯</p>
<p>明天，我們會進一步讓專案結構更有組織感，並準備好迎接更複雜的 API 開發。</p>
<hr>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/tree/feature/init-ts-express">Github 範例程式碼</a></p>
<blockquote>
<p>commit message: Day 6 - set up Express + TS environment</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 8 - 打造你的第一個 TodoList API：一步步實現 CRUD 功能</title>
    <url>/2025/09/22/Day8%20-%20TS-Node-TodoList%20API/</url>
    <content><![CDATA[<p>在學習 <strong>Express + TypeScript + TypeORM</strong> 的過程中，<code>TodoList API</code> 是非常適合新手上手的練習案例。</p>
<p>因為它的邏輯簡單（新增、讀取、更新、刪除），卻又涵蓋了 RESTful API 的核心概念：</p>
<ul>
<li><strong>CRUD</strong>（Create &#x2F; Read &#x2F; Update &#x2F; Delete）</li>
<li><strong>Controller &#x2F; Route 分層</strong></li>
<li><strong>與資料庫的互動（Repository）</strong></li>
</ul>
<p>這樣的練習不僅可以打好基礎，還能快速理解 <strong>後端架構設計</strong> 的常見模式。</p>
<span id="more"></span>

<hr>
<h2 id="建立-Controller"><a href="#建立-Controller" class="headerlink" title="建立 Controller"></a>建立 Controller</h2><p>Controller（控制器）是 <strong>專門負責處理業務邏輯</strong> 的地方：</p>
<ul>
<li>收到請求 (<code>req</code>) → 驗證&#x2F;處理 → 回傳回應 (<code>res</code>)</li>
<li>不直接決定路由，而是提供「功能」讓 Route 使用</li>
<li>好處是：<strong>程式碼結構清楚、可讀性佳、方便測試與維護</strong></li>
</ul>
<p>建立 <code>src/controllers/todoController.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/Todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoRepository = <span class="title class_">AppDataSource</span>.<span class="title function_">getRepository</span>(<span class="title class_">Todo</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getTodos</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> todos = <span class="keyword">await</span> todoRepository.<span class="title function_">find</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: todos &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!title) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Title is required&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newTodo = todoRepository.<span class="title function_">create</span>(&#123; title &#125;);</span><br><span class="line">    <span class="keyword">const</span> savedTodo = <span class="keyword">await</span> todoRepository.<span class="title function_">save</span>(newTodo);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: savedTodo &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, completed &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> todo = <span class="keyword">await</span> todoRepository.<span class="title function_">findOneBy</span>(&#123; id &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!todo) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Todo not found&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    todo.<span class="property">title</span> = title !== <span class="literal">undefined</span> ? title : todo.<span class="property">title</span>;</span><br><span class="line">    todo.<span class="property">completed</span> = completed !== <span class="literal">undefined</span> ? completed : todo.<span class="property">completed</span>;</span><br><span class="line">    <span class="keyword">const</span> updatedTodo = <span class="keyword">await</span> todoRepository.<span class="title function_">save</span>(todo);</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: updatedTodo &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> todoRepository.<span class="title function_">delete</span>(&#123; id &#125;);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">affected</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Todo not found&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: result &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="設定路由"><a href="#設定路由" class="headerlink" title="設定路由"></a>設定路由</h2><p>Route（路由）的工作就是 <strong>決定請求要交給哪個 Controller 處理</strong>。</p>
<p>它就像是 <strong>導航地圖</strong>：</p>
<ul>
<li><code>GET /todos</code> → 查詢所有代辦事項 → <code>getTodos</code></li>
<li><code>POST /todos</code> → 建立新代辦 → <code>createTodo</code></li>
<li><code>PUT /todos/:id</code> → 更新某筆代辦 → <code>updateTodo</code></li>
<li><code>DELETE /todos/:id</code> → 刪除某筆代辦 → <code>deleteTodo</code></li>
</ul>
<p>這樣一來，Controller 和 Route 的責任就分得很清楚：</p>
<ul>
<li><strong>Route &#x3D; 請求分配器</strong></li>
<li><strong>Controller &#x3D; 處理邏輯</strong></li>
</ul>
<p>建立 <code>src/routes/todoRoutes.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getTodos,</span><br><span class="line">  createTodo,</span><br><span class="line">  updateTodo,</span><br><span class="line">  deleteTodo,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../controllers/todoController&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, getTodos);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, createTodo);</span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&quot;/:id&quot;</span>, updateTodo);</span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&quot;/:id&quot;</span>, deleteTodo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="整合到主程式"><a href="#整合到主程式" class="headerlink" title="整合到主程式"></a>整合到主程式</h2><p>最後一步就是在 <code>app.ts</code> 裡，把 <code>todoRoutes</code> 整合進主程式。</p>
<p>這樣當使用者發送請求到 <code>/api/todos</code> 時，Express 就會把它交給我們剛剛寫好的 <code>todoRoutes</code>，再由對應的 Controller 去處理。</p>
<p>修改 <code>src/app.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/todoRoutes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/todos&quot;</span>, todoRoutes); <span class="comment">// 加上 Todo 路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, iThome 2025!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppDataSource</span>.<span class="title function_">initialize</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;📦 DB Connected!&quot;</span>);</span><br><span class="line">    app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 Server running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;❌ DB connection failed:&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>👉 到這裡，我們就完成了一個最基礎的 TodoList API。</p>
<p>但是目前還沒有資料庫可以測試 (還不能用 Postman 打 API 😂)，下一篇我們就來介紹 Render 服務上的資料庫應用，把整段串接起來。</p>
<hr>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/d766050e40229dd97cd90a5c94c667d14cc90c2f">Github 範例程式碼</a></p>
<blockquote>
<p>commit : Day 8 initialize todo‑list API</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 7 - 如何建立一個 TypeScript + Node.js 環境 (2)：專案架構與資料庫設定</title>
    <url>/2025/09/21/Day7%20-%20Node.js%20+%20TS%20(2)/</url>
    <content><![CDATA[<p>嗨～昨天我們已經有一個能跑起來的 <strong>TypeScript + Node.js 開發環境</strong>。接著，在正式開發 API 之前，先來點暖身 —— 建立一個清晰、可維護的專案架構，並完成環境變數與資料庫連線設定。這些基礎工具就是未來專案能否穩定推進的關鍵。</p>
<span id="more"></span>

<hr>
<h2 id="專案架構整理"><a href="#專案架構整理" class="headerlink" title="專案架構整理"></a>專案架構整理</h2><h3 id="建立資料夾結構"><a href="#建立資料夾結構" class="headerlink" title="建立資料夾結構"></a>建立資料夾結構</h3><p>為了讓專案更有條理、方便後續維護，我們在 <code>src</code> 底下建立以下資料夾：</p>
<ul>
<li><code>config</code>：存放設定檔（例如資料庫連線設定）。</li>
<li><code>controllers</code>：處理 API 業務邏輯。</li>
<li><code>entities</code>：定義資料庫模型 (Entity)。</li>
<li><code>middleware</code>：存放中間件。</li>
<li><code>routes</code>：定義 API 路由。</li>
<li><code>utils</code>：常用工具函數。</li>
</ul>
<p>建立指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">mkdir</span> config controllers entities middleware routes utils</span><br></pre></td></tr></table></figure>

<p>最終結構如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">  ├── config/</span><br><span class="line">  ├── controllers/</span><br><span class="line">  ├── entities/</span><br><span class="line">  ├── middleware/</span><br><span class="line">  ├── routes/</span><br><span class="line">  ├── utils/</span><br><span class="line">  └── app.ts</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="環境變數設定"><a href="#環境變數設定" class="headerlink" title="環境變數設定"></a>環境變數設定</h2><p>為什麼要用環境變數？</p>
<p>因為專案常常需要存放敏感資訊（像是資料庫密碼、API 金鑰），這些東西絕不能直接寫死在程式碼裡。</p>
<h3 id="安裝與設定-dotenv"><a href="#安裝與設定-dotenv" class="headerlink" title="安裝與設定 dotenv"></a>安裝與設定 dotenv</h3><ol>
<li><p>安裝套件與型別：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br><span class="line">npm install @types/dotenv --save-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>在專案根目錄建立 <code>.env</code> 檔案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .<span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<p>在檔案內輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_HOST=localhost</span><br><span class="line">DB_NAME=db_name</span><br><span class="line">DB_USERNAME=你的資料庫使用者</span><br><span class="line">DB_PASSWORD=你的密碼</span><br><span class="line">DB_PORT=5432</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 <code>.gitignore</code>有下方配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.env</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>⚠️ .env 內含敏感資訊，務必避免上傳到 GitHub！</p>
</blockquote>
<hr>
<h2 id="資料庫連線設定"><a href="#資料庫連線設定" class="headerlink" title="資料庫連線設定"></a>資料庫連線設定</h2><p>這裡我們會使用 <strong>PostgreSQL</strong> 搭配 <strong>TypeORM</strong> 作為 ORM 工具。</p>
<h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install typeorm pg</span><br></pre></td></tr></table></figure>

<h3 id="設定-TypeORM-連線"><a href="#設定-TypeORM-連線" class="headerlink" title="設定 TypeORM 連線"></a>設定 TypeORM 連線</h3><p>在 <code>src/config</code> 建立 <code>db.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/Todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppDataSource</span> = <span class="keyword">new</span> <span class="title class_">DataSource</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span>),</span><br><span class="line">  <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">DB_USERNAME</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="title class_">Todo</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>, <span class="comment">// 開發階段建議 true，正式環境請改成 false</span></span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ synchronize: true 會自動產生 ORM 所對應的資料表，僅限開發階段使用；正式環境建議使用 migration！</p>
</blockquote>
<hr>
<h2 id="定義資料模型"><a href="#定義資料模型" class="headerlink" title="定義資料模型"></a>定義資料模型</h2><p>在 TypeORM 裡，<strong>Entity 就是資料庫模型</strong>，負責定義表格結構。</p>
<h3 id="建立-Todo-Entity"><a href="#建立-Todo-Entity" class="headerlink" title="建立 Todo Entity"></a>建立 Todo Entity</h3><ol>
<li><p>新增檔案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> src/entities/Todo.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>編輯內容：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(<span class="string">&quot;uuid&quot;</span>)</span><br><span class="line">  id!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  title!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">default</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  completed!: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 <code>tsconfig.json</code>，確保支援裝飾器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>💡 小技巧：</p>
<ul>
<li><code>!</code> 表示該屬性必填。</li>
</ul>
</blockquote>
<hr>
<p>👉 明天（Day 8）我們即將開始開發 API ，讓 <strong>TypeScript + Node.js 專案更豐富 🚀 !</strong></p>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/ea9757e05ffe4d0a7dd48d65c1e4cc37f25361d8">Github 範例程式碼</a></p>
<blockquote>
<p>git commit : setup backend structure and typeORM setting</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 9｜Render 雲端啟動：資料庫連線全攻略</title>
    <url>/2025/09/23/Day9%20-%20Render-pgsql-db/</url>
    <content><![CDATA[<h2 id="前言-什麼是資料庫？"><a href="#前言-什麼是資料庫？" class="headerlink" title="前言 - 什麼是資料庫？"></a>前言 - 什麼是資料庫？</h2><p>簡單來說，<strong>資料庫（Database）</strong> 是一種用來 <strong>儲存、管理與存取資料</strong> 的系統。</p>
<p>它能幫助我們把資料有條理地組織起來，並透過查詢語言（例如 SQL）快速檢索與更新。</p>
<p>常見的資料庫類型有：</p>
<ul>
<li><strong>關聯式資料庫（RDBMS）</strong>：以表格（Tables）方式存放資料，支援 SQL，例如 MySQL、PostgreSQL、SQLite。</li>
<li><strong>非關聯式資料庫（NoSQL）</strong>：不一定使用表格，常見於 JSON 文件、Key-Value、Graph 等結構，例如 MongoDB、Redis。</li>
</ul>
<span id="more"></span>

<h3 id="常見資料庫比較"><a href="#常見資料庫比較" class="headerlink" title="常見資料庫比較"></a>常見資料庫比較</h3><table>
<thead>
<tr>
<th>特點</th>
<th>MySQL</th>
<th>PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td>歷史</td>
<td>1995 年誕生，社群廣泛</td>
<td>1996 年誕生，功能強大</td>
</tr>
<tr>
<td>使用場景</td>
<td>網站後端（WordPress、電商系統）</td>
<td>複雜商業系統、數據分析平台</td>
</tr>
<tr>
<td>SQL 標準相容</td>
<td>普及但部分不相容</td>
<td>高度相容 ANSI-SQL</td>
</tr>
<tr>
<td>擴充能力</td>
<td>功能完整，但擴展性略少</td>
<td>支援更多型別（JSON、陣列）、自定義函數</td>
</tr>
<tr>
<td>性能</td>
<td>讀取速度快，適合高頻查詢</td>
<td>交易一致性（ACID）更嚴謹</td>
</tr>
<tr>
<td>儲存 JSON</td>
<td>有支援，但功能較基本</td>
<td>支援 JSONB，操作更強大</td>
</tr>
<tr>
<td>授權</td>
<td>開源 GPL</td>
<td>開源 PostgreSQL License</td>
</tr>
</tbody></table>
<p>👉 <strong>簡單來說</strong>：</p>
<ul>
<li><strong>MySQL</strong>：適合中小型專案或網站開發。</li>
<li><strong>PostgreSQL</strong>：功能更全面，適合大型專案、金融系統、數據分析。</li>
</ul>
<p>以上為兩種資料庫的主要定位，但實際選擇時還是要根據具體團隊需求和情境來決定。</p>
<hr>
<h2 id="Render-資料庫服務簡介"><a href="#Render-資料庫服務簡介" class="headerlink" title="Render 資料庫服務簡介"></a>Render 資料庫服務簡介</h2><p>Render 除了能部署前後端應用程式，也提供 <strong>PostgreSQL 資料庫服務</strong>，其優點包括：</p>
<ul>
<li>免費方案可用（適合開發 &#x2F; 測試）。</li>
<li>內建 <strong>自動備份</strong> 功能。</li>
<li>提供 <strong>Connection Info</strong>，可直接複製連線字串使用。</li>
<li>支援外部連線（可用 DBeaver、pgAdmin、psql 連線）。</li>
<li>內建 SSL 安全機制，保障連線安全。</li>
</ul>
<hr>
<h2 id="✅-建立-PostgreSQL-資料庫"><a href="#✅-建立-PostgreSQL-資料庫" class="headerlink" title="✅ 建立 PostgreSQL 資料庫"></a>✅ 建立 PostgreSQL 資料庫</h2><ol>
<li>點擊右上角的 <strong>「New」</strong> 按鈕。</li>
<li>選擇「<strong>Postgres</strong>」。</li>
</ol>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/1-create-pg-database.png?raw=true" alt="Screenshot 2025-04-24 at 9.21.05 PM"></p>
<ol>
<li>設定資料庫細節（如下）：<ul>
<li><strong>Name</strong>：資料庫 Instance 名稱。</li>
<li><strong>Region</strong>：選擇靠近你的地區（例如 Singapore 新加坡）。</li>
<li><strong>Database Name &#x2F; User &#x2F; Password</strong>：Render 會自動產生，也可以自訂。</li>
<li><strong>Plan Option</strong>：先選擇 Free 方案即可，方便測試使用。<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/2-new-pg-db-info.png?raw=true" alt="dashboard.render.com_new_database"></li>
</ul>
</li>
<li>點擊「<strong>Create Database</strong>」。</li>
<li>等待 DB Instance 生成後，即可在 Dashboard 中看到。</li>
</ol>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/3-db-instance.png?raw=true"></p>
<ol start="4">
<li>點擊對應的 Service Name 以查看資料庫詳細資訊。</li>
</ol>
<hr>
<h2 id="✅-資料庫存取方式"><a href="#✅-資料庫存取方式" class="headerlink" title="✅ 資料庫存取方式"></a>✅ 資料庫存取方式</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/4-external-url.png?raw=true"></p>
<p>Render 會自動產生一組 <strong>外部連線網址（External Connection URL）</strong>，可供應用程式或團隊使用：</p>
<ul>
<li>進入 Postgres 資料庫頁面。</li>
<li>在「<strong>Connection Info</strong>」找到 <code>External Database URL</code>。</li>
<li>複製這組 URL，並用於 <code>psql</code>、DBeaver、應用程式或 ORM。</li>
</ul>
<p>ℹ️ 注意：這組 URL 含有帳號密碼，<strong>務必保護好，不要放在 GitHub 等公開地方</strong>。</p>
<hr>
<h3 id="External-Database-URL"><a href="#External-Database-URL" class="headerlink" title="External Database URL"></a>External Database URL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">postgresql://node_ts_demo_db_user:&lt;password&gt;@dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com/node_ts_demo_db</span><br></pre></td></tr></table></figure>

<p>格式通常為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">postgres://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;</span><br></pre></td></tr></table></figure>

<p>拆解（設定 DBeaver 可用）：</p>
<ul>
<li><strong>使用者</strong>：node_ts_demo_db_user</li>
<li><strong>密碼</strong>：password</li>
<li><strong>主機</strong>：<a href="http://dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com/">dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com</a></li>
<li><strong>資料庫名稱</strong>：node_ts_demo_db</li>
</ul>
<hr>
<h2 id="用-DBeaver-測試連線"><a href="#用-DBeaver-測試連線" class="headerlink" title="用 DBeaver 測試連線"></a>用 DBeaver 測試連線</h2><p><a href="https://dbeaver.io/">DBeaver</a> 是一款跨平台的開源資料庫管理工具，支援 MySQL、PostgreSQL、SQLite、MongoDB 等多種資料庫。</p>
<h3 id="安裝與連線步驟"><a href="#安裝與連線步驟" class="headerlink" title="安裝與連線步驟"></a>安裝與連線步驟</h3><ol>
<li><p>下載並安裝 DBeaver。</p>
</li>
<li><p>點選「<strong>New Database Connection</strong>」。</p>
</li>
<li><p>選擇「<strong>PostgreSQL</strong>」。</p>
</li>
<li><p>輸入 Render 提供的資訊：</p>
<ul>
<li><strong>Host</strong>：<code>dpg-xxxxx.singapore-postgres.render.com</code></li>
<li><strong>Database</strong>：<code>ts_template_db</code></li>
<li><strong>Username</strong>：<code>ts_template_db_user</code></li>
<li><strong>Password</strong>：<code>password</code></li>
<li><strong>Port</strong>：<code>5432</code><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/5-dbeaver-test-conn.png?raw=true"></li>
</ul>
</li>
<li><p>點擊 <strong>Test Connection</strong>，成功會顯示「Connected」。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/6-db-connected.png?raw=true"></p>
</li>
</ol>
<hr>
<h2 id="Node-js-專案連線-Render-資料庫與-API-測試"><a href="#Node-js-專案連線-Render-資料庫與-API-測試" class="headerlink" title="Node.js 專案連線 Render 資料庫與 API 測試"></a>Node.js 專案連線 Render 資料庫與 API 測試</h2><h3 id="修改-env-檔案，加入資料庫連線資訊"><a href="#修改-env-檔案，加入資料庫連線資訊" class="headerlink" title="修改 .env 檔案，加入資料庫連線資訊"></a>修改 <code>.env</code> 檔案，加入資料庫連線資訊</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DB_HOST=dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com</span><br><span class="line">DB_NAME=node_ts_demo_db</span><br><span class="line">DB_USERNAME=node_ts_demo_db_user</span><br><span class="line">DB_PASSWORD=password</span><br><span class="line">DB_PORT=5432</span><br></pre></td></tr></table></figure>

<h3 id="啟動伺服器並測試連線"><a href="#啟動伺服器並測試連線" class="headerlink" title="啟動伺服器並測試連線"></a>啟動伺服器並測試連線</h3><p>使用先前 Day 6 設定好的 script：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/7-ssl-problem.png?raw=true"></p>
<p>會發現連線失敗，因為 SSL 相關問題。</p>
<hr>
<h3 id="解決-SSL-問題"><a href="#解決-SSL-問題" class="headerlink" title="解決 SSL 問題"></a>解決 SSL 問題</h3><ul>
<li><strong>開發環境</strong>：可暫時關閉驗證以便快速測試。</li>
<li><strong>正式環境（Production）</strong>：建議保持預設驗證（<code>true</code>），以確保安全性。</li>
</ul>
<p>若遇到 SSL 連線錯誤，在 <code>db.ts</code> 的 <code>AppDataSource</code> 配置中加入：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">ssl</span>: &#123; <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span> &#125;,</span><br></pre></td></tr></table></figure>

<p>更新後的 <code>src/config/db.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppDataSource</span> = <span class="keyword">new</span> <span class="title class_">DataSource</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span>),</span><br><span class="line">  <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">DB_USERNAME</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="title class_">Todo</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">ssl</span>: &#123; <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>✅ 成功連線的終端機畫面：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/8-nodejs-conn-success.png?raw=true"></p>
<p>(可觀察到 typeORM 已經跟資料庫互動並藉由 Todo Entity 創立 Todo 表格)</p>
<p>DBeaver 畫面：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/9-todo-table.png?raw=true"></p>
<hr>
<h2 id="API-測試範例"><a href="#API-測試範例" class="headerlink" title="API 測試範例"></a>API 測試範例</h2><p>使用 Postman 測試幾個簡單的 API：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>路徑</th>
<th>Body 範例</th>
<th>回應範例</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td><code>/api/todos</code></td>
<td>-</td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: [ ... ] &#125;</code></td>
</tr>
<tr>
<td>POST</td>
<td><code>/api/todos</code></td>
<td><code>&#123; &quot;title&quot;: &quot;學 TypeScript&quot; &#125;</code></td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;id&quot;: &quot;xxx&quot;, &quot;title&quot;: &quot;學 TypeScript&quot;, &quot;completed&quot;: false &#125; &#125;</code></td>
</tr>
<tr>
<td>PUT</td>
<td><code>/api/todos/&lt;uuid&gt;</code></td>
<td><code>&#123; &quot;completed&quot;: true &#125;</code></td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;id&quot;: &quot;1&quot;, &quot;title&quot;: &quot;學 TypeScript&quot;, &quot;completed&quot;: true &#125; &#125;</code></td>
</tr>
<tr>
<td>DELETE</td>
<td><code>/api/todos/&lt;uuid&gt;</code></td>
<td>-</td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;affected&quot;: 1 &#125; &#125;</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="Postman-測試結果"><a href="#Postman-測試結果" class="headerlink" title="Postman 測試結果"></a>Postman 測試結果</h2><p>成功新增 API 資料：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/10-postman-create-todo.png?raw=true"></p>
<hr>
<h2 id="🎯-今日收穫"><a href="#🎯-今日收穫" class="headerlink" title="🎯 今日收穫"></a>🎯 今日收穫</h2><p>今天我們不只學會了如何在 Render 上建立 PostgreSQL 資料庫，還實際完成了幾件關鍵任務：</p>
<ul>
<li>了解了 <strong>資料庫的基本概念</strong>，並比較了 MySQL 與 PostgreSQL 的差異。</li>
<li>在 Render 建立了 <strong>Postgres 資料庫服務</strong>，並熟悉了連線方式。</li>
<li>使用 <strong>DBeaver</strong> 成功測試連線，確認資料庫可以正常使用。</li>
<li>在 <strong>Node.js + TypeORM 專案</strong>中完成連線，並處理 SSL 問題。</li>
<li>用 <strong>Postman</strong> 驗證了 API 與資料庫的互動，確認 CRUD 功能正常。</li>
</ul>
<p>👉 到這一步，我們的專案已經有了「<strong>完整的後端 + 真實的雲端資料庫</strong>」，下一步就能進一步嘗試部署專案了！ 🚀</p>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/280a18f58c08410d2aebf95f6781766a45b18946">Github 範例程式碼</a></p>
<blockquote>
<p>git commit : setup render database connection info</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Render</tag>
        <tag>pgSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 完整介紹：從入門到實戰</title>
    <url>/2025/01/27/TypeScript%20%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="什麼是-TypeScript？"><a href="#什麼是-TypeScript？" class="headerlink" title="什麼是 TypeScript？"></a>什麼是 TypeScript？</h2><p>TypeScript 是由 Microsoft 開發的一種開源程式語言，它是 JavaScript 的一個<strong>型別化超集</strong>（typed superset），最終會編譯成純 JavaScript 代碼。簡單來說，任何有效的 JavaScript 代碼都是有效的 TypeScript 代碼。</p>
<span id="more"></span>

<h3 id="🎯-為什麼選擇-TypeScript？"><a href="#🎯-為什麼選擇-TypeScript？" class="headerlink" title="🎯 為什麼選擇 TypeScript？"></a>🎯 為什麼選擇 TypeScript？</h3><ol>
<li><strong>靜態型別檢查</strong> - 在編譯時期就能發現錯誤</li>
<li><strong>更好的 IDE 支援</strong> - 智能提示、自動完成、重構工具</li>
<li><strong>增強的可讀性</strong> - 代碼更容易理解和維護</li>
<li><strong>漸進式採用</strong> - 可以逐步將現有 JavaScript 專案遷移到 TypeScript</li>
</ol>
<h2 id="🚀-快速開始"><a href="#🚀-快速開始" class="headerlink" title="🚀 快速開始"></a>🚀 快速開始</h2><h3 id="安裝-TypeScript"><a href="#安裝-TypeScript" class="headerlink" title="安裝 TypeScript"></a>安裝 TypeScript</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全域安裝</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 專案內安裝</span></span><br><span class="line">npm install --save-dev typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驗證安裝</span></span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure>

<h3 id="第一個-TypeScript-檔案"><a href="#第一個-TypeScript-檔案" class="headerlink" title="第一個 TypeScript 檔案"></a>第一個 TypeScript 檔案</h3><p>建立 <code>hello.ts</code> 檔案：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userName</span>: <span class="built_in">string</span> = <span class="string">&quot;Arvin&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(userName));</span><br></pre></td></tr></table></figure>

<p>編譯並執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 編譯</span></span><br><span class="line">tsc hello.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行生成的 JavaScript</span></span><br><span class="line">node hello.js</span><br></pre></td></tr></table></figure>

<h2 id="📚-核心概念"><a href="#📚-核心概念" class="headerlink" title="📚 核心概念"></a>📚 核心概念</h2><h3 id="1-基本型別"><a href="#1-基本型別" class="headerlink" title="1. 基本型別"></a>1. 基本型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本型別</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Any 型別（盡量避免使用）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Void 型別</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warnUser</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Null 和 Undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-介面-Interface"><a href="#2-介面-Interface" class="headerlink" title="2. 介面 (Interface)"></a>2. 介面 (Interface)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可選屬性</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="comment">// 唯讀屬性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">person: Person</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;person.firstName&#125;</span> <span class="subst">$&#123;person.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-類別-Classes"><a href="#3-類別-Classes" class="headerlink" title="3. 類別 (Classes)"></a>3. 類別 (Classes)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">species</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, species: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes a sound`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">getInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;<span class="variable language_">this</span>.species&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, breed: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, <span class="string">&quot;Canine&quot;</span>, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">bark</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">makeSound</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getBreedInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.getInfo()&#125;</span> of breed <span class="subst">$&#123;<span class="variable language_">this</span>.breed&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-泛型-Generics"><a href="#4-泛型-Generics" class="headerlink" title="4. 泛型 (Generics)"></a>4. 泛型 (Generics)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型函數</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output1 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> output2 = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型介面</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">zero: T, addFn: (x: T, y: T) =&gt; T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zeroValue</span> = zero;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">add</span> = addFn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-聯合型別與交集型別"><a href="#5-聯合型別與交集型別" class="headerlink" title="5. 聯合型別與交集型別"></a>5. 聯合型別與交集型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聯合型別</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringOrNumber</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: StringOrNumber</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集型別</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ErrorHandling</span> &#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  error?: &#123; <span class="attr">message</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ArtworksData</span> &#123;</span><br><span class="line">  <span class="attr">artworks</span>: &#123; <span class="attr">title</span>: <span class="built_in">string</span> &#125;[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ArtworksResponse</span> = <span class="title class_">ArtworksData</span> &amp; <span class="title class_">ErrorHandling</span>;</span><br></pre></td></tr></table></figure>

<h2 id="⚙️-進階特性"><a href="#⚙️-進階特性" class="headerlink" title="⚙️ 進階特性"></a>⚙️ 進階特性</h2><h3 id="1-型別別名-Type-Aliases"><a href="#1-型別別名-Type-Aliases" class="headerlink" title="1. 型別別名 (Type Aliases)"></a>1. 型別別名 (Type Aliases)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EventHandler</span> = <span class="function">(<span class="params">event: Event</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="string">&quot;loading&quot;</span> | <span class="string">&quot;success&quot;</span> | <span class="string">&quot;error&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-條件型別"><a href="#2-條件型別" class="headerlink" title="2. 條件型別"></a>2. 條件型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: infer U &#125; ? U : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DogMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Dog</span>&gt;; <span class="comment">// never</span></span><br></pre></td></tr></table></figure>

<h3 id="3-映射型別"><a href="#3-映射型別" class="headerlink" title="3. 映射型別"></a>3. 映射型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyTodo</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialTodo</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="🛠️-實戰應用"><a href="#🛠️-實戰應用" class="headerlink" title="🛠️ 實戰應用"></a>🛠️ 實戰應用</h2><h3 id="TypeScript-設定檔-tsconfig-json"><a href="#TypeScript-設定檔-tsconfig-json" class="headerlink" title="TypeScript 設定檔 (tsconfig.json)"></a>TypeScript 設定檔 (tsconfig.json)</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-TypeScript-範例"><a href="#React-TypeScript-範例" class="headerlink" title="React + TypeScript 範例"></a>React + TypeScript 範例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserListProps</span> &#123;</span><br><span class="line">  initialUsers?: <span class="title class_">User</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserList</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserListProps</span>&gt; = <span class="function">(<span class="params">&#123; initialUsers = [] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState&lt;<span class="title class_">User</span>[]&gt;(initialUsers);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchUsers = <span class="keyword">async</span> (): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">userData</span>: <span class="title class_">User</span>[] = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="title function_">setUsers</span>(userData);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Failed to fetch users:&quot;</span>, error);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialUsers.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">fetchUsers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [initialUsers.<span class="property">length</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;users.map((user: User) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name&#125; - &#123;user.email&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserList</span>;</span><br></pre></td></tr></table></figure>

<h2 id="📝-最佳實踐"><a href="#📝-最佳實踐" class="headerlink" title="📝 最佳實踐"></a>📝 最佳實踐</h2><h3 id="1-型別定義"><a href="#1-型別定義" class="headerlink" title="1. 型別定義"></a>1. 型別定義</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 好的做法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 避免使用 any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">data: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 使用具體型別</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processUserData</span>(<span class="params">data: User[]</span>): <span class="title class_">ProcessedUser</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">displayName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">isActive</span>: user.<span class="property">status</span> === <span class="string">&quot;active&quot;</span>,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-錯誤處理"><a href="#2-錯誤處理" class="headerlink" title="2. 錯誤處理"></a>2. 錯誤處理</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T, E = <span class="title class_">Error</span>&gt; =</span><br><span class="line">  | &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>;</span><br><span class="line">      <span class="attr">data</span>: T;</span><br><span class="line">    &#125;</span><br><span class="line">  | &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>;</span><br><span class="line">      <span class="attr">error</span>: E;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">id: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&lt;<span class="title class_">User</span>&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP <span class="subst">$&#123;response.status&#125;</span>: <span class="subst">$&#123;response.statusText&#125;</span>`</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">data</span>: user &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">error</span>: error <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? error : <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unknown error&quot;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🔍-常見問題與解決方案"><a href="#🔍-常見問題與解決方案" class="headerlink" title="🔍 常見問題與解決方案"></a>🔍 常見問題與解決方案</h2><h3 id="1-型別斷言"><a href="#1-型別斷言" class="headerlink" title="1. 型別斷言"></a>1. 型別斷言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 型別斷言（謹慎使用）</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更安全的做法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value: <span class="built_in">unknown</span></span>): value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isString</span>(someValue)) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = someValue.<span class="property">length</span>; <span class="comment">// TypeScript 知道這裡是 string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-可選鏈與空值合併"><a href="#2-可選鏈與空值合併" class="headerlink" title="2. 可選鏈與空值合併"></a>2. 可選鏈與空值合併</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NestedObject</span> &#123;</span><br><span class="line">  level1?: &#123;</span><br><span class="line">    level2?: &#123;</span><br><span class="line">      value?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">NestedObject</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可選鏈</span></span><br><span class="line"><span class="keyword">const</span> value = obj.<span class="property">level1</span>?.<span class="property">level2</span>?.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空值合併</span></span><br><span class="line"><span class="keyword">const</span> displayValue = value ?? <span class="string">&quot;Default Value&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="🎓-學習資源與工具"><a href="#🎓-學習資源與工具" class="headerlink" title="🎓 學習資源與工具"></a>🎓 學習資源與工具</h2><h3 id="推薦工具"><a href="#推薦工具" class="headerlink" title="推薦工具"></a>推薦工具</h3><ul>
<li><strong>VS Code</strong> - 最佳的 TypeScript 開發體驗</li>
<li><strong>TypeScript Playground</strong> - 在線練習和測試</li>
<li><strong>TSLint&#x2F;ESLint</strong> - 代碼檢查工具</li>
<li><strong>Prettier</strong> - 代碼格式化工具</li>
</ul>
<h3 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h3><ul>
<li><a href="https://www.typescriptlang.org/docs/">TypeScript 官方文檔</a></li>
<li><a href="https://basarat.gitbook.io/typescript/">TypeScript Deep Dive</a></li>
<li><a href="https://github.com/typescript-cheatsheets/react">React TypeScript 速查表</a></li>
</ul>
<h2 id="📈-總結"><a href="#📈-總結" class="headerlink" title="📈 總結"></a>📈 總結</h2><p>TypeScript 為 JavaScript 開發帶來了強大的型別系統，幫助開發者：</p>
<ol>
<li><strong>提前發現錯誤</strong> - 編譯時期的型別檢查</li>
<li><strong>提升開發效率</strong> - 更好的 IDE 支援和智能提示</li>
<li><strong>改善代碼品質</strong> - 更清晰的 API 設計和文檔</li>
<li><strong>降低維護成本</strong> - 重構更安全，代碼更容易理解</li>
</ol>
<p>對於現代 JavaScript 開發，特別是大型專案，TypeScript 已經成為不可或缺的工具。它不僅提升了開發體驗，也讓代碼更加健壯和可維護。</p>
<h2 id="🚀-下一步"><a href="#🚀-下一步" class="headerlink" title="🚀 下一步"></a>🚀 下一步</h2><p>如果您剛開始學習 TypeScript，建議：</p>
<ol>
<li>從簡單的型別標註開始</li>
<li>逐步學習介面和類別</li>
<li>在小專案中實踐</li>
<li>探索進階特性如泛型和條件型別</li>
<li>整合到您喜愛的框架中（React, Vue, Angular）</li>
</ol>
<p>開始您的 TypeScript 之旅吧！這將是一個值得投資的技術選擇。</p>
<hr>
<blockquote>
<p>💡 <strong>小提示</strong>: 記住，TypeScript 的目標不是替代 JavaScript，而是讓 JavaScript 開發更加安全和高效。漸進式採用是最佳策略！</p>
</blockquote>
]]></content>
      <categories>
        <category>技術教學</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
        <tag>前端開發</tag>
        <tag>程式語言</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/08/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>常用 Hexo 指令帶你無往不利</title>
    <url>/2024/06/07/%E5%B8%B8%E7%94%A8%20Hexo%20%E6%8C%87%E4%BB%A4%E5%B8%B6%E4%BD%A0%E7%84%A1%E5%BE%80%E4%B8%8D%E5%88%A9/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简单且功能强大的静态博客框架。以下是一些常用的 Hexo 指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new 文章名稱</span><br><span class="line">hexo generate 產生 public 資料夾內容</span><br><span class="line">hexo server</span><br><span class="line">hexo clean 清理緩存</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol>
<li><p><strong>安装 Hexo</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化 Hexo 项目</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成静态文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动本地服务器</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>新建文章</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发布文章</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>清理缓存和生成的静态文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>列出所有 Hexo 命令</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo list</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看 Hexo 帮助信息</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装插件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以下是一些额外的有用命令和操作：</p>
<ul>
<li><p><strong>新建页面</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page &lt;page-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>草稿转发布</strong><br>如果你使用 <code>hexo new draft &lt;title&gt;</code> 创建了草稿，可以通过以下命令将草稿发布为正式文章：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成并部署</strong><br>这会在生成静态文件后立即部署它们：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate --deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看当前配置</strong><br>你可以直接编辑 <code>_config.yml</code> 文件来配置 Hexo，但也可以用以下命令查看当前配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo config</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这些命令涵盖了 Hexo 的大部分基本功能，可以帮助你快速上手并管理你的博客。</p>
]]></content>
      <tags>
        <tag>Hexo 指令</tag>
      </tags>
  </entry>
  <entry>
    <title>關於嚴格模式</title>
    <url>/2024/06/12/%E9%97%9C%E6%96%BC%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在 JavaScript 和 PHP 中，嚴格模式（strict mode）都是後期引入的。</p>
<span id="more"></span>

<h2 id="JavaScript-的嚴格模式"><a href="#JavaScript-的嚴格模式" class="headerlink" title="JavaScript 的嚴格模式"></a>JavaScript 的嚴格模式</h2><p>JavaScript 的嚴格模式首次出現在 ECMAScript 5（ES5）標準中，於 2009 年發布。嚴格模式通過 <code>&quot;use strict&quot;;</code> 指令來啟用，它將代碼執行模式從寬鬆模式切換到嚴格模式，並引入了一些新的限制和改變，以幫助開發者避免常見的問題，提高代碼的品質和性能。</p>
<h2 id="PHP-的嚴格模式"><a href="#PHP-的嚴格模式" class="headerlink" title="PHP 的嚴格模式"></a>PHP 的嚴格模式</h2><p>PHP 的嚴格模式首次出現在 PHP 7.0 版本中，於 2015 年發布。它通過引入 <code>declare(strict_types=1);</code> 來啟用，用於強制函數和方法的傳入參數和返回值進行嚴格的類型檢查。在嚴格模式下，函數和方法的參數類型和返回類型必須與函數和方法的聲明一致，否則將引發致命錯誤。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>儘管嚴格模式在 JavaScript 和 PHP 中的實現方式有所不同，但它們的目標都是提高代碼的品質和可靠性，並幫助開發者避免常見的錯誤。JavaScript 的嚴格模式於 ECMAScript 5 中首次出現，而 PHP 的嚴格模式則在 PHP 7.0 中首次引入。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
