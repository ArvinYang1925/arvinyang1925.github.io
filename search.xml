<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Day 1 - Typescript + Node.js 系列藍圖</title>
    <url>/2025/09/15/Day1%20-%20Typescript%20+%20Node.js%20%E7%B3%BB%E5%88%97%E8%97%8D%E5%9C%96/</url>
    <content><![CDATA[<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day1/TypeScriptNode.png?raw=true"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哈囉！很高興您點開這篇文章。如果您是 Node.js 開發者，並且想讓自己的程式碼更穩健、易於維護，那麼您來對地方了。在這場為期 30 天的技術挑戰賽中，我將一步步探索 TypeScript，並將它整合到 Node.js 的開發流程中。</p>
<p>從基礎的語法、環境建置，到常見的商業應用場景（如金流串接、檔案上傳），甚至是最後的雲端部署，我們將循序漸進地完成一些功能性的專案。這不僅僅是一場寫作馬拉松，更是一趟讓您的開發技能全面升級的旅程。</p>
<span id="more"></span>

<h2 id="為什麼要用-TypeScript？"><a href="#為什麼要用-TypeScript？" class="headerlink" title="為什麼要用 TypeScript？"></a>為什麼要用 TypeScript？</h2><p>在進入主軸之前，您可能會想：「為什麼要花時間學 TypeScript？JavaScript 不是已經夠用了嗎？」</p>
<p>確實，JavaScript 靈活、入門門檻低，但當專案規模越來越大時，它的「彈性」也可能帶來維護上的挑戰。TypeScript 正是為了解決這個問題而生。它引入了靜態型別系統，讓您在寫程式的當下就能發現潛在的錯誤，大幅降低了除錯的成本。此外，透過明確的型別定義，程式碼的可讀性會大大提升，團隊協作也變得更加順暢。</p>
<p>簡而言之，TypeScript 就像是為您的程式碼加上了安全帶，讓您在高速開發的同時，也能確保品質。</p>
<h2 id="系列文章藍圖與規劃"><a href="#系列文章藍圖與規劃" class="headerlink" title="系列文章藍圖與規劃"></a>系列文章藍圖與規劃</h2><p>為了讓這趟旅程更有方向，我規劃了接下來 30 天的學習藍圖。它將引導我們從 TypeScript 的基礎知識，航向更複雜的後端應用場景，最終將我們的成果部署到雲端。</p>
<p>這份藍圖將分為以下幾個階段：</p>
<ol>
<li><strong>Typescript 核心語法與基礎複習</strong> : 在正式進入實戰前，我們會先複習並掌握 TypeScript 的核心觀念，建立「型別思維」。</li>
<li><strong>基礎建置與環境設定</strong>：從零開始，帶您建立一個完善的 TypeScript + Node.js 開發環境，並完成一個簡單的 API 實作。</li>
<li><strong>專案工具與進階功能</strong>：讓專案更專業！我們會加入程式碼格式化工具、自動化產生 API 文件，並探索如何快速部署。</li>
<li><strong>後端常見商業應用場景</strong>：這部分將涵蓋後端開發中不可或缺的功能，如使用者驗證、金流與雲端服務串接等。</li>
<li><strong>雲端部署與維護</strong>：最後，我們會將專案部署到雲端服務上，並了解一些基本的雲端概念。</li>
</ol>
<p>每一天，我們都會專注於一些的知識點，確保您可以循序漸進地吸收新知。</p>
<p>準備好和我一起挑戰了嗎？讓我們從明天開始，正式啟動這場 TypeScript 升級之旅吧！🚀🎉</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 10 - 部署啟程！從 Render 部署前置作業到 GitHub PR</title>
    <url>/2025/09/24/Day10%20-%20GithubPR-Render/</url>
    <content><![CDATA[<h2 id="Render-服務簡介"><a href="#Render-服務簡介" class="headerlink" title="Render 服務簡介"></a>Render 服務簡介</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/1-render.png?raw=true" alt="1-render.png"></p>
<p>在前幾天的系列文章中，我們已經完成了本地端的環境建置與功能實作。但真實專案裡，光是「我的電腦能跑」是不夠的，我們需要把服務放到雲端，讓全世界都能存取。</p>
<span id="more"></span>

<p>常見的雲端平台有 <strong>AWS</strong>、<strong>GCP</strong>、<strong>Azure</strong> 等，它們提供完整的基礎建設服務（IaaS）。但對於初學者或中小型專案來說，這些平台的學習曲線偏高、設定也比較繁瑣。</p>
<p><strong>Render</strong> 屬於 <strong>PaaS（平台即服務）</strong>，提供比 AWS、GCP 更直覺的部署體驗，只需要專注於程式碼本身，Render 就能自動幫我們完成環境建置、佈署、監控。</p>
<p>👉 適合快速上手、部屬 Side Project 或個人練習專案。</p>
<hr>
<h2 id="用-Github-帳號第三方登入-Render-服務"><a href="#用-Github-帳號第三方登入-Render-服務" class="headerlink" title="用 Github 帳號第三方登入 Render 服務"></a>用 Github 帳號第三方登入 Render 服務</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/2-signin-render.png?raw=true" alt="Screenshot 2025-09-23 at 7.56.36 PM.png"></p>
<p>Render 提供 <strong>Github 帳號登入</strong>，這樣做的好處是可以直接與 GitHub 專案連動。</p>
<p>一旦我們在 GitHub 上有新的 commit（例如合併 PR），Render 就能自動觸發建置與部署。</p>
<p><strong>優點：</strong></p>
<ul>
<li>自動同步 GitHub repo</li>
<li>省去手動上傳程式碼的麻煩</li>
<li>CI&#x2F;CD 整合更簡單</li>
</ul>
<hr>
<h2 id="Node-js-專案部署前置作業"><a href="#Node-js-專案部署前置作業" class="headerlink" title="Node.js 專案部署前置作業"></a>Node.js 專案部署前置作業</h2><h3 id="修改-package-json"><a href="#修改-package-json" class="headerlink" title="修改 package.json"></a>修改 package.json</h3><ol>
<li><p><strong>新增啟動與建置指令</strong></p>
<ul>
<li><p>在 <code>package.json</code> 的 <code>scripts</code> 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node dist/app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>start</code>：執行編譯後的程式。</p>
</li>
<li><p><code>build</code>：把 TypeScript 編譯為 JavaScript。</p>
</li>
</ul>
</li>
<li><p><strong>指定 Node.js 版本</strong></p>
<ul>
<li><p>在 <code>package.json</code> 中加入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20.x&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>為什麼要指定版本？</strong><br>Render 預設可能使用不同的 Node.js 版本，如果與本地端差異過大，可能導致部署錯誤。<br>指定 Node.js 版本能確保 Render 的執行環境與我們本地端一致，減少版本不相容的問題。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="確認-app-ts"><a href="#確認-app-ts" class="headerlink" title="確認 app.ts"></a>確認 app.ts</h3><p>確保 <code>app.ts</code> 使用環境變數的 PORT：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>小提醒</strong></p>
<p>在 Render 上，服務的埠號（<code>PORT</code>）是 <strong>自動分配</strong> 的，並透過 <code>process.env.PORT</code> 傳入程式。</p>
<p>因此 <strong>不需要在 Render 控制台手動新增 <code>PORT</code> 環境變數</strong>。</p>
<p>只要程式碼有寫：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<p>就能正確接收 Render 給的 Port。</p>
<hr>
<h3 id="編譯與運行"><a href="#編譯與運行" class="headerlink" title="編譯與運行"></a>編譯與運行</h3><p>在部署到 Render 前，先在本地端測試：</p>
<ol>
<li><p><strong>編譯程式碼</strong></p>
<ul>
<li><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
</li>
<li><p>這會將 TypeScript 編譯為 JavaScript，輸出到 <code>dist</code> 資料夾。</p>
</li>
</ul>
</li>
<li><p><strong>運行編譯後的程式</strong></p>
<ul>
<li><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>
</li>
<li><p>檢查是否能正常啟動伺服器並連接到資料庫。</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>[注意]：本地端測試成功後再進行部署，確保程式碼無誤。</p>
</blockquote>
<blockquote>
<p>commit : Day 10 Render Deploy setting</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/dec62b5d6891897d92eb39d5367be0471c9c2f37">範例程式碼</a></p>
<hr>
<h2 id="GitHub-Merge-PR-流程"><a href="#GitHub-Merge-PR-流程" class="headerlink" title="GitHub Merge PR 流程"></a>GitHub Merge PR 流程</h2><p>在專案開發時，我們通常會用 <strong>feature 分支</strong> 來開發新功能，完成後再透過 <strong>Pull Request (PR)</strong> 合併到 <code>develop</code> 分支。以下是簡單的操作流程：</p>
<hr>
<h3 id="Step-1-建立-Pull-Request"><a href="#Step-1-建立-Pull-Request" class="headerlink" title="Step 1. 建立 Pull Request"></a>Step 1. 建立 Pull Request</h3><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/3-create-pr.png?raw=true" alt="Screenshot 2025-09-23 at 8.58.41 PM.png"></p>
<p>點擊 <strong>Compare &amp; pull request</strong> !</p>
<hr>
<h3 id="Step-2-撰寫-PR-描述"><a href="#Step-2-撰寫-PR-描述" class="headerlink" title="Step 2. 撰寫 PR 描述"></a>Step 2. 撰寫 PR 描述</h3><p>選擇要合併的分支：</p>
<ul>
<li><strong>base</strong>：<code>develop</code></li>
<li><strong>compare</strong>：<code>feature/init-ts-express</code></li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/4-pr-desc.png?raw=true" alt="Screenshot 2025-09-23 at 9.01.06 PM.png"></p>
<p>在描述區塊中，列出這次 PR 的主要變更，例如：</p>
<ul>
<li>初始化 Node.js + TypeScript 專案架構</li>
<li>建立基本 Express server</li>
<li>新增 TodoList API (CRUD)</li>
<li>整合 TypeORM 與資料庫連線</li>
</ul>
<p>填寫 PR 標題與描述，準備送出 PR。按下 Create pull request !</p>
<hr>
<h3 id="Step-3-檢視-PR-狀態"><a href="#Step-3-檢視-PR-狀態" class="headerlink" title="Step 3. 檢視 PR 狀態"></a>Step 3. 檢視 PR 狀態</h3><p>送出 PR 後，可以看到 Commit 記錄與檔案變更。</p>
<p>此時 GitHub 會檢查與 <code>develop</code> 分支是否有衝突：</p>
<ul>
<li>✅ <strong>No conflicts</strong> → 可以安全合併</li>
<li>⚠️ <strong>有衝突</strong> → 需要先解決衝突</li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/5-check-pr.png?raw=true" alt="Screenshot 2025-09-23 at 9.01.35 PM.png"></p>
<hr>
<h3 id="Step-4-合併到-develop"><a href="#Step-4-合併到-develop" class="headerlink" title="Step 4. 合併到 develop"></a>Step 4. 合併到 develop</h3><p>確認無誤後，點擊 <strong>Merge pull request</strong> → <strong>Confirm merge</strong>，就能把 feature 分支合併到 <code>develop</code>。</p>
<p>合併完成後，<code>develop</code> 分支就會更新，包含最新的功能。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day10-Render-deploy/6-merge-result.png?raw=true" alt="Screenshot 2025-09-23 at 9.02.07 PM.png"></p>
<hr>
<p>先完成這些步驟後，明天我們就能把 <code>develop</code> 分支部署到 Render 囉 🚀。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 11 - 一鍵上線！完整部署到 Render 的實戰流程</title>
    <url>/2025/09/25/Day11%20-%20Render-NodeJS/</url>
    <content><![CDATA[<p>昨天我們完成了部署的前置作業，今天當然要來實戰部署啦！這篇文章會帶你一步步把 Node.js + TypeScript 專案部署到 <strong>Render</strong>，並驗證 API 是否能正常運作。</p>
<span id="more"></span>

<hr>
<h2 id="Render-部署設定步驟"><a href="#Render-部署設定步驟" class="headerlink" title="Render 部署設定步驟"></a>Render 部署設定步驟</h2><h3 id="1-建立-Web-Service"><a href="#1-建立-Web-Service" class="headerlink" title="1. 建立 Web Service"></a>1. 建立 Web Service</h3><p>到 Render Dashboard 右上角點擊 <strong>New → Web Service</strong>，建立一個新的服務。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/1-new-web-service.png?raw=true"></p>
<p>接著選擇 <strong>連結 GitHub 專案</strong>，點擊 <strong>Connect</strong>。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/2-link-github-repo.png?raw=true"></p>
<hr>
<h3 id="2-選擇專案與分支"><a href="#2-選擇專案與分支" class="headerlink" title="2. 選擇專案與分支"></a>2. 選擇專案與分支</h3><ul>
<li><strong>Language</strong> 選擇 <code>Node</code></li>
<li><strong>Branch</strong> 選擇 GitHub 專案的 <code>develop</code> 分支</li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/3-new-service-info.png?raw=true"></p>
<hr>
<h3 id="3-設定建置與啟動指令"><a href="#3-設定建置與啟動指令" class="headerlink" title="3. 設定建置與啟動指令"></a>3. 設定建置與啟動指令</h3><p>Render 需要知道如何建置與啟動專案。</p>
<p><strong>建置指令 (Build Command)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install &amp;&amp; npm run build</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/4-build-command.png?raw=true"></p>
<p><strong>啟動指令 (Start Command)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/5-start-command.png?raw=true"></p>
<hr>
<h3 id="4-選擇-Instance-Type"><a href="#4-選擇-Instance-Type" class="headerlink" title="4. 選擇 Instance Type"></a>4. 選擇 Instance Type</h3><p>如果是學習或 Side Project，可以先選擇 <strong>Free 方案</strong>。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/6-instance-type.png?raw=true"></p>
<hr>
<h3 id="5-配置環境變數"><a href="#5-配置環境變數" class="headerlink" title="5. 配置環境變數"></a>5. 配置環境變數</h3><p>接著到 Environment Variables 區塊，新增專案需要的環境變數。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_HOST=&lt;你的資料庫主機&gt;</span><br><span class="line">DB_PORT=5432</span><br><span class="line">DB_USERNAME=&lt;你的使用者名稱&gt;</span><br><span class="line">DB_PASSWORD=&lt;你的密碼&gt;</span><br><span class="line">DB_NAME=&lt;你的資料庫名稱&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/7-env.png?raw=true"></p>
<p>點擊 <strong>Add from .env</strong>。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/8-add-env.png?raw=true"></p>
<p>點擊 <strong>Add variables</strong>，就能看到變數成功新增。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/9-env-result.png?raw=true"></p>
<hr>
<h3 id="6-開始部署"><a href="#6-開始部署" class="headerlink" title="6. 開始部署"></a>6. 開始部署</h3><p>設定完成後，點擊 <strong>Deploy Web Service</strong>，Render 就會開始自動建置與部署。</p>
<p><strong>部署中畫面</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/10-deploying.png?raw=true"></p>
<p><strong>部署成功畫面</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/11-deployed.png?raw=true"></p>
<hr>
<h2 id="驗證部署結果"><a href="#驗證部署結果" class="headerlink" title="驗證部署結果"></a>驗證部署結果</h2><p>部署完成後，Render 會提供一個公開網址。</p>
<p>透過該網址即可呼叫 API：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/12-req-link.png?raw=true"></p>
<p>使用 Postman 測試新增 Todo 資料，API 回應正常 ✅</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day11-Render/13-postman-test.png?raw=true"></p>
<hr>
<p>🎉 恭喜你完成了一個完整的 Express + TypeScript + TypeORM 後端專案，並成功部署到 Render！</p>
<p>從這一步開始，你的專案已經能讓全世界存取了 。</p>
<p>⚠️ <strong>小提醒：Render Free Plan 限制</strong></p>
<p>如果你使用的是 Render 免費方案，會有以下幾點需要注意：</p>
<ul>
<li>服務若 <strong>15 分鐘沒有流量</strong>，會自動進入休眠狀態。</li>
<li>當再次有人存取時，服務會重新啟動，通常需要等待 <strong>30 秒左右</strong>。</li>
<li>免費方案的硬體資源有限，若專案流量大或需要長時間穩定服務，建議升級到付費方案。</li>
</ul>
<hr>
<h2 id="結語：從準備到上線-🚀"><a href="#結語：從準備到上線-🚀" class="headerlink" title="結語：從準備到上線 🚀"></a>結語：從準備到上線 🚀</h2><p>在 <strong>Day 10</strong>，我們完成了部署的所有前置作業：</p>
<ul>
<li>認識 Render 與雲端平台的定位</li>
<li>修改 <code>package.json</code>，指定 Node.js 版本</li>
<li>調整程式碼以支援環境變數的 <code>PORT</code></li>
<li>學會透過 GitHub PR 把 <code>feature</code> 分支合併到 <code>develop</code></li>
</ul>
<p>接著在 <strong>Day 11</strong>，我們則把 <code>develop</code> 分支部署到 Render，並完成：</p>
<ul>
<li>建立 Web Service</li>
<li>設定 Build 與 Start 指令</li>
<li>配置資料庫環境變數</li>
<li>驗證部署成功，API 可以正常使用</li>
</ul>
<p>至此，我們已經把專案從「本地端」正式推上「雲端」，讓全世界都能透過網址存取 。</p>
<p>接下來的篇章，我們將來點輕鬆的主題，介紹 Prettier 、ESLint 小工具，並逐步探索更多進階主題（檔案上傳、驗證系統等），讓專案更接近真實商業應用。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 12 - 程式碼自動排版神器：Prettier 實戰導入</title>
    <url>/2025/09/26/Day12%20-%20Prettier/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在團隊開發時，大家常常會因為一些小細節爭得不可開交：</p>
<p>有人愛用單引號 <code>&#39;</code>，有人卻堅持雙引號 <code>&quot;</code>；有人在每行結尾必加分號，有人則覺得省略更簡潔；甚至連一行程式碼能寫多長，都可能成為爭論焦點。</p>
<p>這些差異雖然不影響程式能不能跑，但會導致專案越來越凌亂，Code Review 也常常淪為「引號大戰」、「縮排大戰」。</p>
<p>這些關於 Coding Style 的問題，當然要來利用一些好用的工具來解決。</p>
<span id="more"></span>

<hr>
<h2 id="為什麼需要-Coding-Style？"><a href="#為什麼需要-Coding-Style？" class="headerlink" title="為什麼需要 Coding Style？"></a>為什麼需要 Coding Style？</h2><p>在開發專案時，每個人都有自己的習慣：</p>
<ul>
<li>有人喜歡 <code>單引號</code>，有人堅持 <code>雙引號</code>。</li>
<li>有人會在每行 <strong>80 字元</strong>就換行，有人覺得 <strong>120 字元</strong>也沒問題。</li>
<li>有人堅持在每行結尾加上 <code>;</code>，有人認為可以省略。</li>
</ul>
<p>這些差異雖然不會影響程式能不能執行，但會造成：</p>
<ol>
<li><strong>可讀性降低</strong>：程式碼風格不一致，團隊閱讀時需要額外的腦力轉換。</li>
<li><strong>協作成本上升</strong>：Code Review 時會浪費時間在「引號」、「縮排」這些小事，而不是程式邏輯。</li>
<li><strong>維護困難</strong>：專案越大，風格越不一致，日後接手的人會更痛苦。</li>
</ol>
<p>👉 為了避免這種情況，我們需要一個「統一的 Coding Style 工具」來幫忙。這就是 <strong>Prettier</strong> 出現的理由。</p>
<hr>
<h2 id="Prettier-是什麼？"><a href="#Prettier-是什麼？" class="headerlink" title="Prettier 是什麼？"></a>Prettier 是什麼？</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/1-Prettier.png?raw=true"></p>
<p><a href="https://prettier.io/">Prettier</a> 是一個「有主見的程式碼格式化工具」。</p>
<p>它會自動幫你排版程式碼，確保整個專案的風格一致。</p>
<h3 id="特點"><a href="#特點" class="headerlink" title="特點"></a>特點</h3><ul>
<li><strong>專注在排版</strong>（縮排、引號、換行、逗號…）。</li>
<li><strong>避免爭論</strong>：大家都用相同規則，開發者不需要再為風格吵架。</li>
<li><strong>支援多種語言</strong>：JavaScript、TypeScript、JSON、Markdown、HTML、CSS…</li>
</ul>
<p>📌 簡單比喻：</p>
<ul>
<li><strong>Prettier</strong> &#x3D; 幫你「整理房間」，讓程式碼整齊乾淨。</li>
<li><strong>ESLint</strong>（明天會介紹）&#x3D; 規範你的「生活習慣」，檢查程式寫法是否符合最佳實踐。</li>
</ul>
<hr>
<h2 id="VSCode-安裝-Prettier-套件"><a href="#VSCode-安裝-Prettier-套件" class="headerlink" title="VSCode 安裝 Prettier 套件"></a>VSCode 安裝 Prettier 套件</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/2-vscode-prettier.png?raw=true"></p>
<h2 id="專案加入-Prettier"><a href="#專案加入-Prettier" class="headerlink" title="專案加入 Prettier"></a>專案加入 Prettier</h2><p>安裝 Prettier：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev prettier</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="設定-Prettier"><a href="#設定-Prettier" class="headerlink" title="設定 Prettier"></a>設定 Prettier</h2><p>在專案根目錄新增 <code>.prettierrc</code>，統一規則：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">140</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>說明：</p>
<ul>
<li><code>semi: true</code> → 每行結尾加上分號</li>
<li><code>singleQuote: false</code> → 使用雙引號</li>
<li><code>trailingComma: &quot;all&quot;</code> → 物件最後一項也加逗號（方便日後新增項目）</li>
<li><code>tabWidth: 2</code> → 縮排 2 格</li>
<li><code>printWidth: 140</code> → 每行最長 140 字元</li>
</ul>
<hr>
<h2 id="忽略檔案：-prettierignore"><a href="#忽略檔案：-prettierignore" class="headerlink" title="忽略檔案：.prettierignore"></a>忽略檔案：<code>.prettierignore</code></h2><p>和 <code>.gitignore</code> 類似，這裡設定 Prettier 不要處理的檔案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 忽略依賴套件</span><br><span class="line">node_modules</span><br><span class="line"></span><br><span class="line"># 忽略編譯後的輸出</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"># 忽略環境變數設定檔</span><br><span class="line">.env</span><br><span class="line">.env.*</span><br><span class="line"></span><br><span class="line"># 忽略版本控制與鎖檔</span><br><span class="line">.git</span><br><span class="line">.gitignore</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br><span class="line">pnpm-lock.yaml</span><br><span class="line"></span><br><span class="line"># 測試覆蓋率報告</span><br><span class="line">coverage</span><br><span class="line"></span><br><span class="line"># Log 檔案與紀錄</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># 靜態資源或上傳資料</span><br><span class="line">public/</span><br><span class="line">static/</span><br><span class="line">uploads/</span><br><span class="line"></span><br><span class="line"># 忽略 Prettier 自己的 ignore 設定</span><br><span class="line">.prettierignore</span><br><span class="line"></span><br><span class="line"># 圖片與媒體檔案</span><br><span class="line">*.png</span><br><span class="line">*.jpg</span><br><span class="line">*.jpeg</span><br><span class="line">*.svg</span><br><span class="line">*.gif</span><br><span class="line">*.mp4</span><br><span class="line">*.webm</span><br><span class="line"></span><br><span class="line"># 可選：忽略資料庫檔案或 dump 檔</span><br><span class="line">*.sqlite</span><br><span class="line">*.sql</span><br><span class="line">*.dump</span><br></pre></td></tr></table></figure>

<h3 id="為什麼要新增-prettierignore？"><a href="#為什麼要新增-prettierignore？" class="headerlink" title="為什麼要新增 .prettierignore？"></a>為什麼要新增 <code>.prettierignore</code>？</h3><ol>
<li><strong>不必要格式化</strong>：像 <code>node_modules</code> 或 <code>dist</code>，不是我們自己寫的程式碼。</li>
<li><strong>效能考量</strong>：避免 Prettier 處理大量無意義的檔案。</li>
<li><strong>避免衝突</strong>：像 <code>.env</code> ，格式被改可能會出錯。</li>
</ol>
<hr>
<h2 id="專案格式化範例"><a href="#專案格式化範例" class="headerlink" title="專案格式化範例"></a>專案格式化範例</h2><p>在 <code>package.json</code> 加入 scripts：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;src/**/*.&#123;js,ts&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format:check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --check \&quot;src/**/*.&#123;js,ts&#125;\&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm run format:check</code>：只檢查，不會修改程式碼 (可發現 <code>todoController.ts</code> 和 <code>todoRoutes.ts</code> 有格式上的問題)<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/3-format-check.png?raw=true"></li>
<li><code>npm run format</code>：自動格式化 <code>src</code> 底下的程式碼<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/4-format-code.png?raw=true"></li>
<li>附上專案程式碼經過 prettier 格式化後的結果 (<a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commits/feature/init-ts-express/">https://github.com/ArvinYang1925/iThome2025-node-ts/commits/feature/init-ts-express/</a>)</li>
</ul>
<p><code>todoController.ts</code></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/5-format-controller.png?raw=true"></p>
<p><code>todoRoutes.ts</code></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day12-Prettier/6-format-route.png?raw=true"></p>
<p>成功透過 Prettier 格式化程式碼 💪</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>Coding Style</strong>：避免專案變得凌亂，提高團隊協作效率。</li>
<li><strong>Prettier</strong>：專注在「排版」，讓程式碼看起來統一且乾淨。</li>
<li><strong>搭配 ESLint</strong>：Prettier 負責「長相」，ESLint 負責「習慣」，兩者搭配才完整。</li>
</ul>
<p>👉 明天 (Day12) 我們會介紹 <strong>ESLint</strong>，看看它如何幫助我們寫出更正確、更有品質的程式碼。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/ce334a8f7f3366eb00ba95c1977326a03e3e72e2">Github 連結</a></p>
<blockquote>
<p>commit : setup prettier</p>
</blockquote>
<p><a href="https://ithelp.ithome.com.tw/m/articles/10294321">隨時隨地格式化 - Prettier</a></p>
<p><a href="https://israynotarray.com/javascript/20231031/1586150719/">你終究要用 Prettier，為什麼不一開始就用「Prettier」呢？</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 13 - 一致的程式碼：ESLint 導入</title>
    <url>/2025/09/27/Day13%20-%20ESLint/</url>
    <content><![CDATA[<h2 id="ESLint-的歷史與簡介"><a href="#ESLint-的歷史與簡介" class="headerlink" title="ESLint 的歷史與簡介"></a>ESLint 的歷史與簡介</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day13-ESLint/1-eslint.png?raw=true"></p>
<p>在 JavaScript 的早期，開發者缺乏統一的規範，程式碼容易因個人習慣而變得混亂。</p>
<ul>
<li>2000 年代，出現了 <strong>JSLint</strong>（由 Douglas Crockford 開發，JavaScript 語言守護者之一），用來檢查常見錯誤。</li>
<li>之後社群又發展出 <strong>JSHint</strong>，提供更彈性的規則與設定。</li>
<li>到了 <strong>2013 年</strong>，Nicholas C. Zakas（前 Yahoo! JS 團隊成員）推出 <strong>ESLint</strong>，透過「規則驅動 + 插件機制」，讓開發者可以自由擴展並制定專案專屬規範。</li>
</ul>
<p>今天，ESLint 已經成為 JavaScript&#x2F;TypeScript 專案裡最常見的程式碼檢查工具。</p>
<span id="more"></span>

<hr>
<h2 id="為什麼需要-ESLint？"><a href="#為什麼需要-ESLint？" class="headerlink" title="為什麼需要 ESLint？"></a>為什麼需要 ESLint？</h2><p>和昨天的 <strong>Prettier</strong> 不同，ESLint 專注於 <strong>程式邏輯與最佳實踐</strong>。</p>
<h3 id="常見檢查範例"><a href="#常見檢查範例" class="headerlink" title="常見檢查範例"></a>常見檢查範例</h3><ul>
<li><strong>程式錯誤</strong>：未定義變數、未使用的變數、錯誤的語法。</li>
<li><strong>最佳實踐</strong>：禁止使用 <code>var</code>、避免 <code>any</code>、規定函式宣告風格。</li>
</ul>
<h3 id="為什麼重要？"><a href="#為什麼重要？" class="headerlink" title="為什麼重要？"></a>為什麼重要？</h3><ol>
<li><strong>降低 Bug 風險</strong>：提早發現潛在錯誤，避免程式在 runtime 才爆炸。</li>
<li><strong>提升可讀性</strong>：團隊都遵守相同規範，程式碼更一致。</li>
<li><strong>改善協作體驗</strong>：Code Review 時，機器會先抓語法與規範問題，讓人類專注於商業邏輯。</li>
</ol>
<p>👉 簡單來說：</p>
<ul>
<li><strong>Prettier</strong>：讓程式碼「好看」</li>
<li><strong>ESLint</strong>：讓程式碼「正確」</li>
</ul>
<hr>
<h2 id="VSCode-安裝-ESLint"><a href="#VSCode-安裝-ESLint" class="headerlink" title="VSCode 安裝 ESLint"></a>VSCode 安裝 ESLint</h2><p>這邊也建議在 VSCode 裡安裝 ESLint 套件：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day13-ESLint/2-vscode-eslint.png?raw=true"></p>
<hr>
<h2 id="專案安裝-ESLint"><a href="#專案安裝-ESLint" class="headerlink" title="專案安裝 ESLint"></a>專案安裝 ESLint</h2><p>在專案裡安裝 ESLint 以及相關套件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install eslint @eslint/js eslint-config-prettier eslint-plugin-prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin --save-dev</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="設定-ESLint"><a href="#設定-ESLint" class="headerlink" title="設定 ESLint"></a>設定 ESLint</h2><p>在專案根目錄新增 <code>eslint.config.js</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> js = <span class="built_in">require</span>(<span class="string">&quot;@eslint/js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> globals = <span class="built_in">require</span>(<span class="string">&quot;globals&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> prettier = <span class="built_in">require</span>(<span class="string">&quot;eslint-config-prettier&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> tsParser = <span class="built_in">require</span>(<span class="string">&quot;@typescript-eslint/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> tsPlugin = <span class="built_in">require</span>(<span class="string">&quot;@typescript-eslint/eslint-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">files</span>: [<span class="string">&quot;**/*.ts&quot;</span>], <span class="comment">// 檢查 .ts 檔案</span></span><br><span class="line">    <span class="attr">languageOptions</span>: &#123;</span><br><span class="line">      <span class="attr">parser</span>: tsParser, <span class="comment">// 用 TypeScript 的解析器</span></span><br><span class="line">      <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// 支援 ES 模組</span></span><br><span class="line">      <span class="attr">globals</span>: &#123;</span><br><span class="line">        ...globals.<span class="property">node</span>, <span class="comment">// Node.js 的全域變數（像 process）</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@typescript-eslint&quot;</span>: tsPlugin, <span class="comment">// TypeScript 專屬插件</span></span><br><span class="line">      <span class="attr">prettier</span>: <span class="built_in">require</span>(<span class="string">&quot;eslint-plugin-prettier&quot;</span>), <span class="comment">// Prettier 插件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      ...js.<span class="property">configs</span>.<span class="property">recommended</span>.<span class="property">rules</span>, <span class="comment">// ESLint 基本規則</span></span><br><span class="line">      ...tsPlugin.<span class="property">configs</span>.<span class="property">recommended</span>.<span class="property">rules</span>, <span class="comment">// TypeScript 推薦規則</span></span><br><span class="line">      ...prettier.<span class="property">rules</span>, <span class="comment">// 正確使用 prettier 配置</span></span><br><span class="line">      <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// Prettier 格式錯誤會顯示</span></span><br><span class="line">      <span class="attr">semi</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">// 行尾一定要有分號</span></span><br><span class="line">      <span class="attr">quotes</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;double&quot;</span>], <span class="comment">// 用雙引號</span></span><br><span class="line">      <span class="string">&quot;no-var&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 不准用 var</span></span><br><span class="line">      <span class="string">&quot;@typescript-eslint/no-unused-vars&quot;</span>: [<span class="string">&quot;error&quot;</span>], <span class="comment">// 不准有沒用到的變數</span></span><br><span class="line">      <span class="string">&quot;@typescript-eslint/no-explicit-any&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 禁止使用 any 類型</span></span><br><span class="line">      <span class="comment">// 改用 TypeScript 版本的 func-style</span></span><br><span class="line">      <span class="string">&quot;func-style&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;declaration&quot;</span>, &#123; <span class="attr">allowArrowFunctions</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">      <span class="comment">// 禁止一般函式表達式</span></span><br><span class="line">      <span class="string">&quot;no-restricted-syntax&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">selector</span>: <span class="string">&quot;FunctionExpression&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;請使用函式宣告式或箭頭函式，避免使用一般函式表達式 😎&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>在 <code>package.json</code> 裡加上 script：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;src/**/*.ts\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;src/**/*.ts\&quot; --fix&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm run lint</code>：檢查程式碼規則</li>
<li><code>npm run lint:fix</code>：自動修復能修的錯誤</li>
</ul>
<hr>
<h2 id="測試-ESLint"><a href="#測試-ESLint" class="headerlink" title="測試 ESLint"></a>測試 ESLint</h2><p>在 <code>/src</code> 下新增 <code>testLint.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 違反 1: sayHello 宣告但未使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 違反 2: 用 any 型別（TypeScript 規則）</span></span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">&quot;Hello &quot;</span> + name; <span class="comment">// 違反 3: 用 var 宣告</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> unusedVar = <span class="number">42</span>; <span class="comment">// 違反 4: 未使用的變數</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 違反 5:請使用函式宣告式或箭頭函式，避免使用一般函式表達式</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">a</span>(<span class="string">&quot;Peter&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/test&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Test route&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day13-ESLint/3-npm-run-lint.png?raw=true"></p>
<p>你會看到 ESLint 把所有違規都列出來，幫助你更快找到問題。</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li>ESLint 誕生於 2013 年，是目前最常見的 JavaScript&#x2F;TypeScript 程式碼檢查工具。</li>
<li>與 Prettier 搭配：<ul>
<li><strong>Prettier</strong> → 排版風格一致</li>
<li><strong>ESLint</strong> → 邏輯與規範正確</li>
</ul>
</li>
<li>在專案中安裝、設定後，可以自動檢查、修復程式，避免錯誤。</li>
</ul>
<hr>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><blockquote>
<p>commit : setup ESLint</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/2786c17e588e8598f42e8349a901f3d6717afe46">Github 連結</a></p>
<p>👉 明天 (Day14) 我們則會來介紹 Zod 驗證 (API 驗證守護神)，期待期待 💪</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 14 - API 驗證救星：用 Zod 驗證來檢查</title>
    <url>/2025/09/28/Day14%20-%20Zod/</url>
    <content><![CDATA[<p>在開發後端 API 的時候，你一定遇過這些狀況：</p>
<ul>
<li>前端傳來的資料少了一個欄位。</li>
<li>輸入的字串太長，直接讓資料庫報錯。</li>
<li>原本應該是 <code>boolean</code>，結果卻收到 <code>&quot;true&quot;</code> 或 <code>1</code>。</li>
</ul>
<p>如果每次都要手動檢查 <code>req.body</code>，程式碼會變得又長又難維護。</p>
<p>👉 這時候，<strong>Zod 就是我們的防呆神器</strong>。</p>
<span id="more"></span>

<hr>
<h2 id="1-為什麼要用-Zod？"><a href="#1-為什麼要用-Zod？" class="headerlink" title="1. 為什麼要用 Zod？"></a>1. 為什麼要用 Zod？</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day14-Zod/1-zod.png?raw=true"></p>
<p>Zod 是一個 <strong>TypeScript-first 的資料驗證工具</strong>，它的特點包括：</p>
<ul>
<li><strong>語法直覺</strong>：<code>z.string().min(1)</code> 就能定義規則。</li>
<li><strong>與 TS 整合</strong>：Schema 本身就是型別，可以直接推導。</li>
<li><strong>後端防呆</strong>：避免錯誤資料寫進資料庫。</li>
</ul>
<hr>
<h2 id="2-Zod-基礎知識"><a href="#2-Zod-基礎知識" class="headerlink" title="2. Zod 基礎知識"></a>2. Zod 基礎知識</h2><p>先來看一個小範例：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義 schema</span></span><br><span class="line"><span class="keyword">const</span> userSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: z.<span class="title function_">string</span>().<span class="title function_">min</span>(<span class="number">1</span>, <span class="string">&quot;Name is required&quot;</span>),</span><br><span class="line">  <span class="attr">age</span>: z.<span class="title function_">number</span>().<span class="title function_">int</span>().<span class="title function_">min</span>(<span class="number">0</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證資料</span></span><br><span class="line"><span class="keyword">const</span> result = userSchema.<span class="title function_">safeParse</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">age</span>: -<span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!result.<span class="property">success</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">error</span>.<span class="property">errors</span>);</span><br><span class="line">  <span class="comment">// [</span></span><br><span class="line">  <span class="comment">//   &#123; message: &quot;Name is required&quot;, path: [&quot;name&quot;] &#125;,</span></span><br><span class="line">  <span class="comment">//   &#123; message: &quot;Number must be greater than or equal to 0&quot;, path: [&quot;age&quot;] &#125;</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常見型別：</p>
<ul>
<li><code>z.string()</code>：字串</li>
<li><code>z.number()</code>：數字</li>
<li><code>z.boolean()</code>：布林</li>
<li><code>z.object(&#123;...&#125;)</code>：物件</li>
</ul>
<p>常用驗證方法：</p>
<ul>
<li><code>.min(n)</code> &#x2F; <code>.max(n)</code>：限制範圍</li>
<li><code>.optional()</code>：欄位可選</li>
<li><code>.email()</code>：檢查 Email 格式</li>
</ul>
<p>也可用線上 Zod Playground 快速測試一下:</p>
<p><a href="https://zod-playground.vercel.app/?appdata=N4IgzgxgFgpgtgQxALhALwHQHsBGArGCAFwApgAdAOwAJrKE4ZlrMwiAnAS0oHMSBKDHG4kAjABpq5EADkGMapzDV2MAI4BXTqoAm0-uKq0EPJiwyUNcHDHYCM3UoOGUSABgNUAvvwDcIcRAANwQAGw0YMBQAbRBgOnlmaQApLChKaUkTMwAmN2ovEABdQKDbME4sShQQABYMUQbRAJAlAC0sHQBZbk4UADMwsBgvIA">https://zod-playground.vercel.app/?appdata=N4IgzgxgFgpgtgQxALhALwHQHsBGArGCAFwApgAdAOwAJrKE4ZlrMwiAnAS0oHMSBKDHG4kAjABpq5EADkGMapzDV2MAI4BXTqoAm0-uKq0EPJiwyUNcHDHYCM3UoOGUSABgNUAvvwDcIcRAANwQAGw0YMBQAbRBgOnlmaQApLChKaUkTMwAmN2ovEABdQKDbME4sShQQABYMUQbRAJAlAC0sHQBZbk4UADMwsBgvIA</a></p>
<hr>
<h2 id="3-安裝-Zod"><a href="#3-安裝-Zod" class="headerlink" title="3. 安裝 Zod"></a>3. 安裝 Zod</h2><p>在專案根目錄執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install zod</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-建立驗證-Schema"><a href="#4-建立驗證-Schema" class="headerlink" title="4. 建立驗證 Schema"></a>4. 建立驗證 Schema</h2><p>建立 <code>src/validator/todoValidation.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; z &#125; <span class="keyword">from</span> <span class="string">&quot;zod&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createTodoSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: z</span><br><span class="line">    .<span class="title function_">string</span>()</span><br><span class="line">    .<span class="title function_">min</span>(<span class="number">1</span>, &#123; <span class="attr">message</span>: <span class="string">&quot;Title is required&quot;</span> &#125;)</span><br><span class="line">    .<span class="title function_">max</span>(<span class="number">100</span>, &#123; <span class="attr">message</span>: <span class="string">&quot;Title must be at most 100 characters&quot;</span> &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updateTodoSchema = z.<span class="title function_">object</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: z.<span class="title function_">string</span>().<span class="title function_">optional</span>(),</span><br><span class="line">  <span class="attr">completed</span>: z.<span class="title function_">boolean</span>().<span class="title function_">optional</span>(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-在-Controller-使用驗證"><a href="#5-在-Controller-使用驗證" class="headerlink" title="5. 在 Controller 使用驗證"></a>5. 在 Controller 使用驗證</h2><p>在 <code>todoController.ts</code> 中對 <code>createTodo</code>、<code>updateTodo</code> 套用 <code>.safeParse()</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/Todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createTodoSchema,</span><br><span class="line">  updateTodoSchema,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../validator/todoValidation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoRepository = <span class="title class_">AppDataSource</span>.<span class="title function_">getRepository</span>(<span class="title class_">Todo</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsed = createTodoSchema.<span class="title function_">safeParse</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">if</span> (!parsed.<span class="property">success</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;標題過長或過短&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newTodo = todoRepository.<span class="title function_">create</span>(&#123; <span class="attr">title</span>: parsed.<span class="property">data</span>.<span class="property">title</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> savedTodo = <span class="keyword">await</span> todoRepository.<span class="title function_">save</span>(newTodo);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: savedTodo &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">    <span class="keyword">const</span> parsed = updateTodoSchema.<span class="title function_">safeParse</span>(req.<span class="property">body</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parsed.<span class="property">success</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;更新資料格式錯誤&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> todo = <span class="keyword">await</span> todoRepository.<span class="title function_">findOneBy</span>(&#123; id &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!todo) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Todo not found&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    todo.<span class="property">title</span> = parsed.<span class="property">data</span>.<span class="property">title</span> ?? todo.<span class="property">title</span>;</span><br><span class="line">    todo.<span class="property">completed</span> = parsed.<span class="property">data</span>.<span class="property">completed</span> ?? todo.<span class="property">completed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> updatedTodo = <span class="keyword">await</span> todoRepository.<span class="title function_">save</span>(todo);</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: updatedTodo &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-成果展示"><a href="#6-成果展示" class="headerlink" title="6. 成果展示"></a>6. 成果展示</h2><ul>
<li>✅ 正確資料 → 正常新增 &#x2F; 更新</li>
<li>❌ 錯誤資料 → 直接被擋下並回傳錯誤訊息<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day14-Zod/2-postman-test.png?raw=true"></li>
</ul>
<hr>
<h2 id="7-總結"><a href="#7-總結" class="headerlink" title="7. 總結"></a>7. 總結</h2><p>今天我們學到：</p>
<ul>
<li>Zod 是一個簡單直覺的 <strong>驗證工具</strong>。</li>
<li>透過 <code>safeParse()</code> 可以有效攔截不合法資料。</li>
<li>在 API Controller 直接使用 Schema，就能大幅提升專案的安全性與可維護性。</li>
</ul>
<p>下次寫 API 時，別忘了這個小幫手！</p>
<hr>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><blockquote>
<p>commit : add zod validation</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/2bf8d89d9096edd2960abf384ceb98528f43fc99">Github 連結</a></p>
<ul>
<li><a href="https://zod.dev/">Zod 官方文件</a></li>
<li><a href="https://www.youtube.com/results?search_query=zod+validation">Zod YouTube 教學</a></li>
</ul>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 15 - API 安全升級：JWT 登入驗證全流程實作</title>
    <url>/2025/09/29/Day15%20-%20JWT/</url>
    <content><![CDATA[<p>到目前為止，我們的 TodoList API 已經能跑起來，還能把資料存進資料庫。</p>
<p>但是，有沒有發現一個大漏洞？</p>
<p>👉 <strong>任何人都可以操作 todos，不需要登入！</strong></p>
<p>但現在我們希望做到「一人一帳號，一人一份 TodoList」。</p>
<p>今天我們就來幫 API 加上 <strong>JWT 登入驗證</strong>，讓系統更有安全感 💪。</p>
<span id="more"></span>

<p>P.S 本次專案程式碼修改幅度較大，下面列出重點步驟，詳細可參考最下方<strong>補充資源</strong>的內容。</p>
<hr>
<h2 id="1-先裝上兩大神器"><a href="#1-先裝上兩大神器" class="headerlink" title="1. 先裝上兩大神器"></a>1. 先裝上兩大神器</h2><p>要實作登入驗證，通常會用到這兩個套件：</p>
<ul>
<li><strong>jsonwebtoken</strong>：產生與驗證 JWT（JSON Web Token），用來確認使用者身份。</li>
<li><strong>bcryptjs</strong>：幫密碼做雜湊（Hash），確保不會把明碼存進資料庫。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install jsonwebtoken bcryptjs</span><br><span class="line">npm install -D @types/jsonwebtoken @types/bcryptjs</span><br></pre></td></tr></table></figure>

<p>裝好之後，我們就能開始搞定 <strong>註冊 &#x2F; 登入 &#x2F; 驗證 middleware</strong> 了 🚀。</p>
<hr>
<h2 id="2-新增-User-實體"><a href="#2-新增-User-實體" class="headerlink" title="2. 新增 User 實體"></a>2. 新增 User 實體</h2><p>我們需要一個使用者資料表，才能綁定 Todo。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/entities/User.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Entity</span>,</span><br><span class="line">  <span class="title class_">PrimaryGeneratedColumn</span>,</span><br><span class="line">  <span class="title class_">Column</span>,</span><br><span class="line">  <span class="title class_">CreateDateColumn</span>,</span><br><span class="line">  <span class="title class_">UpdateDateColumn</span>,</span><br><span class="line">  <span class="title class_">OneToMany</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(<span class="string">&quot;uuid&quot;</span>)</span><br><span class="line">  id!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;varchar&quot;</span>, <span class="attr">length</span>: <span class="number">50</span>, <span class="attr">nullable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  name!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;varchar&quot;</span>, <span class="attr">length</span>: <span class="number">320</span>, <span class="attr">unique</span>: <span class="literal">true</span>, <span class="attr">nullable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  email!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;varchar&quot;</span>, <span class="attr">length</span>: <span class="number">72</span>, <span class="attr">nullable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  password!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CreateDateColumn</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;created_at&quot;</span> &#125;)</span><br><span class="line">  createdAt!: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UpdateDateColumn</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;updated_at&quot;</span> &#125;)</span><br><span class="line">  updatedAt!: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 與 Todo 的一對多關係</span></span><br><span class="line">  <span class="meta">@OneToMany</span>(<span class="function">() =&gt;</span> <span class="title class_">Todo</span>, <span class="function">(<span class="params">todo</span>) =&gt;</span> todo.<span class="property">user</span>)</span><br><span class="line">  todos?: <span class="title class_">Todo</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再來，把 Todo 也連上使用者：(可以覆蓋本來的 Todo.ts 程式碼)</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/entities/Todo.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Entity</span>,</span><br><span class="line">  <span class="title class_">PrimaryGeneratedColumn</span>,</span><br><span class="line">  <span class="title class_">Column</span>,</span><br><span class="line">  <span class="title class_">CreateDateColumn</span>,</span><br><span class="line">  <span class="title class_">UpdateDateColumn</span>,</span><br><span class="line">  <span class="title class_">ManyToOne</span>,</span><br><span class="line">  <span class="title class_">JoinColumn</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./User&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(<span class="string">&quot;uuid&quot;</span>)</span><br><span class="line">  id!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;varchar&quot;</span>, <span class="attr">length</span>: <span class="number">255</span>, <span class="attr">nullable</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  title!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">default</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  completed!: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CreateDateColumn</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;created_at&quot;</span> &#125;)</span><br><span class="line">  createdAt!: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UpdateDateColumn</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;updated_at&quot;</span> &#125;)</span><br><span class="line">  updatedAt!: <span class="title class_">Date</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 與 User 的多對一關係</span></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user_id&quot;</span> &#125;)</span><br><span class="line">  userId!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ManyToOne</span>(<span class="function">() =&gt;</span> <span class="title class_">User</span>, <span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">todos</span>, &#123; <span class="attr">onDelete</span>: <span class="string">&quot;CASCADE&quot;</span> &#125;)</span><br><span class="line">  <span class="meta">@JoinColumn</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user_id&quot;</span> &#125;)</span><br><span class="line">  user!: <span class="title class_">User</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣一來，Todo 就會跟 User 綁定囉 。</p>
<hr>
<h2 id="3-密碼加密工具"><a href="#3-密碼加密工具" class="headerlink" title="3. 密碼加密工具"></a>3. 密碼加密工具</h2><p>不建議把使用者輸入的密碼直接存進 DB。</p>
<p>所以我們先寫一個小工具來處理加密與比對：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/utils/passwordUtils.ts</span></span><br><span class="line"><span class="keyword">import</span> bcrypt <span class="keyword">from</span> <span class="string">&quot;bcryptjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hashPassword</span>(<span class="params">plain: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.<span class="title function_">genSalt</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> bcrypt.<span class="title function_">hash</span>(plain, salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">comparePassword</span>(<span class="params"></span></span><br><span class="line"><span class="params">  plain: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  hashed: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> bcrypt.<span class="title function_">compare</span>(plain, hashed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-JWT-工具"><a href="#4-JWT-工具" class="headerlink" title="4. JWT 工具"></a>4. JWT 工具</h2><p>JWT 就像是使用者的「通行證」。</p>
<p>我們需要能夠 <strong>簽發 token</strong> 以及 <strong>驗證 token</strong>。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/utils/jwtUtils.ts</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> jwt <span class="keyword">from</span> <span class="string">&quot;jsonwebtoken&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">JWTPayload</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Missing JWT_SECRET in .env&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET</span> = process.<span class="property">env</span>.<span class="property">JWT_SECRET</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EXPIRES_IN</span> = process.<span class="property">env</span>.<span class="property">JWT_EXPIRES_IN</span> || <span class="string">&quot;24h&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">generateToken</span>(<span class="params">payload: JWTPayload</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> jwt.<span class="title function_">sign</span>(payload, <span class="variable constant_">SECRET</span>, &#123;</span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="variable constant_">EXPIRES_IN</span> <span class="keyword">as</span> jwt.<span class="property">SignOptions</span>[<span class="string">&quot;expiresIn&quot;</span>],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">verifyToken</span>(<span class="params">token: <span class="built_in">string</span></span>): <span class="title class_">JWTPayload</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> jwt.<span class="title function_">verify</span>(token, <span class="variable constant_">SECRET</span>) <span class="keyword">as</span> <span class="title class_">JWTPayload</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-註冊與登入流程"><a href="#5-註冊與登入流程" class="headerlink" title="5. 註冊與登入流程"></a>5. 註冊與登入流程</h2><p>現在來寫 API：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/controllers/authController.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  registerSchema,</span><br><span class="line">  loginSchema,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../validator/authValidationSchemas&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/User&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; hashPassword, comparePassword &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/passwordUtils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; generateToken &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/jwtUtils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> jwt <span class="keyword">from</span> <span class="string">&quot;jsonwebtoken&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRepo = <span class="title class_">AppDataSource</span>.<span class="title function_">getRepository</span>(<span class="title class_">User</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">register</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsed = registerSchema.<span class="title function_">safeParse</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">if</span> (!parsed.<span class="property">success</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> issue = parsed.<span class="property">error</span>.<span class="property">issues</span>[<span class="number">0</span>];</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: issue.<span class="property">message</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; name, email, password &#125; = parsed.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 檢查是否已註冊</span></span><br><span class="line">    <span class="keyword">const</span> exists = <span class="keyword">await</span> userRepo.<span class="title function_">findOneBy</span>(&#123; email &#125;);</span><br><span class="line">    <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">409</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Email 已被使用&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立 User（移除角色相關邏輯）</span></span><br><span class="line">    <span class="keyword">const</span> hashed = <span class="keyword">await</span> <span class="title function_">hashPassword</span>(password);</span><br><span class="line">    <span class="keyword">const</span> user = userRepo.<span class="title function_">create</span>(&#123;</span><br><span class="line">      name,</span><br><span class="line">      email,</span><br><span class="line">      <span class="attr">password</span>: hashed,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> saved = <span class="keyword">await</span> userRepo.<span class="title function_">save</span>(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 token</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">generateToken</span>(&#123; <span class="attr">id</span>: saved.<span class="property">id</span>, <span class="attr">email</span>: saved.<span class="property">email</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> &#123; exp, iat &#125; = jwt.<span class="title function_">decode</span>(token) <span class="keyword">as</span> &#123; <span class="attr">exp</span>: <span class="built_in">number</span>; <span class="attr">iat</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> expiresIn = exp - iat;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;註冊成功&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        token,</span><br><span class="line">        expiresIn,</span><br><span class="line">        <span class="attr">userInfo</span>: &#123;</span><br><span class="line">          <span class="attr">id</span>: saved.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">name</span>: saved.<span class="property">name</span>,</span><br><span class="line">          <span class="attr">email</span>: saved.<span class="property">email</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsed = loginSchema.<span class="title function_">safeParse</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">if</span> (!parsed.<span class="property">success</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;帳號或密碼錯誤&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = parsed.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> userRepo.<span class="title function_">findOneBy</span>(&#123; email &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!user || !(<span class="keyword">await</span> <span class="title function_">comparePassword</span>(password, user.<span class="property">password</span>))) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;帳號或密碼錯誤&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">generateToken</span>(&#123; <span class="attr">id</span>: user.<span class="property">id</span>, <span class="attr">email</span>: user.<span class="property">email</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> &#123; exp, iat &#125; = jwt.<span class="title function_">decode</span>(token) <span class="keyword">as</span> &#123; <span class="attr">exp</span>: <span class="built_in">number</span>; <span class="attr">iat</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> expiresIn = exp - iat;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;登入成功&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        token,</span><br><span class="line">        expiresIn,</span><br><span class="line">        <span class="attr">userInfo</span>: &#123;</span><br><span class="line">          <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">name</span>: user.<span class="property">name</span>,</span><br><span class="line">          <span class="attr">email</span>: user.<span class="property">email</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params">req: Request, res: Response, next: NextFunction</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;登出成功&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登入的流程則是比對密碼 → 發 token。</p>
<p>然後 routes 新增 authRoutes.ts</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/routes/authRoutes.ts</span></span><br><span class="line">import <span class="punctuation">&#123;</span> Router <span class="punctuation">&#125;</span> from <span class="string">&quot;express&quot;</span>;</span><br><span class="line">import <span class="punctuation">&#123;</span> register<span class="punctuation">,</span> login<span class="punctuation">,</span> logout <span class="punctuation">&#125;</span> from <span class="string">&quot;../controllers/authController&quot;</span>;</span><br><span class="line">import <span class="punctuation">&#123;</span> isAuth <span class="punctuation">&#125;</span> from <span class="string">&quot;../middleware/isAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line">const router = Router();</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/register&quot;</span><span class="punctuation">,</span> register);</span><br><span class="line">router.post(<span class="string">&quot;/login&quot;</span><span class="punctuation">,</span> login);</span><br><span class="line">router.post(<span class="string">&quot;/logout&quot;</span><span class="punctuation">,</span> isAuth<span class="punctuation">,</span> logout);</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure>

<p>.env 記得也要加上 <code>JWT_SECRET</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JWT_SECRET=jwt_secret</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-認證中間件"><a href="#6-認證中間件" class="headerlink" title="6. 認證中間件"></a>6. 認證中間件</h2><p>有了 token 之後，還要能檢查它是否合法。</p>
<p>這時候就需要 middleware 出場啦：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/middleware/isAuth.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; verifyToken, <span class="title class_">JWTPayload</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/jwtUtils&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AuthRequest</span> <span class="keyword">extends</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">  user?: <span class="title class_">JWTPayload</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isAuth</span>(<span class="params">req: AuthRequest, res: Response, next: NextFunction</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> auth = req.<span class="property">headers</span>.<span class="property">authorization</span>;</span><br><span class="line">  <span class="keyword">if</span> (!auth?.<span class="title function_">startsWith</span>(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;請先登入&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = auth.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> payload = <span class="title function_">verifyToken</span>(token);</span><br><span class="line">    req.<span class="property">user</span> = payload;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Token 無效或已過期&quot;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-保護-Todo-API"><a href="#7-保護-Todo-API" class="headerlink" title="7. 保護 Todo API"></a>7. 保護 Todo API</h2><p>最後，讓所有 Todo 操作都必須帶上 token 才能執行：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/routes/todoRoutes.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getTodos,</span><br><span class="line">  createTodo,</span><br><span class="line">  updateTodo,</span><br><span class="line">  deleteTodo,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../controllers/todoController&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isAuth &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/isAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, isAuth, getTodos);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, isAuth, createTodo);</span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&quot;/:id&quot;</span>, isAuth, updateTodo);</span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&quot;/:id&quot;</span>, isAuth, deleteTodo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-實作成果"><a href="#8-實作成果" class="headerlink" title="8.實作成果"></a>8.實作成果</h2><p>用 postman 測試註冊 API :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day15-JWT/1-register.png?raw=true"></p>
<p>測試登入 API :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day15-JWT/2-login.png?raw=true"></p>
<p>在 postman 傳送請求時帶上 token</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day15-JWT/3-token.png?raw=true"></p>
<p>嘗試新增待辦事項</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day15-JWT/4-add-todo.png?raw=true"></p>
<p>可發現待辦事項綁定了 userId</p>
<p>現在，每個人都只能操作自己的 Todo！🎉</p>
<hr>
<h2 id="🔑-本日重點複習"><a href="#🔑-本日重點複習" class="headerlink" title="🔑 本日重點複習"></a>🔑 本日重點複習</h2><ol>
<li><strong>bcryptjs</strong>：加密密碼，保護使用者資料。</li>
<li><strong>jsonwebtoken</strong>：簽發 &#x2F; 驗證 Token，實現登入驗證。</li>
<li><strong>middleware</strong>：保護 API，只允許合法使用者操作。</li>
<li><strong>User 與 Todo 關聯</strong>：實現一人一份 TodoList。</li>
</ol>
<hr>
<h2 id="寫在最後"><a href="#寫在最後" class="headerlink" title="寫在最後"></a>寫在最後</h2><p>做到這裡，我們的 TodoList API 已經升級到「多人系統」。</p>
<p>每個人都必須註冊 &#x2F; 登入，才能建立屬於自己的 Todo。</p>
<hr>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><blockquote>
<p>commit : install jwt plugin and implement auth feature</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/cbaf0b87023e4232ee25ca63cfe873dde4613b4a">Github 連結</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 16 - Firebase Storage 初探：輕鬆搞定專案檔案上傳前置作業</title>
    <url>/2025/09/30/Day16%20-%20Firebase-Intro/</url>
    <content><![CDATA[<p>在前幾天，我們的 API 主要處理「資料」的 CRUD。</p>
<p>但在真實專案裡，除了文字資料，<strong>圖片與檔案上傳</strong> 也幾乎是必備功能（例如：會員大頭貼、商品圖片、文章配圖）。</p>
<p>這時候，<strong>Firebase Storage</strong> 就能派上用場啦！</p>
<p>它是 Google 提供的雲端檔案儲存服務，適合開發者快速上手，特別適合 side project 或 prototype。</p>
<span id="more"></span>

<hr>
<h2 id="1-Firebase-Storage-是什麼？"><a href="#1-Firebase-Storage-是什麼？" class="headerlink" title="1. Firebase Storage 是什麼？"></a>1. Firebase Storage 是什麼？</h2><ul>
<li>由 Google Firebase 提供的 <strong>雲端物件儲存</strong> 服務</li>
<li>主要拿來存放 <strong>圖片、影片、音訊、PDF…</strong> 各種檔案</li>
<li>優點：<ul>
<li>直接綁 Firebase 專案（不用額外維護伺服器）</li>
<li>提供安全規則（Security Rules）控制誰能讀寫</li>
<li>有免費額度（適合 side project）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="2-建立-Firebase-專案-開啟-Storage"><a href="#2-建立-Firebase-專案-開啟-Storage" class="headerlink" title="2. 建立 Firebase 專案 &amp; 開啟 Storage"></a>2. 建立 Firebase 專案 &amp; 開啟 Storage</h2><h3 id="步驟一：建立-Firebase-專案"><a href="#步驟一：建立-Firebase-專案" class="headerlink" title="步驟一：建立 Firebase 專案"></a>步驟一：建立 Firebase 專案</h3><ol>
<li><p>前往 <a href="https://console.firebase.google.com/">Firebase Console</a> (點擊右上角 Go to console)</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/1-friebase.png?raw=true"></p>
</li>
<li><p>點擊<strong>建立新的 Firebase 專案</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/2-new-project.png?raw=true"></p>
</li>
<li><p>輸入專案名稱（例如：<code>iThome2025-storage-demo</code>）</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/3-project-name.png?raw=true"></p>
</li>
<li><p>完成建立後，就能進到專案儀表板</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/4-proj-dashboard.png?raw=true"></p>
</li>
</ol>
<h3 id="步驟二：啟用-Firebase-Storage"><a href="#步驟二：啟用-Firebase-Storage" class="headerlink" title="步驟二：啟用 Firebase Storage"></a>步驟二：啟用 Firebase Storage</h3><ol>
<li><p>在左側選單選 <strong>Storage</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/5-menu-storage.png?raw=true"></p>
</li>
<li><p>點擊 <strong>升級專案 (這邊會需要連接信用卡帳戶)</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/6-upgrade-proj.png?raw=true"></p>
</li>
<li><p>點擊連結帳戶 (免費額度：<strong>1 GB 儲存空間)</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/7-link-account.png?raw=true"></p>
</li>
<li><p>選擇地區（免付費位置）</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/8-choose-area.png?raw=true"></p>
</li>
<li><p>勾選以正式模式啟動</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/9-stander-start.png?raw=true"></p>
</li>
<li><p>完成後會自動建立一個 <strong>Bucket</strong>（其實就是一個儲存檔案的空間）</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/10-finish-bucket.png?raw=true"></p>
</li>
</ol>
<p>📌 之後我們的專案就會透過這個 bucket 來存取檔案。</p>
<hr>
<h2 id="3-專案設定與金鑰下載"><a href="#3-專案設定與金鑰下載" class="headerlink" title="3. 專案設定與金鑰下載"></a>3. 專案設定與金鑰下載</h2><ol>
<li><p>點擊小齒輪選專案設定</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/11-proj-setting.png?raw=true"></p>
</li>
<li><p>選擇服務帳戶 → Firebase Admin SDK → 選 Node.js → 產生新的私密金鑰</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/12-firebase-sdk.png?raw=true"></p>
</li>
<li><p>點擊產生金鑰後把這份 JSON 檔案保存好，後面會使用到 (<strong>金鑰不要存在公開的地方</strong>)</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/13-gen-key.png?raw=true"></p>
</li>
<li><p>JSON 檔案大致如下</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/14-json-file.png?raw=true"></p>
</li>
</ol>
<hr>
<h2 id="4-專案設定：-env-檔案"><a href="#4-專案設定：-env-檔案" class="headerlink" title="4. 專案設定：.env 檔案"></a>4. 專案設定：.env 檔案</h2><p>在 <code>.env</code> 檔案中設定環境變數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FIREBASE_SERVICE_ACCOUNT=&#123;放入將 JSON 檔案壓縮成一行的資訊&#125;</span><br><span class="line">FIREBASE_STORAGE_BUCKET=ithome2025-storage-demo.firebasestorage.app</span><br></pre></td></tr></table></figure>

<p>1.設定 <code>FIREBASE_SERVICE_ACCOUNT</code> → 小技巧 (將 JSON 檔案壓縮成一行)</p>
<p>VSCode → cmd+shift+P → Join Lines</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/15-join-lines.png?raw=true"></p>
<p>2.設定 <code>FIREBASE_STORAGE_BUCKET</code> → 點擊複製資料夾路徑 → 去除 (gs:&#x2F;&#x2F;)</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day16-Firebase/16-bucket-name.png?raw=true"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">ithome2025-storage-demo.firebasestorage.app</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-結語"><a href="#5-結語" class="headerlink" title="5.結語"></a>5.結語</h2><p>到這裡，我們已經把 Firebase Storage 的基礎環境準備好：</p>
<ul>
<li>建立 Firebase 專案</li>
<li>啟用 Storage 並建立 Bucket</li>
<li>下載服務金鑰 &amp; 設定 <code>.env</code></li>
</ul>
<p>換句話說，<strong>我們已經準備好讓專案具備「檔案上傳」的能力</strong>啦！ 🚀</p>
<p>不過今天還沒寫程式碼，先到這裡收尾。</p>
<p>明天 Day 17 ✨，我們會進入實戰，使用 <strong>Node.js + multer</strong> 串接 Firebase Storage，實際測試檔案上傳，並取得公開 URL。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 17 - Firebase Storage 實戰：用 Node.js + multer 上傳圖片到雲端</title>
    <url>/2025/10/01/Day17%20-%20Firebase-Multer/</url>
    <content><![CDATA[<p>昨天我們完成了 <strong>Firebase Storage 的環境設定</strong>：</p>
<ul>
<li>建立專案 &amp; Bucket</li>
<li>下載服務金鑰</li>
<li>設定 <code>.env</code></li>
</ul>
<p>今天就要正式進入<strong>實戰篇</strong>！</p>
<p>想像一下：現在我們的服務需要讓使用者可以上傳<strong>大頭貼</strong>。</p>
<p>那我們該怎麼做？</p>
<p>👉 就是用 <strong>Node.js + multer</strong> 串接 Firebase Storage，把檔案安全地存到雲端，最後產生一個公開可存取的 URL。</p>
<span id="more"></span>

<h3 id="步驟-1：安裝必要套件"><a href="#步驟-1：安裝必要套件" class="headerlink" title="步驟 1：安裝必要套件"></a><strong>步驟 1：安裝必要套件</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 核心套件</span></span><br><span class="line">npm install multer firebase-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># TypeScript 開發依賴（如果使用 TypeScript）</span></span><br><span class="line">npm install -D @types/multer</span><br></pre></td></tr></table></figure>

<p><strong>套件說明：</strong></p>
<ul>
<li><code>multer</code>: 處理 <code>multipart/form-data</code> 的文件上傳中間件</li>
<li><code>firebase-admin</code>: Firebase Admin SDK，用於操作 Firebase Storage</li>
</ul>
<hr>
<h3 id="步驟-2：設定環境變數-env"><a href="#步驟-2：設定環境變數-env" class="headerlink" title="步驟 2：設定環境變數 (.env)"></a><strong>步驟 2：設定環境變數 (.env)</strong></h3><p>在 <code>.env</code> 檔案中加入 Firebase 設定（詳細可參考 Day16 文章)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Firebase 設定</span></span><br><span class="line">FIREBASE_SERVICE_ACCOUNT=&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;service_account&quot;</span>,...,<span class="string">&quot;client_x509_cert_url&quot;</span>:<span class="string">&quot;xxx&gt;&quot;</span>&#125;</span><br><span class="line">FIREBASE_STORAGE_BUCKET=your-project.appspot.com</span><br></pre></td></tr></table></figure>

<p><strong>重要提醒：</strong></p>
<ul>
<li><code>FIREBASE_SERVICE_ACCOUNT</code> 必須是<strong>完整的 JSON 字串</strong>（單行）</li>
<li>記得把 <code>.env</code> 加入 <code>.gitignore</code>，避免洩漏金鑰</li>
</ul>
<hr>
<h3 id="步驟-3：新增-User-Entity-欄位"><a href="#步驟-3：新增-User-Entity-欄位" class="headerlink" title="步驟 3：新增 User Entity 欄位"></a><strong>步驟 3：新增 User Entity 欄位</strong></h3><p>在 <code>User.ts</code> 增加 <code>profileUrl</code>，用來存放大頭貼位址：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">@Entity()</span><br><span class="line">export class User <span class="punctuation">&#123;</span></span><br><span class="line">  @PrimaryGeneratedColumn(<span class="string">&quot;uuid&quot;</span>)</span><br><span class="line">  id!<span class="punctuation">:</span> string;</span><br><span class="line"></span><br><span class="line">  @Column(<span class="punctuation">&#123;</span> type<span class="punctuation">:</span> <span class="string">&quot;varchar&quot;</span><span class="punctuation">,</span> length<span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span> nullable<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span>)</span><br><span class="line">  name!<span class="punctuation">:</span> string;</span><br><span class="line"></span><br><span class="line">  @Column(<span class="punctuation">&#123;</span> type<span class="punctuation">:</span> <span class="string">&quot;varchar&quot;</span><span class="punctuation">,</span> length<span class="punctuation">:</span> <span class="number">320</span><span class="punctuation">,</span> unique<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> nullable<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span>)</span><br><span class="line">  email!<span class="punctuation">:</span> string;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  @Column(<span class="punctuation">&#123;</span> name<span class="punctuation">:</span> <span class="string">&quot;profile_url&quot;</span><span class="punctuation">,</span> length<span class="punctuation">:</span> <span class="number">2048</span><span class="punctuation">,</span> nullable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)</span><br><span class="line">  profileUrl?<span class="punctuation">:</span> string;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="步驟-4：建立-Firebase-工具檔-utils-firebaseUtils-ts"><a href="#步驟-4：建立-Firebase-工具檔-utils-firebaseUtils-ts" class="headerlink" title="步驟 4：建立 Firebase 工具檔 (utils&#x2F;firebaseUtils.ts)"></a><strong>步驟 4：建立 Firebase 工具檔 (utils&#x2F;firebaseUtils.ts)</strong></h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> admin <span class="keyword">from</span> <span class="string">&quot;firebase-admin&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析環境變數中的 JSON 字串</span></span><br><span class="line"><span class="keyword">const</span> serviceAccount = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(process.<span class="property">env</span>.<span class="property">FIREBASE_SERVICE_ACCOUNT</span>!);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Firebase Admin</span></span><br><span class="line">admin.<span class="title function_">initializeApp</span>(&#123;</span><br><span class="line">  <span class="attr">credential</span>: admin.<span class="property">credential</span>.<span class="title function_">cert</span>(serviceAccount),</span><br><span class="line">  <span class="attr">storageBucket</span>: process.<span class="property">env</span>.<span class="property">FIREBASE_STORAGE_BUCKET</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得 Storage Bucket</span></span><br><span class="line"><span class="keyword">const</span> bucket = admin.<span class="title function_">storage</span>().<span class="title function_">bucket</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; admin, bucket &#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="步驟-5：建立圖片上傳中間件-middleware-imageUpload-ts"><a href="#步驟-5：建立圖片上傳中間件-middleware-imageUpload-ts" class="headerlink" title="步驟 5：建立圖片上傳中間件 (middleware&#x2F;imageUpload.ts)"></a><strong>步驟 5：建立圖片上傳中間件 (middleware&#x2F;imageUpload.ts)</strong></h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multer <span class="keyword">from</span> <span class="string">&quot;multer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Express</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用記憶體儲存（不寫入硬碟）</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">memoryStorage</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檔案過濾器：只接受 JPG 和 PNG</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">imageFileFilter</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  file: Express.Multer.File,</span></span><br><span class="line"><span class="params">  cb: multer.FileFilterCallback</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ext = path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (![<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.png&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>].<span class="title function_">includes</span>(ext)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;只接受 JPG/PNG 格式的圖片檔案&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制：2 MB、JPG/PNG 格式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> imageUpload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">  storage,</span><br><span class="line">  <span class="attr">limits</span>: &#123; <span class="attr">fileSize</span>: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span> &#125;, <span class="comment">// 2 MB</span></span><br><span class="line">  <span class="attr">fileFilter</span>: imageFileFilter,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>設計重點：</strong></p>
<ul>
<li><code>memoryStorage()</code>: 檔案存在記憶體中（<code>req.file.buffer</code>），適合直接上傳到雲端</li>
<li><code>fileFilter</code>: 限制只接受圖片格式</li>
<li><code>limits</code>: 限制檔案大小為 2 MB</li>
</ul>
<hr>
<h3 id="步驟-6：建立上傳-Controller-controllers-uploadController-ts"><a href="#步驟-6：建立上傳-Controller-controllers-uploadController-ts" class="headerlink" title="步驟 6：建立上傳 Controller (controllers&#x2F;uploadController.ts)"></a><strong>步驟 6：建立上傳 Controller (controllers&#x2F;uploadController.ts)</strong></h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bucket &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/firebaseUtils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthRequest</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/isAuth&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/User&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上傳大頭照到 Firebase Storage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadAvatar</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: AuthRequest,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 檢查是否有上傳檔案</span></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;請選擇要上傳的圖片檔案&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 檢查使用者是否已登入</span></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">user</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;請先登入&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 產生遠端檔案路徑</span></span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">const</span> ext = path.<span class="title function_">extname</span>(req.<span class="property">file</span>.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">const</span> remotePath = <span class="string">`images/avatars/user-<span class="subst">$&#123;req.user.id&#125;</span>-<span class="subst">$&#123;timestamp&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 取得 Firebase Storage 檔案參考</span></span><br><span class="line">    <span class="keyword">const</span> file = bucket.<span class="title function_">file</span>(remotePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 建立寫入串流</span></span><br><span class="line">    <span class="keyword">const</span> stream = file.<span class="title function_">createWriteStream</span>(&#123;</span><br><span class="line">      <span class="attr">metadata</span>: &#123;</span><br><span class="line">        <span class="attr">contentType</span>: req.<span class="property">file</span>.<span class="property">mimetype</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 錯誤處理</span></span><br><span class="line">    stream.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title function_">next</span>(err));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 上傳完成後的處理</span></span><br><span class="line">    stream.<span class="title function_">on</span>(<span class="string">&quot;finish&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 設定檔案為公開存取</span></span><br><span class="line">        <span class="keyword">await</span> file.<span class="title function_">makePublic</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 產生公開 URL</span></span><br><span class="line">        <span class="keyword">const</span> publicUrl = <span class="string">`https://storage.googleapis.com/<span class="subst">$&#123;bucket.name&#125;</span>/<span class="subst">$&#123;remotePath&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 更新資料庫（根據你的 ORM/資料庫架構調整）</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">AppDataSource</span>.<span class="title function_">getRepository</span>(<span class="title class_">User</span>).<span class="title function_">update</span>(</span><br><span class="line">          &#123; <span class="attr">id</span>: req.<span class="property">user</span>?.<span class="property">id</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">profileUrl</span>: publicUrl &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9. 回傳成功訊息</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;大頭照上傳成功&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123; <span class="attr">avatarUrl</span>: publicUrl &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="title function_">next</span>(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 將檔案緩衝區寫入串流</span></span><br><span class="line">    stream.<span class="title function_">end</span>(req.<span class="property">file</span>.<span class="property">buffer</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="步驟-7：設定路由-routes-uploadRoutes-ts"><a href="#步驟-7：設定路由-routes-uploadRoutes-ts" class="headerlink" title="步驟 7：設定路由 (routes&#x2F;uploadRoutes.ts)"></a><strong>步驟 7：設定路由 (routes&#x2F;uploadRoutes.ts)</strong></h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; uploadAvatar &#125; <span class="keyword">from</span> <span class="string">&quot;../controllers/uploadController&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; imageUpload &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/imageUpload&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isAuth &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/isAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(</span><br><span class="line">  <span class="string">&quot;/avatar&quot;</span>,</span><br><span class="line">  isAuth, <span class="comment">// 1. 驗證 JWT token</span></span><br><span class="line">  imageUpload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), <span class="comment">// 2. 處理單一檔案上傳，欄位名稱為 &quot;file&quot;</span></span><br><span class="line">  uploadAvatar <span class="comment">// 3. 執行上傳邏輯</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<p><strong>中間件順序很重要：</strong></p>
<ol>
<li>先驗證使用者身份 (<code>isAuth</code>)</li>
<li>再處理檔案上傳 (<code>imageUpload.single(&quot;file&quot;)</code>)</li>
<li>最後執行業務邏輯 (<code>uploadAvatar</code>)</li>
</ol>
<hr>
<h3 id="步驟-8：註冊路由到主應用程式-app-ts"><a href="#步驟-8：註冊路由到主應用程式-app-ts" class="headerlink" title="步驟 8：註冊路由到主應用程式 (app.ts)"></a><strong>步驟 8：註冊路由到主應用程式 (app.ts)</strong></h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> uploadRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/uploadRoutes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他中間件設定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 註冊上傳路由</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/upload&quot;</span>, uploadRoutes); <span class="comment">// 上傳路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="步驟-9：上傳範例"><a href="#步驟-9：上傳範例" class="headerlink" title="步驟 9：上傳範例"></a><strong>步驟 9：上傳範例</strong></h3><p>使用 <strong>Postman</strong> 測試：</p>
<ol>
<li>選擇 <code>POST</code> 方法</li>
<li>URL: <code>http://localhost:3000/api/upload/avatar</code></li>
<li>Headers: <code>Authorization: Bearer YOUR_JWT_TOKEN</code></li>
<li>Body → form-data → Key: <code>file</code> (選擇 File 類型) → 選擇圖片</li>
</ol>
<p>經由 Postman 回傳結果可得知成功上傳！成功後就能拿到一個 Firebase Storage 的公開 URL 🎉</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day17-Firebase-Multer/1-postman.png?raw=true"></p>
<p>接著，查看一下資料庫 <code>profileUrl</code> 欄位 → 發現已經有正確的 URL 存入</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day17-Firebase-Multer/2-database.png?raw=true"></p>
<p>最後，再到我們的 Firebase Storage 查看檔案 :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day17-Firebase-Multer/3-firebase.png?raw=true"></p>
<p>太棒了！我們用 Node.js + multer 成功串接了 Firebase Storage 服務 🍻</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們完成了：</p>
<ul>
<li>使用 <code>multer</code> 處理圖片上傳</li>
<li>串接 Firebase Storage</li>
<li>把檔案存雲端並取得公開連結</li>
<li>更新資料庫，讓使用者能擁有自己的大頭貼</li>
</ul>
<p>到這裡，我們的服務具備了「圖片上傳」的能力！ 🚀</p>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><blockquote>
<p>commit : use multer and firebase storage to upload file</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/e46e7f49aa707b49da1f733534fd2747898974d1">Github 連結</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 18 - console.log 退役啦！Node.js Pino 帶你升級專案 Log</title>
    <url>/2025/10/02/Day18%20-%20NodeJS-Pino/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在寫程式的過程中，你是不是也常常這樣做？</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;資料有進來嗎？&quot;</span>, data);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;API 回傳結果：&quot;</span>, response);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;進到這裡了嗎？&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>👆 這些 <code>console.log</code> 幾乎是每個工程師的「人生必經之路」。它快速、直覺，甚至帶點安全感，因為我們可以立即知道程式有沒有跑到某一段。</p>
<p>不過，當專案越來越大、功能越來越複雜，<code>console.log</code> 的缺點就會暴露出來。今天，我們來聊聊什麼是「日誌 (log)」，以及它在專案中的價值，並實戰介紹一個超好用的 Node.js 日誌套件 <strong>Pino</strong> 。</p>
<span id="more"></span>

<hr>
<h2 id="為什麼需要日誌-Log-？"><a href="#為什麼需要日誌-Log-？" class="headerlink" title="為什麼需要日誌 (Log)？"></a>為什麼需要日誌 (Log)？</h2><p>在系統開發中，日誌就是程式的「黑盒子紀錄器」。它能幫助我們：</p>
<ul>
<li><strong>Debug 除錯</strong>：快速找到程式碼的執行狀況與錯誤來源。</li>
<li><strong>監控系統</strong>：觀察 API 請求、伺服器效能與錯誤比例。</li>
<li><strong>追蹤使用者行為</strong>：紀錄誰登入了系統、誰刪除了哪筆資料。</li>
<li><strong>預警通知</strong>：當錯誤異常增加時，可以觸發告警，馬上通知工程師。</li>
</ul>
<p>簡單來說，log 是專案穩定性和維運效率的「關鍵後盾」。</p>
<hr>
<h2 id="console-log-的問題"><a href="#console-log-的問題" class="headerlink" title="console.log 的問題"></a><code>console.log</code> 的問題</h2><p>雖然 <code>console.log</code> 很方便，但它在大型專案中有許多限制：</p>
<ol>
<li><strong>沒有層級</strong>：錯誤與提示長得一樣，難以過濾。</li>
<li><strong>缺乏結構</strong>：只會印文字，不利於後續分析。</li>
<li><strong>難以集中管理</strong>：如有多台伺服器各印 log 的情況，較難彙整。</li>
<li><strong>效能問題</strong>：高併發環境下，<code>console.log</code> 會拖慢程式速度。</li>
</ol>
<p>所以，我們需要一個更專業的解決方案：<strong>Pino</strong>。</p>
<hr>
<h2 id="Pino-是什麼？"><a href="#Pino-是什麼？" class="headerlink" title="Pino 是什麼？"></a>Pino 是什麼？</h2><p><code>Pino</code> 是目前 Node.js 生態中最熱門的日誌套件之一，特色包括：</p>
<ul>
<li><strong>效能超快</strong>（比 winston 快 5–10 倍）。</li>
<li><strong>預設 JSON 格式</strong>，方便集中管理（如 Grafana Loki）。</li>
<li><strong>開發模式友善</strong>，可搭配 <code>pino-pretty</code> 輸出彩色、人類可讀的 log。</li>
<li><strong>支援多層級</strong>（info、warn、error、debug…），避免訊息混雜。</li>
</ul>
<p>接下來就實戰，帶你把專案的 <code>console.log</code> 全部升級成 Pino 吧！</p>
<hr>
<h2 id="步驟-1：安裝套件-📦"><a href="#步驟-1：安裝套件-📦" class="headerlink" title="步驟 1：安裝套件 📦"></a>步驟 1：安裝套件 📦</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pino</span><br><span class="line">npm install -D pino-pretty @types/pino</span><br></pre></td></tr></table></figure>

<p><strong>套件說明：</strong></p>
<ul>
<li><code>pino</code>：主要的日誌記錄套件。</li>
<li><code>pino-pretty</code>：開發環境用的美化輸出工具（devDependencies）。</li>
<li><code>@types/pino</code>：TypeScript 型別定義。</li>
</ul>
<hr>
<h2 id="步驟-2：建立-Logger-配置-📝"><a href="#步驟-2：建立-Logger-配置-📝" class="headerlink" title="步驟 2：建立 Logger 配置 📝"></a>步驟 2：建立 Logger 配置 📝</h2><p>在 <code>src/utils/logger.ts</code> 中建立一個共用的 logger：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pino <span class="keyword">from</span> <span class="string">&quot;pino&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判斷是否為開發環境</span></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 logger 實例</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="title function_">pino</span>(&#123;</span><br><span class="line">  <span class="attr">level</span>: process.<span class="property">env</span>.<span class="property">LOG_LEVEL</span> || <span class="string">&quot;info&quot;</span>,</span><br><span class="line">  <span class="attr">transport</span>: isDevelopment</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;pino-pretty&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">colorize</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">translateTime</span>: <span class="string">&quot;SYS:yyyy-mm-dd HH:MM:ss&quot;</span>,</span><br><span class="line">          <span class="attr">ignore</span>: <span class="string">&quot;pid,hostname&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="literal">undefined</span>, <span class="comment">// 生產環境直接輸出 JSON</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> logger;</span><br></pre></td></tr></table></figure>

<p>這樣，我們就有一個可以隨時呼叫的 <code>logger</code>，而且會根據環境自動調整輸出格式。</p>
<hr>
<h2 id="步驟-3：在-app-ts-使用-Logger-🚀"><a href="#步驟-3：在-app-ts-使用-Logger-🚀" class="headerlink" title="步驟 3：在 app.ts 使用 Logger 🚀"></a>步驟 3：在 app.ts 使用 Logger 🚀</h2><p>修改 <code>app.ts</code>，測試不同級別的日誌：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/todoRoutes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> authRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/authRoutes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> uploadRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/uploadRoutes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&quot;./utils/logger&quot;</span>; <span class="comment">// 導入 logger</span></span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試不同級別的日誌</span></span><br><span class="line">logger.<span class="title function_">info</span>(<span class="string">&quot;這是一般資訊&quot;</span>);</span><br><span class="line">logger.<span class="title function_">debug</span>(<span class="string">&quot;這是除錯訊息&quot;</span>);</span><br><span class="line">logger.<span class="title function_">warn</span>(<span class="string">&quot;這是警告&quot;</span>);</span><br><span class="line">logger.<span class="title function_">error</span>(<span class="string">&quot;這是錯誤&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/todos&quot;</span>, todoRoutes);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/auth&quot;</span>, authRoutes);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/upload&quot;</span>, uploadRoutes);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, iThome 2025!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppDataSource</span>.<span class="title function_">initialize</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    logger.<span class="title function_">info</span>(<span class="string">&quot;📦 DB Connected!&quot;</span>);</span><br><span class="line">    app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      logger.<span class="title function_">info</span>(<span class="string">`🚀 Server running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    logger.<span class="title function_">error</span>(&#123; err &#125;, <span class="string">&quot;❌ DB connection failed:&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>不同級別的日誌測試結果 :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day18-Pino/1-log-test.png?raw=true"></p>
<hr>
<h2 id="步驟-4：HTTP-Request-Logger-中間件-🔍"><a href="#步驟-4：HTTP-Request-Logger-中間件-🔍" class="headerlink" title="步驟 4：HTTP Request Logger 中間件 🔍"></a>步驟 4：HTTP Request Logger 中間件 🔍</h2><p>想要紀錄 API 請求？加上 <code>pino-http</code> 就搞定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pino-http</span><br></pre></td></tr></table></figure>

<p>在 <code>app.ts</code> 加入：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pinoHttp <span class="keyword">from</span> <span class="string">&quot;pino-http&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">pinoHttp</span>(&#123; logger &#125;));</span><br></pre></td></tr></table></figure>

<p>這樣，每一次 API 請求和回應都會自動被記錄。</p>
<hr>
<h2 id="步驟-5：在-Controller-中使用-Logger-💡"><a href="#步驟-5：在-Controller-中使用-Logger-💡" class="headerlink" title="步驟 5：在 Controller 中使用 Logger 💡"></a>步驟 5：在 Controller 中使用 Logger 💡</h2><p>在任何檔案都能這樣呼叫：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">&quot;../utils/logger&quot;</span>;</span><br><span class="line"></span><br><span class="line">logger.<span class="title function_">info</span>(<span class="string">&quot;一般資訊&quot;</span>);</span><br><span class="line">logger.<span class="title function_">debug</span>(<span class="string">&quot;除錯訊息&quot;</span>);</span><br><span class="line">logger.<span class="title function_">warn</span>(<span class="string">&quot;警告訊息&quot;</span>);</span><br><span class="line">logger.<span class="title function_">error</span>(<span class="string">&quot;錯誤訊息&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="實際測試"><a href="#實際測試" class="headerlink" title="實際測試"></a>實際測試</h2><p>當我們新增一個 Todo 時，log 會長這樣：(紀錄 API 請求和回應)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">2025</span><span class="number">-10</span><span class="number">-02</span> <span class="number">15</span><span class="punctuation">:</span><span class="number">34</span><span class="punctuation">:</span><span class="number">09</span><span class="punctuation">]</span> INFO<span class="punctuation">:</span> request completed</span><br><span class="line">    req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POST&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/api/todos&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;params&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;authorization&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer &lt;token&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user-agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PostmanRuntime/7.48.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;accept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;postman-token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;77cca9bc-0c90-4539-9df1-923e409eddc7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost:3000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;accept-encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate, br&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keep-alive&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content-length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;38&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remoteAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;::1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;remotePort&quot;</span><span class="punctuation">:</span> <span class="number">63412</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    res<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;statusCode&quot;</span><span class="punctuation">:</span> <span class="number">201</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;x-powered-by&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Express&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json; charset=utf-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content-length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;245&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;etag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;W/\&quot;f5-HbNtbBTEZGIV/ZC0+J4ggDvV1Qo\&quot;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    responseTime<span class="punctuation">:</span> <span class="number">1033</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="額外提示-💡"><a href="#額外提示-💡" class="headerlink" title="額外提示 💡"></a>額外提示 💡</h2><ol>
<li><p><strong>環境變數</strong></p>
<p>在 <code>.env</code> 檔設定 log 層級：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOG_LEVEL=debug</span><br><span class="line">NODE_ENV=development</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日誌層級順序（低 → 高）</strong></p>
<p><code>trace &lt; debug &lt; info &lt; warn &lt; error &lt; fatal</code></p>
</li>
<li><p><strong>生產環境建議</strong></p>
<ul>
<li>輸出 JSON 格式（方便集中收集）。</li>
<li>搭配 log 管理工具（如 Grafana Loki）。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li><code>console.log</code> 缺乏層級、結構化，中大型系統維護上較難。</li>
<li><strong>Pino</strong> 提供高效能、結構化、可擴展的 log 解決方案。</li>
<li>透過層級、格式化、HTTP 中間件，我們能輕鬆掌握系統健康狀況。</li>
</ul>
<p>👉 從今天開始，讓我們跟 <code>console.log</code> 說掰掰，迎接更專業的日誌管理吧！</p>
<hr>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><blockquote>
<p>commit : add pino plugin</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/1fd0dd5fc31366fb503f98116fd2ab2166647263">Github 連結</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 19 - 專案升級必備：資料庫 Migration 實戰</title>
    <url>/2025/10/03/Day19%20-%20NodeJS-Migration/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在專案開發時，我們常常會遇到「資料庫 Schema 需要修改」的情況。</p>
<p>例如新增欄位、刪除欄位、或是調整欄位型別。</p>
<p>最直覺的方式是 —— 直接改 Entity，然後靠 TypeORM 的 <code>synchronize: true</code> 來自動同步。</p>
<p>但是，這樣做真的安全嗎？ 🤔</p>
<span id="more"></span>

<hr>
<h2 id="⚠️-synchronize-true-的隱藏風險"><a href="#⚠️-synchronize-true-的隱藏風險" class="headerlink" title="⚠️ synchronize: true 的隱藏風險"></a>⚠️ <code>synchronize: true</code> 的隱藏風險</h2><p>在 <code>DataSource</code> 設定中，大家應該都看過這段：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">synchronize</span>: <span class="literal">true</span>, <span class="comment">// 開發階段方便，正式環境建議 false</span></span><br></pre></td></tr></table></figure>

<p>這個參數會讓 TypeORM 在每次啟動專案時，自動比對 Entity 與資料庫結構，並「直接修改資料庫」。</p>
<p><strong>好處：</strong></p>
<ul>
<li>開發初期很快：改 <code>User.ts</code> 或 <code>Todo.ts</code>，資料庫自動更新。</li>
<li>不需要寫 SQL，完全自動化。</li>
</ul>
<p><strong>壞處：</strong></p>
<ol>
<li><strong>資料可能直接被刪掉</strong>：欄位名稱改了，TypeORM 可能直接 drop + recreate table。</li>
<li><strong>多人協作很危險</strong>：大家本地 Entity 不一致 → DB schema 會亂掉。</li>
<li><strong>Production 大忌</strong>：上線環境如果還開 <code>synchronize: true</code>，一個小改動就可能讓線上資料消失。</li>
</ol>
<p>👉 這就是我們需要 Migration 的理由。</p>
<hr>
<h2 id="為什麼要用-Migration？"><a href="#為什麼要用-Migration？" class="headerlink" title="為什麼要用 Migration？"></a>為什麼要用 Migration？</h2><p>Migration 就像「資料庫的 Git」，能幫助我們做到：</p>
<ul>
<li><strong>版本控制</strong>：每次改動都被記錄下來。</li>
<li><strong>可回滾</strong>：跑錯了可以 revert。</li>
<li><strong>多人協作</strong>：大家跑同一份 Migration，確保一致性。</li>
<li><strong>安全上線</strong>：Production 可以放心執行，避免不可預期的自動修改。</li>
</ul>
<hr>
<h2 id="Migration-實戰：導入-Migration-的步驟"><a href="#Migration-實戰：導入-Migration-的步驟" class="headerlink" title="Migration 實戰：導入 Migration 的步驟"></a>Migration 實戰：導入 Migration 的步驟</h2><h3 id="第-1-步：在-package-json-添加-Migration-指令"><a href="#第-1-步：在-package-json-添加-Migration-指令" class="headerlink" title="第 1 步：在 package.json 添加 Migration 指令"></a>第 1 步：在 <code>package.json</code> 添加 Migration 指令</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node-dev src/app.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;src/**/*.&#123;js,ts&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;format:check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --check \&quot;src/**/*.&#123;js,ts&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;src/**/*.ts\&quot; --format=stylish&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;src/**/*.ts\&quot; --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;migration:generate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typeorm-ts-node-commonjs migration:generate -d src/config/db.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;migration:run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typeorm-ts-node-commonjs migration:run -d src/config/db.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;migration:revert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typeorm-ts-node-commonjs migration:revert -d src/config/db.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;migration:show&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typeorm-ts-node-commonjs migration:show -d src/config/db.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第-2-步：建立-migrations-資料夾"><a href="#第-2-步：建立-migrations-資料夾" class="headerlink" title="第 2 步：建立 migrations 資料夾"></a>第 2 步：建立 <code>migrations</code> 資料夾</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p src/migrations</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第-3-步：修改-src-config-db-ts"><a href="#第-3-步：修改-src-config-db-ts" class="headerlink" title="第 3 步：修改 src/config/db.ts"></a>第 3 步：修改 <code>src/config/db.ts</code></h3><p>將 <code>synchronize</code> 改為 <code>false</code>，並加入 migration 設定：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/Todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/User&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppDataSource</span> = <span class="keyword">new</span> <span class="title class_">DataSource</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span>),</span><br><span class="line">  <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">DB_USERNAME</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">ssl</span>: &#123; <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="title class_">Todo</span>, <span class="title class_">User</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">false</span>, <span class="comment">// ⚠️ 改為 false，改用 migration 管理</span></span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">migrations</span>: [<span class="string">&quot;src/migrations/**/*.ts&quot;</span>], <span class="comment">// 📁 migration 檔案路徑</span></span><br><span class="line">  <span class="attr">migrationsTableName</span>: <span class="string">&quot;migrations_history&quot;</span>, <span class="comment">// 📊 migration 歷史記錄表名稱</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第-4-步：生成初始-Migration"><a href="#第-4-步：生成初始-Migration" class="headerlink" title="第 4 步：生成初始 Migration"></a>第 4 步：生成初始 Migration</h3><p>如果之前用 <code>synchronize: true</code> 已經有資料表，建議先清空，再重新用 migration 建立。</p>
<p>清空方式如下: (Dbeaver 選取 Table 右鍵點擊 Delete)</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/1-db-delete-table.png?raw=true"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run migration:generate src/migrations/InitialMigration</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/2-init-migration.png?raw=true"></p>
<p>這會生成一個 migration 檔案，內容類似這樣：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MigrationInterface</span>, <span class="title class_">QueryRunner</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InitialMigration1759480233749</span> <span class="keyword">implements</span> <span class="title class_">MigrationInterface</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;InitialMigration1759480233749&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">up</span>(<span class="attr">queryRunner</span>: <span class="title class_">QueryRunner</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`CREATE TABLE &quot;user&quot; (...)`</span>);</span><br><span class="line">    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`CREATE TABLE &quot;todo&quot; (...)`</span>);</span><br><span class="line">    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`ALTER TABLE &quot;todo&quot; ADD CONSTRAINT ...`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">down</span>(<span class="attr">queryRunner</span>: <span class="title class_">QueryRunner</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`ALTER TABLE &quot;todo&quot; DROP CONSTRAINT ...`</span>);</span><br><span class="line">    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`DROP TABLE &quot;todo&quot;`</span>);</span><br><span class="line">    <span class="keyword">await</span> queryRunner.<span class="title function_">query</span>(<span class="string">`DROP TABLE &quot;user&quot;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第-5-步：執行-Migration"><a href="#第-5-步：執行-Migration" class="headerlink" title="第 5 步：執行 Migration"></a>第 5 步：執行 Migration</h3><p>執行前可以先查看一下狀態</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run migration:show   <span class="comment"># 查看狀態</span></span><br></pre></td></tr></table></figure>

<p>可以發現有偵測到一個 migration 檔案尚未執行</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/3-migration-show.png?raw=true"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run migration:run    <span class="comment"># 執行 migration</span></span><br></pre></td></tr></table></figure>

<p>下圖為 migration 檔案執行結果 :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/4-migration-run.png?raw=true"></p>
<p>然後可以到資料庫查看目前狀況 :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/5-db-after-migration.png?raw=true"></p>
<p>可發現多了一張 migrations_history 表，這是用來記錄 migration 的資訊</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/6-migration-table.png?raw=true"></p>
<hr>
<h3 id="第-6-步：其他常用指令"><a href="#第-6-步：其他常用指令" class="headerlink" title="第 6 步：其他常用指令"></a>第 6 步：其他常用指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回退最後一次 migration</span></span><br><span class="line">npm run migration:revert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 Entity 後，重新生成 migration</span></span><br><span class="line">npm run migration:generate src/migrations/你的Migration名稱</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="完整工作流程範例"><a href="#完整工作流程範例" class="headerlink" title="完整工作流程範例"></a>完整工作流程範例</h2><ol>
<li><p><strong>首次設定</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p src/migrations</span><br><span class="line">npm run migration:generate src/migrations/InitialMigration</span><br><span class="line">npm run migration:run</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>未來修改 Entity 後 (這邊舉例在 User.ts Entity 加上一個 phone 欄位)</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Entity()</span><br><span class="line"><span class="built_in">export</span> class User &#123;</span><br><span class="line">  @PrimaryGeneratedColumn(<span class="string">&quot;uuid&quot;</span>)</span><br><span class="line">  <span class="built_in">id</span>!: string;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">  @Column(&#123; <span class="built_in">type</span>: <span class="string">&quot;varchar&quot;</span>, length: 10, nullable: <span class="literal">true</span> &#125;)</span><br><span class="line">  phone?: string;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行下方指令生成 migration 檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run migration:generate src/migrations/AddPhoneToUser</span><br></pre></td></tr></table></figure>

<p>生成結果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import &#123; MigrationInterface, QueryRunner &#125; from <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> class AddPhoneToUser1759482580830 implements MigrationInterface &#123;</span><br><span class="line">    name = <span class="string">&#x27;AddPhoneToUser1759482580830&#x27;</span></span><br><span class="line"></span><br><span class="line">    public async up(queryRunner: QueryRunner): Promise&lt;void&gt; &#123;</span><br><span class="line">        await queryRunner.query(`ALTER TABLE <span class="string">&quot;user&quot;</span> ADD <span class="string">&quot;phone&quot;</span> character varying(10)`);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public async down(queryRunner: QueryRunner): Promise&lt;void&gt; &#123;</span><br><span class="line">        await queryRunner.query(`ALTER TABLE <span class="string">&quot;user&quot;</span> DROP COLUMN <span class="string">&quot;phone&quot;</span>`);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>執行下方指令執行 migration 檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run migration:run</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/7-migration-add-phone-col.png?raw=true"></p>
<p>可查看資料庫新增了 phone 欄位在最尾端</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day19-Migration/8-db-result.png?raw=true"></p>
<p>成功執行 migration 啦 🎉</p>
</li>
<li><p><strong>如果需要回退</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run migration:revert</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="Migration-開發流程"><a href="#Migration-開發流程" class="headerlink" title="Migration 開發流程"></a>Migration 開發流程</h2><ol>
<li>修改&#x2F;新增 Entity</li>
<li>建立對應的 Migration</li>
<li>在本地測試 <code>migration:run</code></li>
<li>Commit Migration 檔案 → 其他人同步</li>
<li>部署時，CI&#x2F;CD 自動跑 Migration</li>
</ol>
<hr>
<h2 id="🔑-小提醒-Best-Practice"><a href="#🔑-小提醒-Best-Practice" class="headerlink" title="🔑 小提醒 &amp; Best Practice"></a>🔑 小提醒 &amp; Best Practice</h2><ul>
<li><strong>開發可以先用 <code>synchronize: true</code>，但正式專案要關掉。</strong></li>
<li>每個 Migration 檔案盡量只做「一件事」（新增欄位、刪表、調型別）。</li>
<li>Migration 檔案要 <strong>一起 Commit</strong>，不然別人會少版本。</li>
<li>別忘了 <code>migration:revert</code> 可以救命 🙌。</li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p><code>synchronize: true</code> 很方便，但就像「測試環境的捷徑」，不能拿到 Production。</p>
<p>真正穩定的專案，必須靠 <strong>Migration</strong> 來管理資料庫版本。 🚀</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><blockquote>
<p>commit : disable synchronize and setup migration scripts</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/d0f8a0c22be61f2b2487a0db5dbaa23df09c1d94">Github 連結</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 2 - 為什麼要用 TypeScript 開發 Node.js？（價值、趨勢）</title>
    <url>/2025/09/16/Day2%20-%20Why%20use%20TypeScript/</url>
    <content><![CDATA[<p>在開始之前，先讓我們來談談今天的主角 —— <strong>TypeScript</strong>。</p>
<p>許多人在接觸 TypeScript 的第一反應是：「這不就是 JavaScript 加上型別嗎？」沒錯，這句話雖然簡化了很多細節，但卻說中了核心。TypeScript 本質上就是 <strong>JavaScript 的超集（superset）</strong>，它在 JavaScript 的基礎上加上了型別系統與一些進階語法糖，讓開發者能寫出更可靠、更可維護的程式。</p>
<span id="more"></span>

<hr>
<h2 id="一、TypeScript-簡介與發展歷史"><a href="#一、TypeScript-簡介與發展歷史" class="headerlink" title="一、TypeScript 簡介與發展歷史"></a>一、TypeScript 簡介與發展歷史</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day2/typescript-officle.png?raw=true"></p>
<p>TypeScript 由 <strong>微軟（Microsoft）</strong> 團隊在 <strong>2012 年</strong>發表，設計之父是著名的程式語言專家 <strong>Anders Hejlsberg</strong>，他同時也是 C# 的主要設計者。當時 JavaScript 在大型專案中經常遇到可維護性與錯誤檢查的瓶頸，因此 TypeScript 誕生的目標就是：</p>
<p>👉 <strong>讓 JavaScript 更適合大型專案的開發</strong>。</p>
<p>隨著前端框架（Angular、React、Vue）逐漸壯大，以及 Node.js 進軍後端，TypeScript 的生態圈也迅速擴展。</p>
<hr>
<h2 id="二、TypeScript-與-JavaScript-的關係"><a href="#二、TypeScript-與-JavaScript-的關係" class="headerlink" title="二、TypeScript 與 JavaScript 的關係"></a>二、TypeScript 與 JavaScript 的關係</h2><p>可以把 TypeScript 想成是 <strong>加強版的 JavaScript</strong>。</p>
<ul>
<li><strong>JavaScript</strong>：瀏覽器和 Node.js 都能直接執行的語言。</li>
<li><strong>TypeScript</strong>：在 JavaScript 的基礎上，增加了 <strong>型別系統</strong>、<strong>介面（interface）</strong>、<strong>泛型（generics）</strong> 等功能。</li>
</ul>
<p>所有 TypeScript 程式碼最終都會被「編譯（<strong>compile</strong>）」成純 JavaScript，才能在 Node.js 或瀏覽器中執行。換句話說：</p>
<p>💡 <strong>任何合法的 JavaScript 程式碼，本身就是合法的 TypeScript 程式碼。</strong></p>
<hr>
<h2 id="三、TypeScript-的優點"><a href="#三、TypeScript-的優點" class="headerlink" title="三、TypeScript 的優點"></a>三、TypeScript 的優點</h2><p>那麼 TypeScript 到底解決了什麼痛點呢？以下列幾個主要優點：</p>
<ol>
<li><strong>靜態型別檢查</strong><ul>
<li>在編譯階段就能發現型別錯誤，減少 runtime bug。</li>
<li>例如：<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line">age = <span class="string">&quot;twenty-five&quot;</span>; <span class="comment">// 編譯錯誤！</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>更好的 IDE 支援</strong><ul>
<li>自動補全、即時型別提示與錯誤檢查，都比純 JavaScript 更精準。</li>
<li>這能大幅提升開發體驗，尤其在大型專案中。</li>
</ul>
</li>
<li><strong>程式結構更清晰</strong><ul>
<li>使用 interface、type、enum 可以清楚描述資料結構，團隊成員更容易理解。</li>
</ul>
</li>
<li><strong>降低維護成本</strong><ul>
<li>型別提示與嚴格檢查，讓新成員接手專案更容易上手，也避免「看名字猜型別」的情況。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="四、為什麼要用-TypeScript-開發-Node-js？（價值與趨勢）"><a href="#四、為什麼要用-TypeScript-開發-Node-js？（價值與趨勢）" class="headerlink" title="四、為什麼要用 TypeScript 開發 Node.js？（價值與趨勢）"></a>四、為什麼要用 TypeScript 開發 Node.js？（價值與趨勢）</h2><p>很多人會問：</p>
<blockquote>
<p>Node.js 已經用 JavaScript 就能開發了，為什麼還要多學一個 TypeScript？</p>
</blockquote>
<p>理由其實很簡單，歸納成兩個關鍵字：<strong>價值</strong>與<strong>趨勢</strong>。</p>
<h3 id="1-價值"><a href="#1-價值" class="headerlink" title="1. 價值"></a>1. 價值</h3><ul>
<li><strong>提升專案可靠度</strong>：伺服器端通常牽涉到資料庫、API、使用者資料，任何錯誤都可能導致重大問題。TypeScript 的型別檢查能大幅降低這種風險。</li>
<li><strong>更好的團隊協作</strong>：Node.js 專案通常不是一人獨自開發，而是多人協作。TypeScript 的型別定義就是團隊之間的「契約（contract）」，避免誤解。</li>
<li><strong>長期維護更輕鬆</strong>：後端系統常常需要跑好幾年，TypeScript 能讓專案在 1 年、3 年後依然可讀、可維護。</li>
</ul>
<h3 id="2-趨勢"><a href="#2-趨勢" class="headerlink" title="2. 趨勢"></a>2. 趨勢</h3><ul>
<li><strong>主流框架全面支援</strong>：像是 NestJS、Next.js 都是以 TypeScript 為核心打造。</li>
<li><strong>開發者市場需求</strong>：求職網站上，TypeScript 幾乎已經是 Node.js 工程師的必備技能。</li>
<li><strong>生態系成熟</strong>：越來越多 npm 套件都提供官方的型別定義，不再需要自己額外補齊。</li>
</ul>
<p>換句話說，現在的 TypeScript 已經不是「可有可無的加分題」，而是 Node.js 開發中逐漸成為「基本配備」的技能。</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總結來說，TypeScript 不是要取代 JavaScript，而是要 <strong>讓 JavaScript 更適合在大型、長期、多人協作的專案中發光發熱</strong>。</p>
<p>在 Node.js 的後端開發世界，可靠性、維護性與可擴展性是第一優先，而這正是 TypeScript 最擅長的領域。</p>
<p>所以，與其問「為什麼要用 TypeScript？」更應該問的是：</p>
<p>👉 <strong>如果不用 TypeScript，我會損失什麼？</strong></p>
<p>在未來的系列文章裡，我們會先介紹一些 TypeScript 基礎，然後一步一步示範，如何把 TypeScript 和 Node.js 結合起來，打造一個專案級的開發環境 🚀。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 20 - 從 0 到自動化：開啟你的第一個 GitHub Actions 旅程</title>
    <url>/2025/10/04/Day20%20-%20Github-Actions/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在專案開發的過程中，常常會遇到這種情況：</p>
<ul>
<li>有時候是忘了跑 ESLint，專案裡到處都是紅線。</li>
<li>有時候是格式亂掉，Prettier 沒跑，code review 變成「排版大戰」。</li>
<li>更慘的是，大家都說「我電腦可以跑」，結果一併到 main 就全壞。</li>
</ul>
<p>這些其實都不是誰的錯，而是我們缺少一個「自動幫我們檢查」的機制。</p>
<p>👉 這就是 <strong>CI&#x2F;CD</strong> 登場的時候：</p>
<p>它就像一個不會喊累的機器人，每次你 push 或發 PR，就自動幫你檢查、測試、甚至部署。</p>
<p>今天，我們就來用 <strong>GitHub Actions</strong> 簡單幫專案加上這個「自動守護者」，開啟 CI&#x2F;CD 的第一步！</p>
<span id="more"></span>

<hr>
<h2 id="CI-CD-是什麼？有啥好處"><a href="#CI-CD-是什麼？有啥好處" class="headerlink" title="CI &#x2F; CD 是什麼？有啥好處"></a>CI &#x2F; CD 是什麼？有啥好處</h2><ul>
<li><strong>CI（Continuous Integration，持續整合）</strong><br>每次 push 或 PR 時，自動跑測試、檢查程式碼，確保專案隨時健康。<br><strong>好處</strong>：快速發現 bug、避免合併衝突、提升專案穩定度。</li>
<li><strong>CD（Continuous Delivery &#x2F; Deployment，持續交付&#x2F;部署）</strong><ul>
<li>Delivery：確保程式隨時可以部署（但最後一步通常人工按下去）。</li>
<li>Deployment：自動一路推到正式環境。<br><strong>好處</strong>：讓產品更新流程更快、更穩、更少人為失誤。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="什麼是-GitHub-Actions？"><a href="#什麼是-GitHub-Actions？" class="headerlink" title="什麼是 GitHub Actions？"></a>什麼是 GitHub Actions？</h2><p><strong>GitHub Actions</strong> 是 GitHub 提供的 <strong>自動化工作流程服務</strong>，可以在 push、PR、發版 tag 等事件觸發時，執行你定義的工作，例如：</p>
<ul>
<li>跑 <strong>Lint &#x2F; Test &#x2F; Build</strong></li>
<li>自動部署到 Render、Vercel、AWS</li>
<li>發送通知到 Slack &#x2F; Discord</li>
</ul>
<hr>
<h2 id="同類型工具有哪些？"><a href="#同類型工具有哪些？" class="headerlink" title="同類型工具有哪些？"></a>同類型工具有哪些？</h2><p>除了 GitHub Actions，常見的 CI&#x2F;CD 工具有：</p>
<ul>
<li><strong>GitLab CI&#x2F;CD</strong> – 和 GitHub Actions 很像，但內建在 GitLab。</li>
<li><strong>CircleCI &#x2F; Travis CI</strong> – 早期很流行的雲端服務。</li>
<li><strong>Jenkins</strong> – 傳統自架 CI&#x2F;CD 工具，彈性高但維護成本大。</li>
</ul>
<hr>
<h2 id="✨-為何選擇-GitHub-Actions-入門？"><a href="#✨-為何選擇-GitHub-Actions-入門？" class="headerlink" title="✨ 為何選擇 GitHub Actions 入門？"></a>✨ 為何選擇 GitHub Actions 入門？</h2><ul>
<li><strong>零門檻整合</strong>：Repo 在 GitHub，就能直接用。</li>
<li><strong>社群豐富</strong>：Marketplace 上有各種現成 actions。</li>
<li><strong>免費額度夠用</strong>：對個人專案和開源很友善。</li>
<li><strong>YAML 配置直覺</strong>：學一次就能套用到其他專案。</li>
</ul>
<hr>
<h2 id="GitHub-Actions-只負責-CI-嗎？"><a href="#GitHub-Actions-只負責-CI-嗎？" class="headerlink" title="GitHub Actions 只負責 CI 嗎？"></a>GitHub Actions 只負責 CI 嗎？</h2><p>不是！</p>
<ul>
<li>它可以跑 <strong>CI（測試 &#x2F; 檢查 &#x2F; 編譯）</strong>。</li>
<li>也能做 <strong>CD（自動部署）</strong>。</li>
</ul>
<p>今天我們先聚焦在 <strong>CI 自動化檢查</strong>，讓專案更安全。</p>
<hr>
<h2 id="🛠️-實戰步驟"><a href="#🛠️-實戰步驟" class="headerlink" title="🛠️ 實戰步驟"></a>🛠️ 實戰步驟</h2><h3 id="步驟一：創建-GitHub-Actions-工作流程目錄"><a href="#步驟一：創建-GitHub-Actions-工作流程目錄" class="headerlink" title="步驟一：創建 GitHub Actions 工作流程目錄"></a><strong>步驟一：創建 GitHub Actions 工作流程目錄</strong></h3><p>首先，在專案根目錄創建 <code>.github/workflows</code> 資料夾。</p>
<hr>
<h3 id="步驟二：創建-CI-Workflow-文件"><a href="#步驟二：創建-CI-Workflow-文件" class="headerlink" title="步驟二：創建 CI Workflow 文件"></a><strong>步驟二：創建 CI Workflow 文件</strong></h3><p>我們建立一個最簡單的 GitHub Actions workflow，包含以下檢查：</p>
<ul>
<li>✅ 代碼風格檢查 (ESLint)</li>
<li>✅ 格式檢查 (Prettier)</li>
<li>✅ TypeScript 編譯檢查</li>
</ul>
<p>在剛剛建立的資料夾底下建立 <code>ci.yml</code>檔案內容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 觸發條件：當有程式碼推送到任何分支，或有 Pull Request 時</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;**&quot;</span>]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;**&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 代碼品質檢查工作</span></span><br><span class="line">  <span class="attr">code-quality:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 步驟 1: 檢出程式碼</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">📥</span> <span class="string">檢出程式碼</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 步驟 2: 設置 Node.js 環境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">📦</span> <span class="string">設置</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;20.17.0&quot;</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 步驟 3: 安裝依賴</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">📚</span> <span class="string">安裝依賴套件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 步驟 4: 執行 Prettier 格式檢查</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">🎨</span> <span class="string">檢查程式碼格式</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">format:check</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 步驟 5: 執行 ESLint 檢查</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">🔍</span> <span class="string">執行</span> <span class="string">ESLint</span> <span class="string">檢查</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">lint</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 步驟 6: TypeScript 編譯檢查</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">🔨</span> <span class="string">TypeScript</span> <span class="string">編譯檢查</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">tsc</span> <span class="string">--noEmit</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="詳細說明"><a href="#詳細說明" class="headerlink" title="詳細說明"></a>詳細說明</h2><h3 id="1-Workflow-觸發時機"><a href="#1-Workflow-觸發時機" class="headerlink" title="1. Workflow 觸發時機"></a><strong>1. Workflow 觸發時機</strong></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;**&quot;</span>] <span class="comment"># 任何分支有推送時觸發</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;**&quot;</span>] <span class="comment"># 任何 Pull Request 時觸發</span></span><br></pre></td></tr></table></figure>

<h3 id="2-執行環境"><a href="#2-執行環境" class="headerlink" title="2. 執行環境"></a><strong>2. 執行環境</strong></h3><ul>
<li><code>runs-on: ubuntu-latest</code> → 使用最新的 Ubuntu 環境</li>
<li><code>node-version: &#39;20.17.0&#39;</code> → 使用專案指定的 Node.js 版本</li>
</ul>
<h3 id="3-檢查步驟"><a href="#3-檢查步驟" class="headerlink" title="3. 檢查步驟"></a><strong>3. 檢查步驟</strong></h3><ol>
<li><strong>格式檢查</strong> → 確保程式碼符合 Prettier 規範</li>
<li><strong>Lint 檢查</strong> → 確保程式碼符合 ESLint 規則</li>
<li><strong>編譯檢查</strong> → 確保 TypeScript 沒有型別錯誤</li>
</ol>
<hr>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="步驟三：提交並推送到-GitHub"><a href="#步驟三：提交並推送到-GitHub" class="headerlink" title="步驟三：提交並推送到 GitHub"></a><strong>步驟三：提交並推送到 GitHub</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 將 workflow 文件加入版本控制</span></span><br><span class="line">git add .github/workflows/ci.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 提交變更</span></span><br><span class="line">git commit -m <span class="string">&quot;chore: add GitHub Actions CI workflow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 推送到 GitHub</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="步驟四：查看-Actions-執行結果"><a href="#步驟四：查看-Actions-執行結果" class="headerlink" title="步驟四：查看 Actions 執行結果"></a><strong>步驟四：查看 Actions 執行結果</strong></h3><ol>
<li><p>前往你的 GitHub repository</p>
</li>
<li><p>點擊上方的 <strong>“Actions”</strong> 標籤</p>
</li>
<li><p>你會看到 workflow 正在執行或已完成</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day20-Github-Action/1-CI-InProgress.png?raw=true"></p>
</li>
<li><p>點擊任何一次執行可以查看詳細的執行記錄 (這邊可以發現程式碼格式上有些問題) → CI 檢查失敗</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day20-Github-Action/2-migration-prob.png?raw=true"></p>
</li>
<li><p>修復關於 migrations 資料夾底下程式碼格式問題 → 目標是讓 CI 能夠正確完整執行</p>
<p><strong>推薦方法：讓 Prettier 和 ESLint 忽略 migrations 資料夾的檢查</strong></p>
<p>這是最常見的做法，因為：</p>
<ul>
<li>✅ migration 是 TypeORM 自動生成的，不應該手動或格式化修改</li>
<li>✅  每次生成新的 migration 都會有相同的問題</li>
</ul>
<p>在 <code>.prettierignore</code> 加上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src/migrations/**/*.ts</span><br></pre></td></tr></table></figure>

<p>修改 <code>eslint.config.js</code> 加上 ( <code>ignores: [&quot;src/migrations/**/*.ts&quot;]</code> )</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const js = require(<span class="string">&quot;@eslint/js&quot;</span>);</span><br><span class="line">const globals = require(<span class="string">&quot;globals&quot;</span>);</span><br><span class="line">const prettier = require(<span class="string">&quot;eslint-config-prettier&quot;</span>);</span><br><span class="line">const tsParser = require(<span class="string">&quot;@typescript-eslint/parser&quot;</span>);</span><br><span class="line">const tsPlugin = require(<span class="string">&quot;@typescript-eslint/eslint-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line">module.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    // 新增：忽略 migrations 資料夾</span><br><span class="line">    ignores: [<span class="string">&quot;src/migrations/**/*.ts&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    files: [<span class="string">&quot;**/*.ts&quot;</span>], // 檢查 .ts 檔案</span><br><span class="line">    languageOptions: &#123;</span><br><span class="line">      parser: tsParser, // 用 TypeScript 的解析器</span><br><span class="line">      sourceType: <span class="string">&quot;module&quot;</span>, // 支援 ES 模組</span><br><span class="line">      globals: &#123;</span><br><span class="line">        ...globals.node, // Node.js 的全域變數（像 process）</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // ... existing code ...</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
<li><p>進行 commit 與推送程式碼</p>
<p>commit : update ESLint&#x2F;Prettier config to ignore migrations folder</p>
</li>
<li><p>一樣的方式查看 Github Action</p>
</li>
<li><p>結果 : 偵測出我們之前測試 ESLint 套件所建立的一個小檔案有問題 <code>testLint.ts</code></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day20-Github-Action/3-testLint-prob.png?raw=true"></p>
</li>
<li><p>移除 <code>testLint.ts</code> 後再 push 一次</p>
</li>
<li><p>結果 : 成功通過 CI 測試啦！</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day20-Github-Action/4-CI-success.png?raw=true"></p>
</li>
</ol>
<hr>
<h2 id="✅-完成！"><a href="#✅-完成！" class="headerlink" title="✅ 完成！"></a>✅ 完成！</h2><p>到這裡，你已經成功在專案中導入 <strong>第一個 GitHub Actions CI Workflow</strong>。</p>
<p>從現在開始，每次 push 或發 PR，GitHub 會幫你自動檢查程式碼，確保品質無虞。</p>
<hr>
<h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>如果只想在 <code>main</code> 和 <code>develop</code> 分支執行，可以改成：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;main&quot;</span>, <span class="string">&quot;develop&quot;</span>]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">&quot;main&quot;</span>, <span class="string">&quot;develop&quot;</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>到今天為止，我們已經幫專案加上了第一層保護網：</p>
<ul>
<li>push &#x2F; PR → 自動跑 <strong>ESLint &#x2F; Prettier &#x2F; TypeScript 檢查</strong></li>
<li>任何錯誤 → CI 立刻偵測，保持程式碼品質</li>
</ul>
<p>CI 就像一個安靜但可靠的守護者，幫助團隊維持專案品質。</p>
<hr>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/eb0291ea9426aef7bf640a69d98fd03e8b0930b1">chore: 🤖 add GitHub Actions CI workflow</a></p>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/13d901b086c26472e51a6f1fd34603dd8393bfbb">chore: 🤖 update ESLint&#x2F;Prettier config to ignore migrations</a></p>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/7dd74bae3d93d95e3397f6fc3feed9c85d1048e3">fix: 🐛 reomve testLint.ts</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 22 - AWS 初探 (2) - 破關拿獎金・預算防護</title>
    <url>/2025/10/06/Day22%20-%20AWS-Budget/</url>
    <content><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>目前申辦 AWS 帳號會提供一組「探索 AWS」活動，只要完成幾個指定任務，就能獲得最多 <strong>US$100 的抵用金</strong>。</p>
<p>這些任務包含：</p>
<ul>
<li>使用 Amazon Bedrock</li>
<li>在 Budgets 中設定成本預算</li>
<li>建立一個 Lambda 應用程式</li>
<li>建立一個 RDS 資料庫</li>
<li>啟動一台 EC2 虛擬主機</li>
</ul>
<span id="more"></span>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/1-aws-tasks.png?raw=true"></p>
<p>筆者目前已完成兩項任務，共獲得 <strong>US$40</strong> 的抵用金。</p>
<p>接下來要挑戰的就是——<strong>建立 AWS Budgets 預算防護</strong>，避免帳單炸裂 。</p>
<hr>
<h2 id="🧾-為什麼要設定預算防護？"><a href="#🧾-為什麼要設定預算防護？" class="headerlink" title="🧾 為什麼要設定預算防護？"></a>🧾 為什麼要設定預算防護？</h2><p>筆者去年使用 GCP Cloud SQL 時，</p>
<p>因為忘記關閉服務，結果帳單爆出 <strong>七千多元台幣 QQ</strong>。</p>
<p>這次吸取教訓，覺得在 AWS 設定「預算警報」非常重要。</p>
<p>這樣當使用量或金額超過設定值時，系統會自動寄信提醒，避免再度出事。</p>
<hr>
<h2 id="實作：設定-AWS-Budgets-預算防護"><a href="#實作：設定-AWS-Budgets-預算防護" class="headerlink" title="實作：設定 AWS Budgets 預算防護"></a>實作：設定 AWS Budgets 預算防護</h2><p>以下步驟超簡單，大約 5 分鐘即可完成！</p>
<hr>
<h3 id="Step-1-參與-AWS-探索活動"><a href="#Step-1-參與-AWS-探索活動" class="headerlink" title="Step 1. 參與 AWS 探索活動"></a>Step 1. 參與 AWS 探索活動</h3><ol>
<li><p>註冊新帳號 → 登入 AWS Console</p>
</li>
<li><p>尋找探索 AWS 區塊</p>
</li>
<li><p>點擊<strong>使用 AWS Budgets 設定成本預算</strong></p>
</li>
<li><p>按下開始活動</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/2-start-event.png?raw=true"></p>
</li>
</ol>
<hr>
<h3 id="Step-2-選擇預算類型"><a href="#Step-2-選擇預算類型" class="headerlink" title="Step 2. 選擇預算類型"></a>Step 2. 選擇預算類型</h3><p>這裡我們選擇使用教學範本 → 每月成本預算</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/3-budget-type.png?raw=true"></p>
<hr>
<h3 id="Step-3-設定預算名稱與金額"><a href="#Step-3-設定預算名稱與金額" class="headerlink" title="Step 3. 設定預算名稱與金額"></a>Step 3. 設定預算名稱與金額</h3><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/4-set-budget.png?raw=true"></p>
<p>在「<strong>每月成本預算 – 範本</strong>」區域：</p>
<ul>
<li><strong>預算名稱</strong>：輸入 <code>MyBudget</code></li>
<li>**輸入預算金額 (US$)**：設定每月預算，例如 <code>5 USD</code></li>
<li><strong>電子郵件收件人</strong>：填入要收到通知的電子郵件</li>
</ul>
<blockquote>
<p>小技巧：</p>
<p>如果你只是測試用途，設定 5 或 10 美元即可。</p>
<p>一旦超過這個金額，AWS 就會發信通知。</p>
</blockquote>
<hr>
<h3 id="Step-4-確認與建立"><a href="#Step-4-確認與建立" class="headerlink" title="Step 4. 確認與建立"></a>Step 4. 確認與建立</h3><p>檢查設定沒問題後，按下 建立預算。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/5-create-budget.png?raw=true"></p>
<p>接著回到 Budgets 列表，你就能看到剛建立的預算監控項目。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/6-budget-dashboard.png?raw=true"></p>
<hr>
<h2 id="✅-領取獎金"><a href="#✅-領取獎金" class="headerlink" title="✅ 領取獎金"></a>✅ 領取獎金</h2><p>上述步驟都完成後就可以回到主控台 → 探索 AWS 區塊查看是否有成功領取抵用金額啦！</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day22-AWS-budgets/7-get-aws-money.png?raw=true"></p>
<hr>
<h2 id="小結：用預算防護安心玩雲端"><a href="#小結：用預算防護安心玩雲端" class="headerlink" title="小結：用預算防護安心玩雲端"></a>小結：用預算防護安心玩雲端</h2><p>這一步看似簡單，卻非常關鍵。</p>
<p>它就像你在玩雲端服務時荷包的「安全保障」，</p>
<p>讓你可以放心探索，而不用擔心月底帳單爆炸。</p>
<p>今天解鎖了「探索 AWS」任務、多拿到 20 美元抵用金 💰  太棒啦！</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 23 - 從零啟動雲端主機：帶你開出第一台 AWS EC2！</title>
    <url>/2025/10/07/Day23%20-%20AWS-EC2/</url>
    <content><![CDATA[<blockquote>
<p>跟著 AWS 官方引導，從零啟動第一台雲端主機！</p>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><p>承接前篇：「我們已經完成了 AWS 預算防護，確保不會爆花費。」</p>
</li>
<li><p>今天要實際體驗「在雲端開一台主機」，也就是 <strong>EC2（Elastic Compute Cloud）</strong>。</p>
</li>
<li><p>EC2 就像你的「雲端電腦」，能安裝系統、架網站、部署 API。</p>
</li>
<li><p>本篇會帶你一步步完成：</p>
<ol>
<li>認識 EC2</li>
<li>建立 EC2</li>
<li>SSH 連線進入 EC2</li>
</ol>
  <span id="more"></span></li>
</ul>
<hr>
<h2 id="什麼是-EC2？"><a href="#什麼是-EC2？" class="headerlink" title="什麼是 EC2？"></a>什麼是 EC2？</h2><ul>
<li>EC2 全名 <strong>Elastic Compute Cloud</strong>。</li>
<li>它是一種可彈性擴展的虛擬伺服器服務。</li>
<li>你可以想像它是「雲端版的電腦」：<ul>
<li>有 CPU、記憶體、磁碟</li>
<li>可以安裝 OS（例如 Ubuntu、Amazon Linux）</li>
<li>透過 SSH 連進去操作</li>
</ul>
</li>
</ul>
<p>📘 小知識：</p>
<blockquote>
<p>EC2 是 AWS 最核心的服務之一，許多其他服務（像 RDS、S3）都會與 EC2 搭配使用。</p>
</blockquote>
<hr>
<h2 id="建立-EC2-的完整步驟"><a href="#建立-EC2-的完整步驟" class="headerlink" title="建立 EC2 的完整步驟"></a>建立 EC2 的完整步驟</h2><h3 id="Step-1：開啟活動「啟動執行個體」"><a href="#Step-1：開啟活動「啟動執行個體」" class="headerlink" title="Step 1：開啟活動「啟動執行個體」"></a>Step 1：開啟活動「啟動執行個體」</h3><ul>
<li>登入 AWS → 點選「探索 AWS」→ 「使用 EC2 啟動執行個體」</li>
<li>系統會帶你進入 EC2 建立畫面。</li>
<li>點擊「開始活動」，即可開始設定第一台主機。<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/1-start-event.png?raw=true"></li>
</ul>
<hr>
<h3 id="Step-2：填寫執行個體名稱與選擇-AMI（作業系統）"><a href="#Step-2：填寫執行個體名稱與選擇-AMI（作業系統）" class="headerlink" title="Step 2：填寫執行個體名稱與選擇 AMI（作業系統）"></a>Step 2：填寫執行個體名稱與選擇 AMI（作業系統）</h3><ul>
<li>首先填寫執行個體名稱</li>
<li>然後在頁面中可看到各種作業系統選擇：<ul>
<li>Amazon Linux 2023 ✅</li>
<li>Ubuntu</li>
<li>Windows Server</li>
</ul>
</li>
<li>本篇選擇 <strong>Amazon Linux 2023（預設，符合免費方案）</strong>。</li>
<li>它是 AWS 官方提供的 Linux 發行版，安全且輕量。<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/2-instance-ami.png?raw=true"></li>
</ul>
<hr>
<h3 id="Step-3：選擇執行個體類型"><a href="#Step-3：選擇執行個體類型" class="headerlink" title="Step 3：選擇執行個體類型"></a>Step 3：選擇執行個體類型</h3><ul>
<li>選擇：<code>t3.micro</code>（2 vCPU &#x2F; 1GB RAM）</li>
<li>✅ 符合免費額度</li>
<li>適合練習與簡單測試<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/3-instance-type.png?raw=true"></li>
</ul>
<hr>
<h3 id="Step-4：建立金鑰對（Key-Pair）"><a href="#Step-4：建立金鑰對（Key-Pair）" class="headerlink" title="Step 4：建立金鑰對（Key Pair）"></a>Step 4：建立金鑰對（Key Pair）</h3><ul>
<li>金鑰對是登入 EC2 的憑證。(等等 SSH 連線會用到)</li>
<li>點「建立新的金鑰對」→ 選擇 RSA → 下載 <code>.pem</code> 檔。</li>
<li>⚠️ <strong>請妥善保存，遺失後無法再登入！</strong><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/4-key-pair.png?raw=true"><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/5-create-key.png?raw=true"></li>
</ul>
<hr>
<h3 id="Step-5：設定網路與安全群組"><a href="#Step-5：設定網路與安全群組" class="headerlink" title="Step 5：設定網路與安全群組"></a>Step 5：設定網路與安全群組</h3><ul>
<li>建立新安全群組（<code>launch-wizard-2</code>）</li>
<li>開啟以下通訊埠：<ul>
<li>**22 (SSH)**：遠端登入用</li>
<li>**80 (HTTP)**：讓網頁可以被瀏覽器存取</li>
</ul>
</li>
<li>CIDR 設定為 <code>0.0.0.0/0</code>（全開放，但僅限練習使用）<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/6-network.png?raw=true"></li>
</ul>
<hr>
<h3 id="Step-6：啟動執行個體"><a href="#Step-6：啟動執行個體" class="headerlink" title="Step 6：啟動執行個體"></a>Step 6：啟動執行個體</h3><ul>
<li>其他設定保持預設即可</li>
<li>然後點擊「啟動執行個體」後，AWS 會建立伺服器。<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/7-run-instance.png?raw=true"></li>
<li>幾十秒後即可在 EC2 主控台看到「Running」狀態。</li>
<li>點進去即可看到：<ul>
<li>Public IPv4 address</li>
<li>Instance ID</li>
<li>Security group 等資訊<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/8-ec2-dashboard.png?raw=true"></li>
</ul>
</li>
</ul>
<hr>
<h2 id="SSH-連線至-EC2"><a href="#SSH-連線至-EC2" class="headerlink" title="SSH 連線至 EC2"></a>SSH 連線至 EC2</h2><p>點擊 EC2 主控台右上角連線按鈕 → 選擇 SSH 用戶端</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/9-ssh-conn.png?raw=true"></p>
<p>SSH 連線步驟如下：</p>
<p>開啟終端機 → 尋找 aws-key.pem 的存放位址 → 修改檔案權限 → 利用 AWS 所提供的指令連線：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 <span class="string">&quot;my-ec2-001-key.pem&quot;</span></span><br><span class="line">ssh -i <span class="string">&quot;my-ec2-001-key.pem&quot;</span> ec2-user@ec2-54-199-211-42.ap-northeast-1.compute.amazonaws.com</span><br></pre></td></tr></table></figure>

<p>成功登入後會看到的終端畫面如下：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day23-AWS-EC2/10-ssh-success.png?raw=true"></p>
<p>🎉 你已成功進入雲端主機！(也可以嘗試一些基本 Linux 指令)</p>
<hr>
<h2 id="小提醒與收尾"><a href="#小提醒與收尾" class="headerlink" title="小提醒與收尾"></a>小提醒與收尾</h2><ul>
<li>練習結束後務必：<ol>
<li>在 EC2 控制台 → 停止或終止執行個體</li>
<li>避免持續計費</li>
</ol>
</li>
<li>如果要下次再使用，可重新啟動，AWS 會保留設定。</li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>到這裡，我們已經成功完成了「AWS EC2 入門」的第一步 🎯<br>從建立執行個體、設定安全群組，到用 SSH 登入主機，<br>體驗了雲端世界的基本流程。</p>
<p>這就像打開了一台雲端電腦的電源開關 ——<br>接下來，我們就能在雲端世界自由發揮，<br>部署 Node.js、連接資料庫，甚至架起自己的後端服務。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 24 - 從本地到雲端：把你的 Node.js 專案部署上 AWS EC2！</title>
    <url>/2025/10/08/Day24%20-%20AWS-Node-EC2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天我們已經成功開啟第一台 AWS EC2 主機，體驗了雲端主機。</p>
<p>今天，我們要更進一步 —— <strong>把 Node.js 專案實際部署到雲端主機上！</strong></p>
<p>這篇文章將帶你完成從 0 到上線的所有流程：</p>
<ol>
<li>建立 Ubuntu EC2 實例</li>
<li>SSH 連線</li>
<li>安裝 Node.js &#x2F; npm &#x2F; Git</li>
<li>部署並執行專案</li>
<li>使用 PM2 常駐應用程式</li>
</ol>
<span id="more"></span>

<hr>
<h2 id="AWS-EC2-部署完整步驟"><a href="#AWS-EC2-部署完整步驟" class="headerlink" title="AWS EC2 部署完整步驟"></a>AWS EC2 部署完整步驟</h2><h3 id="步驟-1：在-AWS-EC2-啟動-Ubuntu-實例"><a href="#步驟-1：在-AWS-EC2-啟動-Ubuntu-實例" class="headerlink" title="步驟 1：在 AWS EC2 啟動 Ubuntu 實例"></a><strong>步驟 1：在 AWS EC2 啟動 Ubuntu 實例</strong></h3><ol>
<li><p><strong>名稱</strong> : <code>ithome2025-ec2</code></p>
</li>
<li><p><strong>選擇 AMI</strong>：選擇 Ubuntu（這邊使用筆者較熟悉的 Ubuntu 22.04 LTS）</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/1-name-os.png?raw=true"></p>
</li>
<li><p><strong>選擇實例類型</strong>：<code>t3.micro</code></p>
</li>
<li><p><strong>金鑰對（重要）</strong>：</p>
<ul>
<li>建立新的金鑰對或選擇現有的</li>
<li>下載 <code>.pem</code> 檔案並妥善保存（例如：<code>my-key.pem</code>）</li>
</ul>
</li>
<li><p><strong>網路設定</strong>：</p>
<ul>
<li>✅ 允許 SSH 流量（來自 0.0.0.0&#x2F;0 或您的 IP）</li>
<li>✅ 允許 HTTP 流量（port 80）</li>
<li>✅ 允許來自網際網路的 HTTPS 流量（可選）</li>
<li>🔧 <strong>額外新增自訂 TCP 規則</strong>：port 3000（Node.js 應用預設埠）<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/2-tcp-3000.png?raw=true"></li>
</ul>
</li>
<li><p><strong>儲存空間</strong>：預設 8GB 足夠</p>
</li>
</ol>
<p>點擊「啟動實例」</p>
<hr>
<h3 id="步驟-2：SSH-連接到您的-EC2-實例-詳細可參考上一篇文章"><a href="#步驟-2：SSH-連接到您的-EC2-實例-詳細可參考上一篇文章" class="headerlink" title="步驟 2：SSH 連接到您的 EC2 實例 (詳細可參考上一篇文章)"></a><strong>步驟 2：SSH 連接到您的 EC2 實例 (詳細可參考上一篇文章)</strong></h3><p>等待執行個體狀態變為 “執行中” 後：</p>
<ol>
<li>點擊 EC2 主控台右上角連線按鈕 → 選擇 SSH 用戶端</li>
<li>開啟終端機 → 尋找 aws-key.pem 的存放位址 → 修改檔案權限 → 利用 AWS 所提供的指令連線</li>
</ol>
<p>成功連接後會看到 Ubuntu 的歡迎訊息。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/3-welcome-ubuntu.png?raw=true"></p>
<hr>
<h3 id="步驟-3：在-EC2-上安裝-Node-js-和-npm"><a href="#步驟-3：在-EC2-上安裝-Node-js-和-npm" class="headerlink" title="步驟 3：在 EC2 上安裝 Node.js 和 npm"></a><strong>步驟 3：在 EC2 上安裝 Node.js 和 npm</strong></h3><p>在 EC2 實例中執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新系統套件</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝 Node.js 20.x（LTS 版本）</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -</span><br><span class="line">sudo apt install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驗證安裝</span></span><br><span class="line">node --version  <span class="comment"># 應顯示 v20.x.x</span></span><br><span class="line">npm --version   <span class="comment"># 應顯示 10.x.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝 Git（用於複製專案）</span></span><br><span class="line">sudo apt install -y git</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/4-node-ver.png?raw=true"></p>
<hr>
<h3 id="步驟-4：將專案部署到-EC2"><a href="#步驟-4：將專案部署到-EC2" class="headerlink" title="步驟 4：將專案部署到 EC2"></a><strong>步驟 4：將專案部署到 EC2</strong></h3><p>接下來，我們要把專案實際部署到 <strong>AWS EC2</strong> 上。</p>
<p>不過目前我們還沒有啟用 RDS 或其他雲端服務，因此這次的部署目標很單純：</p>
<blockquote>
<p>先讓 Node.js + Express 伺服器能在雲端成功啟動運作，</p>
<p>暫時不涉及資料庫連線設定。</p>
</blockquote>
<p>為了確保環境一致，我們會回到專案中尚未整合資料庫的版本，也就是以下這個 commit：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/5-git-commit.png?raw=true"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 複製專案</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ArvinYang1925/iThome2025-node-ts.git</span><br><span class="line"><span class="built_in">cd</span> iThome2025-node-ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換到特定 commit</span></span><br><span class="line">git checkout 342fd7f5ee9ece202ef2ec2a00c10b05d1c76a4a</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="步驟-5：安裝依賴並編譯專案"><a href="#步驟-5：安裝依賴並編譯專案" class="headerlink" title="步驟 5：安裝依賴並編譯專案"></a><strong>步驟 5：安裝依賴並編譯專案</strong></h3><p>在 EC2 實例中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 進入專案目錄</span></span><br><span class="line"><span class="built_in">cd</span> ~/iThome2025-node-ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝依賴</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 編譯 TypeScript 到 JavaScript</span></span><br><span class="line">npx tsc</span><br></pre></td></tr></table></figure>

<p>編譯後會在 <code>dist/</code> 目錄產生 JavaScript 檔案。</p>
<hr>
<h3 id="步驟-6：測試運行應用"><a href="#步驟-6：測試運行應用" class="headerlink" title="步驟 6：測試運行應用"></a><strong>步驟 6：測試運行應用</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接運行編譯後的 JS</span></span><br><span class="line">node dist/app.js</span><br></pre></td></tr></table></figure>

<p>您應該會看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🚀 Server running on http://localhost:3000</span><br></pre></td></tr></table></figure>

<p>測試方式：</p>
<ul>
<li>或在瀏覽器訪問 <code>http://您的EC2公有IP:3000</code><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/6-hello-tihome.png?raw=true"></li>
</ul>
<p>如果看到 “Hello, iThome2025 !”，恭喜成功！🎉</p>
<hr>
<h3 id="步驟-7：使用-PM2-讓應用程式持續運行"><a href="#步驟-7：使用-PM2-讓應用程式持續運行" class="headerlink" title="步驟 7：使用 PM2 讓應用程式持續運行"></a><strong>步驟 7：使用 PM2 讓應用程式持續運行</strong></h3><p>PM2 是 Node.js 的程序管理工具，可以讓應用程式在背景持續運行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 PM2</span></span><br><span class="line">sudo npm install -g pm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 PM2 啟動應用</span></span><br><span class="line">pm2 start dist/app.js --name <span class="string">&quot;ithome-app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看應用狀態</span></span><br><span class="line">pm2 status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日誌</span></span><br><span class="line">pm2 logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定開機自動啟動</span></span><br><span class="line">pm2 startup</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day24-EC2-NodeJS/7-pm2.png?raw=true"></p>
<p>PM2 常用指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 restart ithome-app  <span class="comment"># 重啟</span></span><br><span class="line">pm2 stop ithome-app     <span class="comment"># 停止</span></span><br><span class="line">pm2 delete ithome-app   <span class="comment"># 刪除</span></span><br><span class="line">pm2 logs ithome-app     <span class="comment"># 查看日誌</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>至此，我們已經完成了從本地開發環境到 <strong>AWS</strong> <strong>雲端部署的流程</strong> 🎉</p>
<p>這一步的意義不只是讓網站能被全世界訪問，更代表著你掌握了開發者的三大核心能力：</p>
<ul>
<li>開發（Node.js + TypeScript）</li>
<li>部署（AWS EC2）</li>
<li>維運（PM2）</li>
</ul>
<p>接下來，我們會逐步探索 AWS RDS 等雲端服務</p>
<p>慢慢讓這個 Node.js 專案成為一個完整的雲端應用 🚀</p>
<hr>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/tree/feature/init-ts-express">Github 範例程式碼</a></p>
<blockquote>
<p>commit message: Day 6 - set up Express + TS environment</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 21 - AWS 初探 (1) – 什麼是雲端服務？</title>
    <url>/2025/10/05/Day21%20-%20AWS-Intro/</url>
    <content><![CDATA[<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day21-AWS-Intro/1-AWS.jpeg?raw=true"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前幾天的系列文章裡，我們已經用 <strong>Render</strong> 來部署 Node.js 服務，體驗到雲端平台的便利。</p>
<p>不過，Render 屬於偏向 <strong>PaaS（平台即服務）</strong> 的方案，幫我們把基礎建設包好，只需要專注在程式碼即可。</p>
<p>如果我們希望有更大的 <strong>彈性與控制權</strong>——例如選擇伺服器規格、設定網路環境、管理使用者權限，那麼 <strong>AWS（Amazon Web Services）</strong> 就是更強大的選擇。</p>
<p>今天，我們就來看看：什麼是 AWS，它能幫我們做什麼？</p>
<span id="more"></span>

<hr>
<h2 id="1-為什麼需要雲端？"><a href="#1-為什麼需要雲端？" class="headerlink" title="1. 為什麼需要雲端？"></a>1. 為什麼需要雲端？</h2><p>過去如果公司要架網站，通常要做這些事：</p>
<ul>
<li>購買實體伺服器</li>
<li>放在機房，接上網路</li>
<li>聘請 MIS 工程師維護</li>
</ul>
<p>這樣不但成本高昂，也缺乏彈性。假如今天突然有一萬個人同時要用網站，伺服器很可能直接爆掉。</p>
<p><strong>雲端服務的誕生</strong>，就是為了用「租」的方式，幫我們快速解決這些麻煩。</p>
<hr>
<h2 id="2-雲端的三種層級"><a href="#2-雲端的三種層級" class="headerlink" title="2. 雲端的三種層級"></a>2. 雲端的三種層級</h2><p>在理解 AWS 之前，先來看看雲端服務的三種常見類型：</p>
<ul>
<li><strong>IaaS（Infrastructure as a Service）基礎建設即服務</strong><br>提供虛擬主機、網路、儲存空間。<br>例：AWS EC2</li>
<li><strong>PaaS（Platform as a Service）平台即服務</strong><br>幫你準備好應用環境，你只要丟程式碼。<br>例：Render、AWS Elastic Beanstalk</li>
<li><strong>SaaS（Software as a Service）軟體即服務</strong><br>直接用現成的應用。<br>例：Gmail、Google Drive</li>
</ul>
<p>👉 AWS 主要提供 <strong>IaaS + PaaS</strong>，是開發者打造應用的基礎。</p>
<hr>
<h2 id="3-AWS-的四大基礎服務類別"><a href="#3-AWS-的四大基礎服務類別" class="headerlink" title="3. AWS 的四大基礎服務類別"></a>3. AWS 的四大基礎服務類別</h2><p>AWS 提供上百種服務，不過一開始只要先認識四大類別就好：</p>
<ul>
<li><strong>Compute（運算）</strong> → EC2：租一台虛擬主機</li>
<li><strong>Storage（儲存）</strong> → S3：放檔案；RDS：雲端資料庫</li>
<li><strong>Network（網路）</strong> → VPC：建立雲端內部網路；Route53：網域服務</li>
<li><strong>Auth（身分驗證）</strong> → IAM：管理使用者與權限</li>
</ul>
<hr>
<h2 id="4-延伸價值"><a href="#4-延伸價值" class="headerlink" title="4. 延伸價值"></a>4. 延伸價值</h2><p>為什麼不自己買伺服器，而是用 AWS？差別在於：</p>
<ul>
<li><strong>自動擴展（Scaling）</strong>：流量暴增也能撐住</li>
<li><strong>備份（Backup）</strong>：自動保存資料</li>
<li><strong>高可用性（Failover）</strong>：一台掛掉，另一台馬上接手</li>
<li><strong>資安（Security）</strong>：帳號權限控管，符合產業安全標準</li>
</ul>
<p>這些功能對個人開發者來說，可能不常用到；但對於企業級專案，就是 AWS 最大的價值。</p>
<hr>
<h2 id="5-結論"><a href="#5-結論" class="headerlink" title="5. 結論"></a>5. 結論</h2><p>AWS 可以想像成一個「雲端超市」：</p>
<ul>
<li>想要伺服器？拿 EC2。</li>
<li>想要資料庫？拿 RDS。</li>
<li>想要檔案空間？拿 S3。</li>
</ul>
<p>它不只是租硬體，更是提供了一整套幫你維護、擴展、安全管理的工具。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day25 - AWS RDS 入門：在雲端打造你的第一個資料庫服務</title>
    <url>/2025/10/09/Day25%20-%20AWS-RDS/</url>
    <content><![CDATA[<blockquote>
<p>EC2 能架網站，那資料庫呢？</p>
<p>今天我們要一起開啟第一台 <strong>RDS</strong>！</p>
</blockquote>
<hr>
<h2 id="為什麼要用-RDS？"><a href="#為什麼要用-RDS？" class="headerlink" title="為什麼要用 RDS？"></a>為什麼要用 RDS？</h2><p>理論上，我們也可以在 <strong>EC2</strong> 上自己安裝資料庫（例如 MySQL、PostgreSQL），</p>
<p>但這樣做會遇到幾個痛點 👇</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th>項目</th>
<th>自架在 EC2</th>
<th>使用 RDS</th>
</tr>
</thead>
<tbody><tr>
<td>安裝流程</td>
<td>需要手動安裝 MySQL &#x2F; PostgreSQL</td>
<td>一鍵建立，自動設定環境</td>
</tr>
<tr>
<td>維護</td>
<td>要自己備份、更新、監控</td>
<td>AWS 代管自動備份、更新、監控</td>
</tr>
<tr>
<td>安全性</td>
<td>要自己配置防火牆、使用者</td>
<td>內建 VPC、Security Group、IAM 控制</td>
</tr>
<tr>
<td>擴展性</td>
<td>要手動調整硬體資源</td>
<td>可自動或手動擴充規模（vertical &#x2F; read replica）</td>
</tr>
</tbody></table>
<p>換句話說，<strong>RDS 就是幫你「代管資料庫」的 EC2</strong>。</p>
<p>底層仍然是虛擬機（EC2），但 AWS 幫你把「系統管理」那層抽象掉了，</p>
<p>讓開發者只需要專注在「資料與應用程式」。</p>
<hr>
<h2 id="RDS-的底層其實是-EC2-嗎？"><a href="#RDS-的底層其實是-EC2-嗎？" class="headerlink" title="RDS 的底層其實是 EC2 嗎？"></a>RDS 的底層其實是 EC2 嗎？</h2><p>是的，但差別在於：</p>
<ul>
<li>RDS 是 <strong>受管服務（Managed Service）</strong></li>
<li>AWS 會負責：<ul>
<li>建立與維護 EC2 instance</li>
<li>安裝與配置資料庫引擎（MySQL &#x2F; PostgreSQL &#x2F; MariaDB &#x2F; Oracle &#x2F; SQL Server）</li>
<li>定期 備份 &#x2F; snapshot</li>
<li>管理安全性群組與網路設定</li>
</ul>
</li>
</ul>
<p>簡單說：</p>
<blockquote>
<p>你不再需要 sudo apt install postgresql，</p>
<p>而是直接在 AWS Console 上點幾下，資料庫就能用了 💥</p>
</blockquote>
<hr>
<h2 id="跟著-AWS-一起開啟第一台-RDS"><a href="#跟著-AWS-一起開啟第一台-RDS" class="headerlink" title="跟著 AWS 一起開啟第一台 RDS"></a>跟著 AWS 一起開啟第一台 RDS</h2><h3 id="Step-1：進入-AWS-Console-→-探索-AWS-→-點擊「建立-RDS-資料庫」"><a href="#Step-1：進入-AWS-Console-→-探索-AWS-→-點擊「建立-RDS-資料庫」" class="headerlink" title="Step 1：進入 AWS Console → 探索 AWS → 點擊「建立 RDS 資料庫」"></a>Step 1：進入 AWS Console → 探索 AWS → 點擊「建立 RDS 資料庫」</h3><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/1-start-rds.png?raw=true"></p>
<h3 id="Step-2：建立資料庫執行個體"><a href="#Step-2：建立資料庫執行個體" class="headerlink" title="Step 2：建立資料庫執行個體"></a>Step 2：建立資料庫執行個體</h3><ul>
<li>選擇 輕鬆建立 (這是 AWS 提供的快速建立選項，適合新手體驗。)</li>
<li>選擇引擎 → <strong>PostgreSQL</strong></li>
<li><strong>資料庫執行個體大小 → 免費方案</strong><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/2-rds-info.png?raw=true"></li>
</ul>
<h3 id="Step-3：設定帳號密碼"><a href="#Step-3：設定帳號密碼" class="headerlink" title="Step 3：設定帳號密碼"></a>Step 3：設定帳號密碼</h3><ul>
<li><strong>資料庫執行個體識別符</strong>：database-1</li>
<li><strong>主要使用者名稱</strong>：postgres</li>
<li><strong>憑證管理</strong>：自我管理</li>
<li><strong>使用者密碼</strong>：勾選自動產生密碼</li>
<li>點擊 → 建立資料庫<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/3-rds-account.png?raw=true"></li>
<li>等待建立執行個體時 → 點擊檢視連線詳細資訊</li>
</ul>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/4-rds-conn.png?raw=true"></p>
<ul>
<li>保存資料庫使用者名稱與密碼 (等等連線時會用到)<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/5-rds-conn-info.png?raw=true"></li>
</ul>
<h3 id="Step-4：設定-EC2-安全群組"><a href="#Step-4：設定-EC2-安全群組" class="headerlink" title="Step 4：設定 EC2 安全群組"></a>Step 4：設定 EC2 安全群組</h3><p>回到 AWS Console → 點擊 EC2 → 側邊欄點擊安全群組</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/6-ec2-sg.png?raw=true"></p>
<p>點擊右上方建立安全群組 → 填寫名稱描述等資訊</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/7-create-sg.png?raw=true"></p>
<p>設定傳入規則 (填寫資訊如下圖) → 拉到最下方點擊建立安全群組</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/8-sg-in-rule.png?raw=true"></p>
<blockquote>
<p>⚠️ 若開放 <code>0.0.0.0/0</code> 僅供測試使用，正式環境建議限制特定 IP 或使用 Private Subnet。</p>
</blockquote>
<h3 id="Step-5：設定公開連線"><a href="#Step-5：設定公開連線" class="headerlink" title="Step 5：設定公開連線"></a>Step 5：設定公開連線</h3><ul>
<li>進入 RDS 儀表板 → 點擊右上方修改<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/9-edit-rds.png?raw=true"></li>
<li>下拉到連線區塊 → 新增我們剛剛建立的安全群組 <code>my-pgsql-rule</code><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/10-add-sg.png?raw=true"></li>
<li>連線區塊最下方有個其他組態的設定 → 勾選可公開存取<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/11-public-access.png?raw=true"></li>
<li>下拉到最下方按下繼續 → 檢視修改項目 → 點擊修改資料庫執行個體</li>
<li>下圖為修改中的資料庫執行個體<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/12-editing-rds.png?raw=true"></li>
</ul>
<hr>
<h2 id="使用-DBeaver-連線測試"><a href="#使用-DBeaver-連線測試" class="headerlink" title="使用 DBeaver 連線測試"></a>使用 DBeaver 連線測試</h2><p>修改完 RDS 後，回到主控台的查看執行個體的「<strong>端點</strong>」與「<strong>連接埠</strong>」：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/13-rds-console.png?raw=true"></p>
<h3 id="開啟-DBeaver-→-新建連線："><a href="#開啟-DBeaver-→-新建連線：" class="headerlink" title="開啟 DBeaver → 新建連線："></a>開啟 DBeaver → 新建連線：</h3><ul>
<li>選擇資料庫類型：PostgreSQL</li>
<li>Host：輸入 RDS 端點</li>
<li>Port：5432</li>
<li>Database：postgres</li>
<li>Username &#x2F; Password：剛剛設定的帳密<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/14-db-conn.png?raw=true"></li>
</ul>
<p>點擊 <strong>Test Connection</strong></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day25-RDS-Intro/15-db-conn-test.png?raw=true"></p>
<p>如果顯示成功，就代表你成功連線了雲端資料庫！</p>
<hr>
<h2 id="⚠️-開發測試的安全提醒"><a href="#⚠️-開發測試的安全提醒" class="headerlink" title="⚠️ 開發測試的安全提醒"></a>⚠️ 開發測試的安全提醒</h2><p>本篇教學屬於 <strong>入門範例</strong>，主要目的是讓大家體驗如何在雲端建立與連線資料庫。</p>
<p>實際正式專案部署時，需特別注意以下幾點：</p>
<ol>
<li><p><strong>請勿長期開放 Public access</strong>：</p>
<p>若你的資料庫可被全網連線（<code>0.0.0.0/0</code>），將有較高的安全風險。</p>
</li>
<li><p><strong>測試完記得清理資源</strong>：</p>
<p>若僅為練習，建議在測試結束後 <strong>終止或刪除 RDS 執行個體</strong>，以避免產生額外費用。</p>
</li>
<li><p><strong>正式環境建議做法</strong>：</p>
<ul>
<li>將 RDS 放在 <strong>Private Subnet</strong>，不開放外部連線。</li>
<li>僅允許應用伺服器（EC2）內部網路存取。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>從 EC2 到 RDS，我們已經踏入雲端資料架構的世界！</p>
<p>明天我們將進一步探索：</p>
<ul>
<li>如何讓 Node.js 專案連上 RDS</li>
<li>在 <code>.env</code> 中配置資料庫連線字串</li>
<li>並驗證資料是否能正常 CRUD</li>
</ul>
<p>鐵人賽還剩下幾天呀～加油！加油！</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 26 - 雲端串接實戰：Node.js 成功連上 AWS RDS！</title>
    <url>/2025/10/10/Day26%20-%20AWS-EC2-RDS/</url>
    <content><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Day 24，我們已經成功開啟 EC2，並在上面部署了第一版的 Node.js Express App。</p>
<p>Day 25，我們建立了 RDS 資料庫並成功測試連線。</p>
<p>今天，我們要來完成最關鍵的一步 ——</p>
<p><strong>讓 EC2 上的應用程式正式連上 RDS，打造完整的雲端架構！</strong></p>
<span id="more"></span>

<hr>
<h2 id="前置作業：關閉-RDS-公開存取權限，提高安全性"><a href="#前置作業：關閉-RDS-公開存取權限，提高安全性" class="headerlink" title="前置作業：關閉 RDS 公開存取權限，提高安全性"></a>前置作業：關閉 RDS 公開存取權限，提高安全性</h2><p>進入 <strong>RDS 儀表板</strong> → 點擊右上角「修改」 →</p>
<p>下滑到「連線」區塊 → 將「可公開存取」改為 <strong>No</strong> → 儲存修改。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/1-rds-access.png?raw=true"></p>
<blockquote>
<p>💡 昨天為了用 DBeaver 測試，我們暫時開啟了公開存取。</p>
<p>不過長期而言，這樣的設定會帶來極大的安全風險！</p>
</blockquote>
<hr>
<h3 id="為什麼關閉「公開存取」能提升安全性？"><a href="#為什麼關閉「公開存取」能提升安全性？" class="headerlink" title="為什麼關閉「公開存取」能提升安全性？"></a>為什麼關閉「公開存取」能提升安全性？</h3><h3 id="1-阻擋所有「外部網際網路」的流量"><a href="#1-阻擋所有「外部網際網路」的流量" class="headerlink" title="1. 阻擋所有「外部網際網路」的流量"></a>1. 阻擋所有「外部網際網路」的流量</h3><p>當你設定 <code>Public access = No</code> 時，RDS 僅會分配 <strong>私有 IP</strong>，</p>
<p>外部網路無法直接抵達它。</p>
<p>即使你的 Security Group 開得再寬（像 <code>0.0.0.0/0</code>），</p>
<p>外部世界也<strong>完全 ping 不到</strong>。</p>
<p>這能有效防止：</p>
<ul>
<li>自動化掃描（masscan、nmap）</li>
<li>惡意登入爆破（如 PostgreSQL 密碼暴力破解）</li>
<li>被搜尋引擎（例如 Shodan）暴露</li>
</ul>
<blockquote>
<p>換句話說，它在「網路層」上就被隔離了！</p>
</blockquote>
<hr>
<h3 id="2-所有資料庫存取都需走「內部網路」"><a href="#2-所有資料庫存取都需走「內部網路」" class="headerlink" title="2. 所有資料庫存取都需走「內部網路」"></a>2. 所有資料庫存取都需走「內部網路」</h3><p>當 RDS 僅有私有 IP，能連線的主機僅限於：</p>
<ul>
<li>同一個 <strong>VPC</strong> 內的 EC2</li>
<li>或透過 <strong>VPN</strong> 進來的內部節點</li>
</ul>
<p>這樣，你能明確控制「誰」能夠存取資料庫，</p>
<p>將環境從「開放世界」轉變為「封閉社區」。</p>
<hr>
<h2 id="步驟-1：更新-EC2-上的專案版本"><a href="#步驟-1：更新-EC2-上的專案版本" class="headerlink" title="步驟 1：更新 EC2 上的專案版本"></a>步驟 1：更新 EC2 上的專案版本</h2><p>SSH 登入 EC2：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/2-ssh-conn.png?raw=true"></p>
<p>在 EC2 執行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 進入專案資料夾</span></span><br><span class="line"><span class="built_in">cd</span> ~/iThome2025-node-ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 停止目前的應用 (如果之前有開啟)</span></span><br><span class="line">pm2 stop ithome-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 切換並拉取最新分支</span></span><br><span class="line">git checkout feature/init-ts-express</span><br><span class="line">git pull origin feature/init-ts-express</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 安裝套件</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 重新編譯</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="步驟-2：設定環境變數"><a href="#步驟-2：設定環境變數" class="headerlink" title="步驟 2：設定環境變數"></a>步驟 2：設定環境變數</h2><p>建立 <code>.env</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano .<span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<p>輸入內容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RDS 資料庫設定</span></span><br><span class="line">DB_HOST=node-ts-demo-db.xxxxxx.ap-northeast-1.rds.amazonaws.com</span><br><span class="line">DB_NAME=postgres</span><br><span class="line">DB_USERNAME=postgres</span><br><span class="line">DB_PASSWORD=password</span><br><span class="line">DB_PORT=5432</span><br><span class="line"></span><br><span class="line"><span class="comment"># JWT</span></span><br><span class="line">JWT_SECRET=jwt_secret</span><br><span class="line"></span><br><span class="line"><span class="comment"># Firebase</span></span><br><span class="line">FIREBASE_SERVICE_ACCOUNT=&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;service_account&quot;</span>,...,<span class="string">&quot;client_x509_cert_url&quot;</span>:<span class="string">&quot;xxx&gt;&quot;</span>&#125;</span><br><span class="line">FIREBASE_STORAGE_BUCKET=your-project.appspot.com</span><br><span class="line"></span><br><span class="line">LOG_LEVEL=debug</span><br><span class="line">NODE_ENV=production</span><br></pre></td></tr></table></figure>

<p>儲存離開：<code>Ctrl + X → Y → Enter</code></p>
<hr>
<h2 id="步驟-3：測試-RDS-連線"><a href="#步驟-3：測試-RDS-連線" class="headerlink" title="步驟 3：測試 RDS 連線"></a>步驟 3：測試 RDS 連線</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql-client -y</span><br><span class="line"></span><br><span class="line">psql -h node-ts-demo-db.xxxxxx.ap-northeast-1.rds.amazonaws.com \</span><br><span class="line">     -p 5432 \</span><br><span class="line">     -U postgres \</span><br><span class="line">     -d postgres</span><br></pre></td></tr></table></figure>

<p>輸入密碼後若成功進入 <code>psql</code> 介面，代表連線順利 🎉</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/3-pgsql-conn.png?raw=true"></p>
<p>輸入 <code>\q</code> 可退出。</p>
<hr>
<h2 id="步驟-4：執行資料庫-Migration"><a href="#步驟-4：執行資料庫-Migration" class="headerlink" title="步驟 4：執行資料庫 Migration"></a>步驟 4：執行資料庫 Migration</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 migration 檔案</span></span><br><span class="line"><span class="built_in">ls</span> -la src/migrations/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行 migration 建立資料表</span></span><br><span class="line">npm run migration:run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢查 migration 狀態</span></span><br><span class="line">npm run migration:show</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/4-migration.png?raw=true"></p>
<hr>
<h2 id="⚠️-踩坑紀錄：Migration-成功，但-App-啟動失敗！"><a href="#⚠️-踩坑紀錄：Migration-成功，但-App-啟動失敗！" class="headerlink" title="⚠️ 踩坑紀錄：Migration 成功，但 App 啟動失敗！"></a>⚠️ 踩坑紀錄：Migration 成功，但 App 啟動失敗！</h2><p>我原本滿心期待啟動應用程式，</p>
<p>結果一跑 <code>node dist/app.js</code>，瞬間炸裂：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/5-db-conn-failed.png?raw=true"></p>
<p>心想：「為何？Migration 都成功了，怎麼跑不動？」</p>
<hr>
<h3 id="問題分析"><a href="#問題分析" class="headerlink" title="問題分析"></a>問題分析</h3><p>這是 TypeORM 常見陷阱之一：</p>
<ul>
<li><code>migration:run</code> 是由 <code>typeorm-ts-node-commonjs</code> 執行，可直接讀 <code>.ts</code></li>
<li>但 <code>node dist/app.js</code> 僅能執行 <code>.js</code><br>—— TypeORM 嘗試載入 <code>.ts</code> migration，自然報錯。</li>
</ul>
<p>也就是說：</p>
<blockquote>
<p>開發環境能吃 TS，但佈署環境只能吃 JS。</p>
</blockquote>
<hr>
<h3 id="✅-解決方案"><a href="#✅-解決方案" class="headerlink" title="✅ 解決方案"></a>✅ 解決方案</h3><p>在 <code>db.ts</code> 調整 migrations 路徑設定：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">migrations</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span></span><br><span class="line">  ? [__dirname + <span class="string">&quot;/../migrations/*.js&quot;</span>]</span><br><span class="line">  : [<span class="string">&quot;src/migrations/**/*.ts&quot;</span>];</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="步驟-5：重新部署與驗證"><a href="#步驟-5：重新部署與驗證" class="headerlink" title="步驟 5：重新部署與驗證"></a>步驟 5：重新部署與驗證</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取修改後程式碼</span></span><br><span class="line">git pull origin feature/init-ts-express</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/6-git-pull.png?raw=true"></p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/7-git-log.png?raw=true"></p>
<p>接著重新啟動：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node dist/app.js</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/8-db-conn-ok.png?raw=true"></p>
<p>成功連線 🎉</p>
<hr>
<h2 id="步驟-6：用-PM2-正式啟動"><a href="#步驟-6：用-PM2-正式啟動" class="headerlink" title="步驟 6：用 PM2 正式啟動"></a>步驟 6：用 PM2 正式啟動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 start ithome-app</span><br><span class="line">pm2 logs ithome-app</span><br></pre></td></tr></table></figure>

<p>應看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">📦 DB Connected!</span><br><span class="line">🚀 Server running on http://localhost:3000</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="步驟-7：全面驗證"><a href="#步驟-7：全面驗證" class="headerlink" title="步驟 7：全面驗證"></a>步驟 7：全面驗證</h2><h3 id="7-1-從瀏覽器測試"><a href="#7-1-從瀏覽器測試" class="headerlink" title="7.1 從瀏覽器測試"></a>7.1 從瀏覽器測試</h3><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/9-browser-test.png?raw=true"></p>
<h3 id="7-2-Postman-測試主要-API"><a href="#7-2-Postman-測試主要-API" class="headerlink" title="7.2 Postman 測試主要 API"></a>7.2 Postman 測試主要 API</h3><p>註冊：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/10-postman-test-reg.png?raw=true"></p>
<p>登入：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/11-postman-test-login.png?raw=true"></p>
<p>新增 Todo：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/12-add-todo.png?raw=true"></p>
<h3 id="7-3-檢查資料庫內容"><a href="#7-3-檢查資料庫內容" class="headerlink" title="7.3 檢查資料庫內容"></a>7.3 檢查資料庫內容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 EC2 上連接到 RDS</span></span><br><span class="line">psql -h your-rds-endpoint -p 5432 -U postgres -d postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看資料表</span></span><br><span class="line">\dt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 todo 資料</span></span><br><span class="line">SELECT * FROM <span class="string">&quot;todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">\q</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day26-EC2-RDS/13-check-pgsql-todo.png?raw=true"></p>
<p>測試成功 🎉</p>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這一天，我們正式打通了 <strong>Node.js 應用 + AWS RDS 資料庫</strong> 的雲端實戰串接！</p>
<p>這次的流程看似繁瑣，</p>
<p>但我們一步步實作並理解了：</p>
<ul>
<li>為何要關閉 Public Access</li>
<li>如何讓 EC2 連上 RDS</li>
<li>TypeORM 在生產環境常見的 <code>.ts/.js</code> 落差問題</li>
</ul>
<p>在雲端部署世界裡，<strong>每一次錯誤都是最珍貴的學習歷程。</strong></p>
<p>下一篇，我們將進一步探索 AWS 的另一個明星服務 — <strong>S3（Simple Storage Service）</strong>。</p>
<p>它是許多應用的「檔案中樞」，可以安全地存放圖片、影片、PDF、甚至備份資料。</p>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><blockquote>
<p>commit :<br>fix: 🐛 update migrations config to support .js in production an<br>修正 TypeORM migration 設定，讓 production 使用 .js、開發使用 .ts</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/659efb96fa58de0a07452d039a8f6997184842c4">Github 連結</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 28 - AWS VPC 入門：初探雲端世界的隱形網路</title>
    <url>/2025/10/12/Day28%20-%20AWS-VPC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從 Day23 開始，我們一步步搭起了：</p>
<ul>
<li><strong>EC2</strong>：讓服務跑起來</li>
<li><strong>RDS</strong>：讓資料有地方存</li>
<li><strong>S3</strong>：讓檔案能雲端化</li>
</ul>
<p>這三者合起來，已經是個完整的雲端應用了。</p>
<p>但在這個過程中，你可能有注意到一些問題：</p>
<ul>
<li>為什麼 EC2 可以連到 RDS？</li>
<li>為什麼有的 RDS「不能公開存取」？</li>
<li>為什麼有時候我 ping 不到另一台主機？</li>
</ul>
<p>這些現象看似神秘，其實背後都有一個共同的原因：</p>
<p>👉 它們都活在同一個「網路世界」中，也就是 <strong>VPC（Virtual Private Cloud）</strong>。</p>
<span id="more"></span>

<hr>
<h2 id="一、什麼是-VPC？"><a href="#一、什麼是-VPC？" class="headerlink" title="一、什麼是 VPC？"></a>一、什麼是 VPC？</h2><blockquote>
<p>💡 一句話理解：</p>
<p><strong>VPC 是 AWS 上的「虛擬私人網路」，讓你在雲端擁有一塊專屬的網路空間。</strong></p>
</blockquote>
<p>你可以把整個 AWS 想成一座「雲端大城市」，</p>
<p>而每一個使用者申請的 VPC，就是在城市裡劃出一塊區域：</p>
<p>這塊區域上，你可以：</p>
<ul>
<li>決定有哪些建築（EC2、RDS、Lambda）</li>
<li>設定哪些道路能通往外部世界（Internet Gateway）</li>
<li>規劃哪些區域只能內部通訊（Private Subnet）</li>
</ul>
<blockquote>
<p>換句話說：</p>
<p><strong>VPC 是所有 AWS 服務運作的「網路基礎設施」。</strong></p>
</blockquote>
<hr>
<h2 id="二、為什麼需要-VPC？"><a href="#二、為什麼需要-VPC？" class="headerlink" title="二、為什麼需要 VPC？"></a>二、為什麼需要 VPC？</h2><p>沒有 VPC 的世界，就像所有房子都建在同一條馬路上，</p>
<p>大家彼此都能看到、都能互通，安全性極低。</p>
<p>而 VPC 的出現，解決了三件事：</p>
<h3 id="1-網路隔離（Network-Isolation）"><a href="#1-網路隔離（Network-Isolation）" class="headerlink" title="1.網路隔離（Network Isolation）"></a>1.網路隔離（Network Isolation）</h3><p>你可以建立多個 VPC，讓不同專案的服務彼此隔離。</p>
<p>例如：</p>
<ul>
<li>一個 VPC 給測試環境</li>
<li>一個 VPC 給正式環境<br>這樣可以避免誤連線、資料誤操作。</li>
</ul>
<h3 id="2-安全控制（Security-Control）"><a href="#2-安全控制（Security-Control）" class="headerlink" title="2.安全控制（Security Control）"></a>2.安全控制（Security Control）</h3><p>VPC 搭配 <strong>Security Group</strong> 和 <strong>NACL</strong>，</p>
<p>能夠細緻地控制「誰能進、誰能出」。</p>
<p>例如：</p>
<ul>
<li>只允許 EC2 連到 RDS</li>
<li>禁止外部直接存取資料庫</li>
</ul>
<h3 id="3-流量管理（Traffic-Routing）"><a href="#3-流量管理（Traffic-Routing）" class="headerlink" title="3.流量管理（Traffic Routing）"></a>3.流量管理（Traffic Routing）</h3><p>透過 <strong>Route Table</strong>、<strong>Internet Gateway</strong>、<strong>NAT Gateway</strong>，</p>
<p>你可以決定哪些子網可以上網、哪些只能內部存取。</p>
<p>這也是為什麼「RDS 放在 Private Subnet、EC2 放在 Public Subnet」是 AWS 的最佳實踐。</p>
<hr>
<h2 id="三、VPC-的核心組成"><a href="#三、VPC-的核心組成" class="headerlink" title="三、VPC 的核心組成"></a>三、VPC 的核心組成</h2><table>
<thead>
<tr>
<th>元件</th>
<th>角色說明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>VPC</strong></td>
<td>你的虛擬私有網路，所有服務的基礎環境。</td>
</tr>
<tr>
<td><strong>Subnet</strong></td>
<td>子網路，區分公有與私有區域。</td>
</tr>
<tr>
<td><strong>Internet Gateway (IGW)</strong></td>
<td>讓 VPC 能連到外部網際網路。</td>
</tr>
<tr>
<td><strong>NAT Gateway</strong></td>
<td>讓私有子網的主機能「對外連線」但外部無法主動連入。</td>
</tr>
<tr>
<td><strong>Route Table</strong></td>
<td>決定流量要走哪條路。</td>
</tr>
<tr>
<td><strong>Security Group</strong></td>
<td>控制進出流量的防火牆規則。</td>
</tr>
<tr>
<td><strong>Network ACL</strong></td>
<td>子網層級的進階流量控制。</td>
</tr>
</tbody></table>
<hr>
<h2 id="四、圖解理解：雲端裡的城市地圖"><a href="#四、圖解理解：雲端裡的城市地圖" class="headerlink" title="四、圖解理解：雲端裡的城市地圖"></a>四、圖解理解：雲端裡的城市地圖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        🌍 Internet</span><br><span class="line">             |</span><br><span class="line">     +----------------+</span><br><span class="line">     | InternetGateway|</span><br><span class="line">     +----------------+</span><br><span class="line">             |</span><br><span class="line">┌──────────────────────────┐</span><br><span class="line">│        VPC 10.0.0.0/16   │</span><br><span class="line">│                          │</span><br><span class="line">│  +-------------------+   │</span><br><span class="line">│  | Public Subnet     |   │ --&gt; EC2 (Web Server)</span><br><span class="line">│  | 10.0.1.0/24       |   │</span><br><span class="line">│  +-------------------+   │</span><br><span class="line">│                          │</span><br><span class="line">│  +-------------------+   │</span><br><span class="line">│  | Private Subnet    |   │ --&gt; RDS (Database)</span><br><span class="line">│  | 10.0.2.0/24       |   │</span><br><span class="line">│  +-------------------+   │</span><br><span class="line">└──────────────────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這張圖能讓人一眼看懂：</p>
<ul>
<li>EC2（公有子網）能上網</li>
<li>RDS（私有子網）只能被 EC2 存取</li>
<li>兩者在同一個 VPC 下安全地互通</li>
</ul>
<blockquote>
<p>💡 小知識：</p>
<p>在 AWS 裡，幾乎所有服務（EC2、RDS、Lambda）都「必須」放在某個 VPC 之下。</p>
<p>它是整個雲端架構的「底層基礎建設」。</p>
</blockquote>
<hr>
<h2 id="五、VPC-與其他服務的關係"><a href="#五、VPC-與其他服務的關係" class="headerlink" title="五、VPC 與其他服務的關係"></a>五、VPC 與其他服務的關係</h2><table>
<thead>
<tr>
<th>服務</th>
<th>依附於 VPC 的部分</th>
<th>為什麼重要</th>
</tr>
</thead>
<tbody><tr>
<td><strong>EC2</strong></td>
<td>放在 Public Subnet</td>
<td>需要能被外界存取</td>
</tr>
<tr>
<td><strong>RDS</strong></td>
<td>放在 Private Subnet</td>
<td>只允許內部連線</td>
</tr>
<tr>
<td><strong>S3</strong></td>
<td>不在 VPC 裡，但可透過 VPC Endpoint 連線</td>
<td>提高安全性</td>
</tr>
</tbody></table>
<blockquote>
<p>💡 小知識：</p>
<p>雖然 S3 不屬於 VPC 網路，但可以建立「VPC Endpoint」讓流量走內部路線，不經外網，安全又穩定。</p>
</blockquote>
<hr>
<h2 id="六、日常開發者應該知道的-VPC-概念"><a href="#六、日常開發者應該知道的-VPC-概念" class="headerlink" title="六、日常開發者應該知道的 VPC 概念"></a>六、日常開發者應該知道的 VPC 概念</h2><ul>
<li><strong>Security Group 是 VPC 的第一層安全防線</strong><br>它是狀態式防火牆，能自動允許回應流量。</li>
<li><strong>Private Subnet 並非不能上網</strong><br>搭配 NAT Gateway，就能「單向上網」。</li>
<li><strong>一個 AWS 帳號可建立多個 VPC</strong><br>用來區隔不同環境（開發、測試、正式）。</li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天，我們沒有寫一行程式，</p>
<p>卻認識了 AWS 背後最重要的基礎：<strong>網路架構的設計思維。</strong></p>
<p>VPC 就像你在雲端世界的「地基」——</p>
<p>所有 EC2、RDS、S3、Lambda 都是在這塊地上蓋出來的。</p>
<p>理解 VPC，可以讓我們設計出更安全、可維護、具延展性的雲端應用。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 27 - AWS S3 實作檔案上傳：打造你的雲端檔案儲存中心</title>
    <url>/2025/10/11/Day27%20-%20AWS-S3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前幾天，我們已經完成了 <strong>EC2 主機部署</strong> 以及 <strong>RDS 資料庫串接</strong>，</p>
<p>一個完整的後端雲端架構也漸漸成形。</p>
<p>但如果今天你的應用要讓使用者能上傳圖片、影片、報表、PDF…</p>
<p>這些「檔案」要放哪裡呢？</p>
<p>這時候，主角就登場了 —— **AWS S3 (Simple Storage Service)**。</p>
<blockquote>
<p>💡 S3 是 AWS 三大基礎服務之一（EC2、RDS、S3），</p>
<p>它就像你在雲端的「硬碟」，負責安全地儲存、管理檔案。</p>
</blockquote>
<p>今天我們就要實際操作：</p>
<p>從建立 S3 Bucket → 設定權限 → 實作 Node.js 上傳功能，</p>
<p>一步步完成「檔案雲端化」的實戰練習！</p>
<span id="more"></span>

<hr>
<h2 id="為什麼要使用-AWS-S3？"><a href="#為什麼要使用-AWS-S3？" class="headerlink" title="為什麼要使用 AWS S3？"></a>為什麼要使用 AWS S3？</h2><h3 id="1-超穩定的雲端儲存空間"><a href="#1-超穩定的雲端儲存空間" class="headerlink" title="1.超穩定的雲端儲存空間"></a>1.超穩定的雲端儲存空間</h3><p>S3 的資料儲存設計達到「<strong>99.999999999%（11 個 9）</strong>」的耐久性，</p>
<p>意思是：你的圖片幾乎不可能遺失。</p>
<h3 id="2-價格便宜又按量計費"><a href="#2-價格便宜又按量計費" class="headerlink" title="2.價格便宜又按量計費"></a>2.價格便宜又按量計費</h3><p>你只需為實際用到的空間與流量付費，</p>
<p>不用像傳統伺服器那樣一直維護硬碟或備份。</p>
<h3 id="3-全球可存取"><a href="#3-全球可存取" class="headerlink" title="3.全球可存取"></a>3.全球可存取</h3><p>S3 的檔案可以透過 URL 在全世界直接被讀取，</p>
<p>搭配 CDN（如 CloudFront）後，速度更是飛快。</p>
<h3 id="4-完美整合-AWS-生態系"><a href="#4-完美整合-AWS-生態系" class="headerlink" title="4.完美整合 AWS 生態系"></a>4.完美整合 AWS 生態系</h3><p>與 EC2、Lambda、CloudFront、IAM、Route53 等無縫結合</p>
<p>不論是後端 API、影片平台、或電商後台都能輕鬆擴充。</p>
<hr>
<h2 id="第一部分：AWS-S3-設定步驟"><a href="#第一部分：AWS-S3-設定步驟" class="headerlink" title="第一部分：AWS S3 設定步驟"></a>第一部分：AWS S3 設定步驟</h2><h3 id="步驟-1：建立-S3-Bucket"><a href="#步驟-1：建立-S3-Bucket" class="headerlink" title="步驟 1：建立 S3 Bucket"></a>步驟 1：建立 S3 Bucket</h3><ol>
<li><strong>登入 AWS Console</strong><ul>
<li>前往 <a href="https://aws.amazon.com/console/">https://aws.amazon.com/console/</a></li>
<li>使用您的 AWS 帳號登入</li>
</ul>
</li>
<li><strong>進入 S3 服務</strong><ul>
<li>在上方搜尋欄輸入「S3」</li>
<li>點選「S3」服務</li>
</ul>
</li>
<li><strong>建立新的 Bucket</strong><ul>
<li>點擊「 <strong>建立儲存貯體</strong> 」按鈕<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/1-aws-s3.png?raw=true"></li>
<li><strong>AWS Region</strong>: 選擇離您最近的區域（例如：<code>ap-northeast-1</code> 東京）</li>
<li><strong>Bucket name</strong>: 輸入唯一名稱（例如：<code>my-ithome-2025-bucket</code>）<ul>
<li>注意：Bucket 名稱必須是全球唯一的<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/2-bucket-name.png?raw=true"></li>
</ul>
</li>
</ul>
</li>
<li><strong>設定 Object Ownership</strong><ul>
<li>選擇「ACLs disabled (recommended)」<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/3-ACL-dis.png?raw=true"></li>
</ul>
</li>
<li><strong>Block Public Access settings</strong><ul>
<li><strong>取消勾選</strong>「Block all public access」</li>
<li>勾選確認框（我了解這會讓檔案變成公開存取）</li>
<li>⚠️ 注意：如果您想讓上傳的圖片可以公開存取，需要取消封鎖<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/4-public-access.png?raw=true"></li>
</ul>
</li>
<li><strong>Bucket Versioning</strong><ul>
<li>選擇「Disable」</li>
</ul>
</li>
<li><strong>其他設定保持預設</strong>，點擊「 <strong>建立儲存貯體</strong> 」</li>
</ol>
<h3 id="步驟-2：設定-Bucket-Policy（讓檔案可公開讀取）"><a href="#步驟-2：設定-Bucket-Policy（讓檔案可公開讀取）" class="headerlink" title="步驟 2：設定 Bucket Policy（讓檔案可公開讀取）"></a>步驟 2：設定 Bucket Policy（讓檔案可公開讀取）</h3><ol>
<li><p>點進剛建立的 Bucket</p>
</li>
<li><p>前往「Permissions」標籤</p>
</li>
<li><p>找到「Bucket policy」區塊，點擊「Edit」</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/5-bucket-policy.png?raw=true"></p>
</li>
<li><p>貼上以下 Policy（記得替換 <code>YOUR-BUCKET-NAME</code>）：</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Sid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PublicReadGetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Principal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3:GetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:s3:::YOUR-BUCKET-NAME/*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>點擊「Save changes」</li>
</ol>
<h3 id="步驟-3：建立-IAM-使用者與取得-Access-Key"><a href="#步驟-3：建立-IAM-使用者與取得-Access-Key" class="headerlink" title="步驟 3：建立 IAM 使用者與取得 Access Key"></a>步驟 3：建立 IAM 使用者與取得 Access Key</h3><ol>
<li><strong>進入 IAM 服務</strong><ul>
<li>搜尋並點選「IAM」服務</li>
</ul>
</li>
<li><strong>建立新使用者</strong><ul>
<li>左側選單點選「Users」</li>
<li>點擊「Create user」<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/6-create-user.png?raw=true"></li>
<li><strong>User name</strong>: 輸入 <code>s3-upload-user</code><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/7-user-name.png?raw=true"></li>
<li>點擊「Next」</li>
</ul>
</li>
<li><strong>設定權限</strong><ul>
<li>選擇「Attach policies directly」</li>
<li>搜尋並勾選「AmazonS3FullAccess」（簡單起見；生產環境建議使用更細緻的權限）<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/8-set-policy.png?raw=true"></li>
<li>點擊「Next」，然後「Create user」</li>
</ul>
</li>
<li><strong>建立 Access Key</strong><ul>
<li>點進剛建立的使用者</li>
<li>選擇「Security credentials」標籤</li>
<li>找到「Access keys」區塊，點擊「Create access key」<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/9-create-access-key.png?raw=true"></li>
<li>選擇「Application running outside AWS」<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/10-key-range.png?raw=true"></li>
<li>點擊「Next」</li>
<li>描述標籤：輸入「Node.js Upload App」</li>
<li>點擊「Create access key」</li>
<li><strong>重要！</strong> 複製並儲存：(等等需在 <code>.env</code> 設定)<ul>
<li><strong>Access key ID</strong> (類似：<code>AKIAIOSFODNN7EXAMPLE</code>)</li>
<li><strong>Secret access key</strong> (類似：<code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</code>)</li>
<li>⚠️ Secret key 只會顯示一次，請妥善保存！</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="第二部分：程式碼整合"><a href="#第二部分：程式碼整合" class="headerlink" title="第二部分：程式碼整合"></a>第二部分：程式碼整合</h2><h3 id="1-安裝-AWS-SDK"><a href="#1-安裝-AWS-SDK" class="headerlink" title="1. 安裝 AWS SDK"></a>1. 安裝 AWS SDK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @aws-sdk/client-s3</span><br><span class="line">npm install --save-dev @types/node</span><br></pre></td></tr></table></figure>

<h3 id="2-設定環境變數"><a href="#2-設定環境變數" class="headerlink" title="2. 設定環境變數"></a>2. 設定環境變數</h3><p>在您的 <code>.env</code> 檔案加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># AWS S3 設定</span><br><span class="line">AWS_REGION=ap-northeast-1</span><br><span class="line">AWS_ACCESS_KEY_ID=your-access-key-id</span><br><span class="line">AWS_SECRET_ACCESS_KEY=your-secret-access-key</span><br><span class="line">AWS_S3_BUCKET_NAME=my-ithome-2025-bucket</span><br></pre></td></tr></table></figure>

<h3 id="3-建立-S3-工具檔案"><a href="#3-建立-S3-工具檔案" class="headerlink" title="3. 建立 S3 工具檔案"></a>3. 建立 S3 工具檔案</h3><p>建立新檔案：<code>src/utils/s3Utils.ts</code></p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; S3Client &#125; <span class="keyword">from</span> <span class="string">&quot;@aws-sdk/client-s3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 S3 Client</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> s3Client = <span class="keyword">new</span> <span class="title function_">S3Client</span>(&#123;</span><br><span class="line">  <span class="attr">region</span>: process.<span class="property">env</span>.<span class="property">AWS_REGION</span> || <span class="string">&quot;ap-northeast-1&quot;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: &#123;</span><br><span class="line">    <span class="attr">accessKeyId</span>: process.<span class="property">env</span>.<span class="property">AWS_ACCESS_KEY_ID</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">secretAccessKey</span>: process.<span class="property">env</span>.<span class="property">AWS_SECRET_ACCESS_KEY</span> || <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bucketName = process.<span class="property">env</span>.<span class="property">AWS_S3_BUCKET_NAME</span> || <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-修改上傳-Controller"><a href="#4-修改上傳-Controller" class="headerlink" title="4. 修改上傳 Controller"></a>4. 修改上傳 Controller</h3><p>修改 <code>src/controllers/uploadController.ts</code>，新增一個使用 S3 的函式：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PutObjectCommand</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@aws-sdk/client-s3&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; s3Client, bucketName &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/s3Utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthRequest</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/isAuth&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/User&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上傳大頭照到 AWS S3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadAvatarToS3</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: AuthRequest,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 檢查是否有上傳檔案</span></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;請選擇要上傳的圖片檔案&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 檢查使用者是否已登入</span></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">user</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&quot;failed&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;請先登入&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 產生檔案路徑與名稱</span></span><br><span class="line">    <span class="keyword">const</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">const</span> ext = path.<span class="title function_">extname</span>(req.<span class="property">file</span>.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">`images/avatars/user-<span class="subst">$&#123;req.user.id&#125;</span>-<span class="subst">$&#123;timestamp&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 上傳到 S3</span></span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">new</span> <span class="title class_">PutObjectCommand</span>(&#123;</span><br><span class="line">      <span class="title class_">Bucket</span>: bucketName,</span><br><span class="line">      <span class="title class_">Key</span>: key,</span><br><span class="line">      <span class="title class_">Body</span>: req.<span class="property">file</span>.<span class="property">buffer</span>,</span><br><span class="line">      <span class="title class_">ContentType</span>: req.<span class="property">file</span>.<span class="property">mimetype</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> s3Client.<span class="title function_">send</span>(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 產生公開 URL</span></span><br><span class="line">    <span class="keyword">const</span> region = process.<span class="property">env</span>.<span class="property">AWS_REGION</span> || <span class="string">&quot;ap-northeast-1&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> publicUrl = <span class="string">`https://<span class="subst">$&#123;bucketName&#125;</span>.s3.<span class="subst">$&#123;region&#125;</span>.amazonaws.com/<span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 更新資料庫</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">AppDataSource</span>.<span class="title function_">getRepository</span>(<span class="title class_">User</span>).<span class="title function_">update</span>(</span><br><span class="line">      &#123; <span class="attr">id</span>: req.<span class="property">user</span>.<span class="property">id</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">profileUrl</span>: publicUrl &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 回傳成功訊息</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;大頭照上傳成功&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123; <span class="attr">avatarUrl</span>: publicUrl &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-更新路由"><a href="#5-更新路由" class="headerlink" title="5. 更新路由"></a>5. 更新路由</h3><p>修改 <code>src/routes/uploadRoutes.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  uploadAvatar,</span><br><span class="line">  uploadAvatarToS3,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../controllers/uploadController&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; imageUpload &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/imageUpload&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isAuth &#125; <span class="keyword">from</span> <span class="string">&quot;../middleware/isAuth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Firebase 版本（保留原有功能）</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/avatar&quot;</span>, isAuth, imageUpload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), uploadAvatar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// AWS S3 版本（新增）</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/avatar-s3&quot;</span>, isAuth, imageUpload.<span class="title function_">single</span>(<span class="string">&quot;file&quot;</span>), uploadAvatarToS3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="測試上傳檔案"><a href="#測試上傳檔案" class="headerlink" title="測試上傳檔案"></a>測試上傳檔案</h2><p>使用 Postman 測試：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/11-postman-test.png?raw=true"></p>
<p>查看資料庫 <code>profile_url</code> 欄位 : (成功填入檔案位址)</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/12-check-db.png?raw=true"></p>
<p>到 S3 查看檔案是否已經上傳 :</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day27-AWS-S3/13-check-s3.png?raw=true"></p>
<p>成功驗證檔案上傳！</p>
<hr>
<h2 id="重點提醒"><a href="#重點提醒" class="headerlink" title="重點提醒"></a>重點提醒</h2><ol>
<li><strong>不要將 AWS credentials 提交到 Git</strong><ul>
<li>確保 <code>.env</code> 在 <code>.gitignore</code> 中</li>
</ul>
</li>
<li><strong>成本考量</strong><ul>
<li>S3 儲存與流量都會收費，但非常便宜</li>
<li>可設定 Lifecycle policy 自動刪除舊檔案</li>
</ul>
</li>
</ol>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這次的實作，我們練習了：</p>
<ul>
<li>建立並設定 S3 Bucket</li>
<li>讓檔案可公開讀取</li>
<li>透過 Node.js 上傳檔案到雲端</li>
<li>並將結果寫回資料庫</li>
</ul>
<p>雖然看起來步驟很多，但這正是「真實世界後端」會遇到的流程。</p>
<p>加油！</p>
<hr>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><blockquote>
<p>commit :</p>
<p>feat: 🎸 integrate AWS S3 upload feature<br>新增 AWS S3 檔案上傳功能（s3Utils + uploadController + route）</p>
</blockquote>
<p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/89e8d3de7355d24c174923dc0a4606874a4920fa">Github 連結</a></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 29 - AWS IAM 入門：讓雲端安全運作的身分與權限管理</title>
    <url>/2025/10/13/Day29%20-%20AWS-IAM/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前一篇，我們探索了 AWS 的網路基礎 —— <strong>VPC</strong>。</p>
<p>有了網路邊界之後，雲端服務之間可以安全地連線與隔離。</p>
<p>但接下來還有一個更關鍵的問題：</p>
<blockquote>
<p>「誰能登入你的 AWS？誰能刪除資料？誰能動到伺服器？」</p>
</blockquote>
<p>這，就是 AWS 的安全核心 —— <strong>IAM（Identity and Access Management）</strong>。</p>
<span id="more"></span>

<hr>
<h2 id="一、什麼是-IAM？"><a href="#一、什麼是-IAM？" class="headerlink" title="一、什麼是 IAM？"></a>一、什麼是 IAM？</h2><blockquote>
<p>💡 一句話理解：</p>
<p><strong>IAM 是 AWS 的身分與權限控管系統，負責決定「誰能做什麼」。</strong></p>
</blockquote>
<p>IAM 的全名是 <strong>Identity and Access Management</strong>，</p>
<p>它幫助我們在雲端中安全地管理：</p>
<ul>
<li>使用者（User）</li>
<li>權限（Policy）</li>
<li>群組（Group）</li>
<li>角色（Role）</li>
</ul>
<p>換句話說，VPC 解決「資料怎麼流」，</p>
<p>IAM 則解決「人與服務能不能動這些資料」。</p>
<hr>
<h2 id="二、為什麼需要-IAM？"><a href="#二、為什麼需要-IAM？" class="headerlink" title="二、為什麼需要 IAM？"></a>二、為什麼需要 IAM？</h2><p>想像你開了一家公司：</p>
<ul>
<li>EC2 是你的伺服器</li>
<li>RDS 是資料庫</li>
<li>S3 是雲端儲存櫃</li>
<li>而 IAM 就是你的「門禁系統」</li>
</ul>
<p>如果沒有 IAM，</p>
<p>那所有人都能進 AWS 控制台、刪資料、上傳亂七八糟的檔案 😱</p>
<p>IAM 的目標是確保：</p>
<ol>
<li><strong>每個人都有自己的身分</strong>（誰在操作）</li>
<li><strong>每個身分都有明確權限</strong>（能做什麼）</li>
<li><strong>服務之間的互動是安全的</strong>（程式彼此授權）</li>
</ol>
<hr>
<h2 id="三、IAM-的四大核心概念"><a href="#三、IAM-的四大核心概念" class="headerlink" title="三、IAM 的四大核心概念"></a>三、IAM 的四大核心概念</h2><table>
<thead>
<tr>
<th>名稱</th>
<th>定義</th>
<th>舉例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>User</strong></td>
<td>真實使用者帳號（開發者、管理員）</td>
<td>你的個人登入帳號</td>
</tr>
<tr>
<td><strong>Group</strong></td>
<td>一群使用者，方便統一設定權限</td>
<td>後端開發組 &#x2F; 財務組</td>
</tr>
<tr>
<td><strong>Role</strong></td>
<td>給服務使用的「臨時身分」</td>
<td>EC2 或 Lambda 角色</td>
</tr>
<tr>
<td><strong>Policy</strong></td>
<td>JSON 格式的權限規則，定義能做什麼事</td>
<td>允許 <code>s3:GetObject</code> 讀取檔案</td>
</tr>
</tbody></table>
<hr>
<h3 id="小例子："><a href="#小例子：" class="headerlink" title="小例子："></a>小例子：</h3><p>一個典型的 Policy（權限規則）長這樣：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-10-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3:GetObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;arn:aws:s3:::my-ithome-bucket/*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>它的意思是：</p>
<blockquote>
<p>「允許這個使用者從指定的 S3 bucket 讀取檔案。」</p>
</blockquote>
<hr>
<h2 id="四、IAM-的運作邏輯"><a href="#四、IAM-的運作邏輯" class="headerlink" title="四、IAM 的運作邏輯"></a>四、IAM 的運作邏輯</h2><p>IAM 的權限設計有兩個層面：</p>
<ol>
<li><strong>身份驗證（Authentication）</strong><ul>
<li>你是誰？（User &#x2F; Role）</li>
<li>如何登入？（密碼、多重驗證、Access Key）</li>
</ul>
</li>
<li><strong>授權（Authorization）</strong><ul>
<li>你能做什麼？（根據附加的 Policy）</li>
<li>對哪些資源？（S3、EC2、RDS…）</li>
</ul>
</li>
</ol>
<blockquote>
<p>✅ AWS 的安全哲學：「一切都預設禁止，除非被允許。」</p>
</blockquote>
<p>也就是說，沒有被 Policy 明確授權的動作，都會被拒絕。</p>
<hr>
<h2 id="五、IAM-的常見應用情境"><a href="#五、IAM-的常見應用情境" class="headerlink" title="五、IAM 的常見應用情境"></a>五、IAM 的常見應用情境</h2><table>
<thead>
<tr>
<th>應用場景</th>
<th>做法</th>
</tr>
</thead>
<tbody><tr>
<td><strong>開發團隊多人共用 AWS</strong></td>
<td>為每個人建立 IAM User，分配對應權限</td>
</tr>
<tr>
<td><strong>EC2 要存取 S3</strong></td>
<td>建立 IAM Role 掛到 EC2 上（不用明文金鑰）</td>
</tr>
<tr>
<td><strong>前端要讀取特定 S3 內容</strong></td>
<td>建立具有限制的 Policy，允許 <code>s3:GetObject</code></td>
</tr>
<tr>
<td><strong>CI&#x2F;CD Pipeline 部署</strong></td>
<td>為 GitHub Actions 或 CodeBuild 建立部署角色</td>
</tr>
</tbody></table>
<hr>
<h2 id="六、安全最佳實踐"><a href="#六、安全最佳實踐" class="headerlink" title="六、安全最佳實踐"></a>六、安全最佳實踐</h2><h3 id="1-最小權限原則（Least-Privilege）"><a href="#1-最小權限原則（Least-Privilege）" class="headerlink" title="1.最小權限原則（Least Privilege）"></a>1.最小權限原則（Least Privilege）</h3><blockquote>
<p>給使用者只需要的權限，不多不少。</p>
<p>不要為方便而附加「AdministratorAccess」。</p>
</blockquote>
<h3 id="2-一人一帳號"><a href="#2-一人一帳號" class="headerlink" title="2.一人一帳號"></a>2.一人一帳號</h3><p>不要共用 root 帳號或同一組 Access Key，</p>
<p>建立各自的 IAM User 並開啟 MFA。</p>
<h3 id="3-優先使用-Role，少用-Access-Key"><a href="#3-優先使用-Role，少用-Access-Key" class="headerlink" title="3.優先使用 Role，少用 Access Key"></a>3.優先使用 Role，少用 Access Key</h3><p>金鑰容易洩漏；Role 可安全地授權給 EC2、Lambda。</p>
<h3 id="4-定期檢查權限與使用紀錄"><a href="#4-定期檢查權限與使用紀錄" class="headerlink" title="4.定期檢查權限與使用紀錄"></a>4.定期檢查權限與使用紀錄</h3><p>使用 AWS CloudTrail 或 IAM Access Analyzer，</p>
<p>檢查是否有過度開放的權限。</p>
<hr>
<h2 id="七、IAM-與其他服務的關係"><a href="#七、IAM-與其他服務的關係" class="headerlink" title="七、IAM 與其他服務的關係"></a>七、IAM 與其他服務的關係</h2><table>
<thead>
<tr>
<th>服務</th>
<th>IAM 的角色</th>
</tr>
</thead>
<tbody><tr>
<td><strong>EC2</strong></td>
<td>使用 IAM Role 存取 S3 或 RDS</td>
</tr>
<tr>
<td><strong>Lambda</strong></td>
<td>以 Role 執行雲端任務（安全且短期）</td>
</tr>
<tr>
<td><strong>S3</strong></td>
<td>透過 Policy 管控誰能上傳、讀取</td>
</tr>
<tr>
<td><strong>CloudWatch &#x2F; CloudTrail</strong></td>
<td>搭配 IAM 記錄操作紀錄與審查行為</td>
</tr>
</tbody></table>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天，我們理解了 AWS 的核心安全哲學：</p>
<blockquote>
<p>網路的安全靠 VPC，行為的安全靠 IAM。</p>
</blockquote>
<p>VPC 幫你築起圍牆，</p>
<p>而 IAM 幫你決定「誰能進出、能做什麼」。</p>
<p>掌握 IAM，就等於掌握了 AWS 的「金鑰」。</p>
<p>它不只是設定權限的工具，更是保障整個雲端架構安全的最後防線。</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 3 - TypeScript 核心語法 (1)：型別系統與核心</title>
    <url>/2025/09/17/Day3%20-%20TypeScript%20%E6%A0%B8%E5%BF%83%E8%AA%9E%E6%B3%95%20(1)/</url>
    <content><![CDATA[<p>前兩天我們介紹了 TypeScript 的背景與價值，今天要開始動手寫程式碼，從最常見的 <strong>基本型別</strong> 與 <strong>型別推斷 &#x2F; 型別註記</strong> 講起。</p>
<hr>
<h2 id="1-基本常用型別"><a href="#1-基本常用型別" class="headerlink" title="1. 基本常用型別"></a>1. 基本常用型別</h2><p>TypeScript 在 JavaScript 基礎上，提供了更嚴謹的型別檢查。以下是常見的基本型別：</p>
<ul>
<li><strong>string</strong>：字串</li>
<li><strong>number</strong>：數字（整數、浮點數都屬於 number）</li>
<li><strong>boolean</strong>：布林值（true&#x2F;false）</li>
<li><strong>array</strong>：陣列</li>
<li><strong>object</strong>：物件，可指定 key 與 value 的型別</li>
<li><strong>null</strong> &#x2F; <strong>undefined</strong>：空值與未定義<span id="more"></span></li>
<li><strong>any</strong>：跳過型別檢查，不建議常用</li>
<li><strong>unknown</strong>：安全版的 any，需要檢查後才能使用</li>
<li><strong>void</strong>：通常用在函式沒有回傳值時</li>
</ul>
<p>我們用「搭火車」這個情境，來把 <strong>基本型別</strong> 串在一起，這樣學起來更有畫面。以下是範例：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 搭火車的情境</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘客名字（string）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">passengerName</span>: <span class="built_in">string</span> = <span class="string">&quot;Arvin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 年齡（number）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否已經買票（boolean）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isBuyTicket</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行李（array）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">packages</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;背包&quot;</span>, <span class="string">&quot;行李箱&quot;</span>, <span class="string">&quot;Mac&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 車票（object）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ticket</span>: &#123; <span class="attr">start</span>: <span class="built_in">string</span>; <span class="attr">destination</span>: <span class="built_in">string</span>; <span class="attr">price</span>: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">start</span>: <span class="string">&quot;台南&quot;</span>,</span><br><span class="line">  <span class="attr">destination</span>: <span class="string">&quot;台北&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">750</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不確定的外部輸入（unknown）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">inputSeat</span>: <span class="built_in">unknown</span> = <span class="string">&quot;A12&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> inputSeat === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`座位號碼是 <span class="subst">$&#123;inputSeat&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不小心遺失票券（null &amp; undefined）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">lostTicket</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notAssignedSeat</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// any（不建議，但有時候需要先用）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">randomInfo</span>: <span class="built_in">any</span> = <span class="string">&quot;隨便的資訊&quot;</span>;</span><br><span class="line">randomInfo = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void：檢查是否有買票（沒有回傳值）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkTicket</span>(<span class="params">name: <span class="built_in">string</span>, hasTicket: <span class="built_in">boolean</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasTicket) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> 已經買票，可以進站！`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> 尚未購票！`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkTicket</span>(passengerName, isBuyTicket);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-型別推斷-vs-型別註記"><a href="#2-型別推斷-vs-型別註記" class="headerlink" title="2. 型別推斷 vs 型別註記"></a>2. 型別推斷 vs 型別註記</h2><p>TypeScript 在很多情況下會自動「推斷型別」：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> trainStation = <span class="string">&quot;台北&quot;</span>; <span class="comment">// 推斷為 string</span></span><br><span class="line"><span class="keyword">let</span> ticketPrice = <span class="number">500</span>; <span class="comment">// 推斷為 number</span></span><br></pre></td></tr></table></figure>

<p>但有時候我們需要 <strong>手動註記型別</strong>，讓程式碼更清楚：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">trainStation</span>: <span class="built_in">string</span> = <span class="string">&quot;台北&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ticketPrice</span>: <span class="built_in">number</span> = <span class="number">500</span>;</span><br></pre></td></tr></table></figure>

<h3 id="差異比較"><a href="#差異比較" class="headerlink" title="差異比較"></a>差異比較</h3><ul>
<li><strong>型別推斷</strong>：程式更簡潔，讓 TS 自動判斷。</li>
<li><strong>型別註記</strong>：在需要 <strong>可讀性</strong>、<strong>強制規範</strong>、或 <strong>複雜物件</strong> 時更適合。</li>
</ul>
<hr>
<h2 id="3-簡單使用場景"><a href="#3-簡單使用場景" class="headerlink" title="3. 簡單使用場景"></a>3. 簡單使用場景</h2><h3 id="✅-適合用型別推斷"><a href="#✅-適合用型別推斷" class="headerlink" title="✅ 適合用型別推斷"></a>✅ 適合用型別推斷</h3><p>當值一看就知道型別，TS 自動判斷即可。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> trainName = <span class="string">&quot;自強號&quot;</span>; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">let</span> travelTime = <span class="number">120</span>; <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<h3 id="✅-適合用型別註記"><a href="#✅-適合用型別註記" class="headerlink" title="✅ 適合用型別註記"></a>✅ 適合用型別註記</h3><ol>
<li><strong>函式參數與回傳值</strong>（TS 無法從空參數自動推斷，必須標註）</li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buyTicket</span>(<span class="params">start: <span class="built_in">string</span>, destination: <span class="built_in">string</span>, price: <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`已購買從 <span class="subst">$&#123;start&#125;</span> 到 <span class="subst">$&#123;destination&#125;</span> 的車票，票價 <span class="subst">$&#123;price&#125;</span> 元`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>物件結構清楚表達</strong></li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">passenger</span>: &#123; <span class="attr">id</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">hasTicket</span>: <span class="built_in">boolean</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">  <span class="attr">hasTicket</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>與 API 或外部資料互動</strong></li>
</ol>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TrainApiResponse</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">stations</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">TrainApiResponse</span> = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">stations</span>: [<span class="string">&quot;台北&quot;</span>, <span class="string">&quot;新竹&quot;</span>, <span class="string">&quot;台中&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>基本型別</strong>是 TypeScript 的基礎：<code>string</code>、<code>number</code>、<code>boolean</code>、<code>array</code>、<code>object</code>、<code>null</code>、<code>undefined</code>…</li>
<li><strong>型別推斷</strong>：讓程式更簡潔。</li>
<li><strong>型別註記</strong>：在函式、物件、API 回傳值等情境中特別重要。</li>
</ul>
<p>👉 明天（Day 4）我們會進一步介紹 union、enum，讓型別系統更靈活！</p>
<hr>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 30 - 讓 TypeScript 把你的 Node.js 開發再升級 — 心得與完整目錄</title>
    <url>/2025/10/14/Day30%20-%20Contents/</url>
    <content><![CDATA[<h2 id="前言-心得"><a href="#前言-心得" class="headerlink" title="前言 &amp; 心得"></a>前言 &amp; 心得</h2><p>終於完賽了！🎉</p>
<p>每天數著日子發文，終於順利完成了第十七屆鐵人賽——真的超怕中途斷賽 😭</p>
<p>其實從以前開始開發時，就常常透過搜尋看到許多前輩在鐵人賽上的文章，</p>
<p>那時候覺得這是一個很酷的挑戰，也從中學到了不少東西。</p>
<p>所以今年就想給自己一個機會，從讀者變成參賽者，親自體驗這 30 天的歷程。</p>
<span id="more"></span>

<p>由於這系列文章有不少實作與程式碼範例，</p>
<p>中間花了很多時間在測試、除錯、重跑流程，</p>
<p>一開始還有囤一點備稿，但進入中後期幾乎是「邊學邊寫、日更實戰」。</p>
<p>回頭看，真的蠻酷的。</p>
<p>每天一小步、一點一滴的累積，最後竟然能完成一個完整的教學系列。</p>
<p>這份成就感比想像中還要強烈。</p>
<hr>
<h2 id="系列目錄"><a href="#系列目錄" class="headerlink" title="系列目錄"></a>系列目錄</h2><p>為了讓讀者能更方便回顧整個系列，以下我將內容分為五大階段 👇</p>
<hr>
<h3 id="1-TypeScript-核心語法與基礎複習"><a href="#1-TypeScript-核心語法與基礎複習" class="headerlink" title="1. TypeScript 核心語法與基礎複習"></a><strong>1. TypeScript 核心語法與基礎複習</strong></h3><p>進入實戰前，先複習並掌握 TypeScript 的核心觀念，建立「型別思維」。</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10381757">Day 3 ｜ TypeScript 核心語法 (1)：型別系統、基本型別</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10382560">Day 4 ｜ TypeScript 核心語法 (2)：Union、Enum</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10382689">Day 5 ｜ TypeScript 核心語法 (3)：interface、type、泛型</a></li>
</ul>
<hr>
<h3 id="2-基礎建置與環境設定"><a href="#2-基礎建置與環境設定" class="headerlink" title="2. 基礎建置與環境設定"></a><strong>2. 基礎建置與環境設定</strong></h3><p>從零開始建立一個完善的 TypeScript + Node.js 開發環境，</p>
<p>完成簡單的 API 實作，最後部署到 Render 雲端服務。</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10384075">Day 6 ｜建立 TypeScript + Node.js 環境 (1)：初始化專案</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10384080">Day 7 ｜建立 TypeScript + Node.js 環境 (2)：專案架構與資料庫設定</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10385326">Day 8 ｜打造你的第一個 TodoList API：一步步實現 CRUD 功能</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10386281">Day 9 ｜ Render 雲端啟動：資料庫連線全攻略</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10386893">Day 10 ｜部署啟程！從 Render 部署前置作業到 GitHub PR</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10387580">Day 11 ｜一鍵上線！完整部署到 Render 的實戰流程</a></li>
</ul>
<hr>
<h3 id="3-專案工具與進階功能"><a href="#3-專案工具與進階功能" class="headerlink" title="3. 專案工具與進階功能"></a><strong>3. 專案工具與進階功能</strong></h3><p>讓專案更專業！導入程式碼格式化工具、API 驗證、使用者登入驗證，</p>
<p>並探索如何串接雲端檔案上傳。</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10388279">Day 12 ｜程式碼自動排版神器：Prettier 實戰導入</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10388768">Day 13 ｜一致的程式碼：ESLint 導入</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10388774">Day 14 ｜ API 驗證救星：用 Zod 驗證來檢查</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10390867">Day 15 ｜ API 安全升級：JWT 登入驗證全流程實作</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10391259">Day 16 ｜ Firebase Storage 初探：輕鬆搞定專案檔案上傳前置作業</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10391803">Day 17 ｜ Firebase Storage 實戰：用 Node.js + multer 上傳圖片到雲端</a></li>
</ul>
<hr>
<h3 id="4-後端常見進階應用"><a href="#4-後端常見進階應用" class="headerlink" title="4. 後端常見進階應用"></a><strong>4. 後端常見進階應用</strong></h3><p>這部分涵蓋專案升級必備的實務主題：日誌系統、Migration 管理、CI&#x2F;CD 自動化流程。</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10392321">Day 18 ｜ console.log 退役啦！Node.js Pino 帶你升級專案 Log</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10392467">Day 19 ｜專案升級必備：資料庫 Migration 實戰</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10393411">Day 20 ｜從 0 到自動化：開啟你的第一個 GitHub Actions 旅程</a></li>
</ul>
<hr>
<h3 id="5-雲端部署與維護"><a href="#5-雲端部署與維護" class="headerlink" title="5. 雲端部署與維護"></a><strong>5. 雲端部署與維護</strong></h3><p>最後，我們將專案部署到 AWS 雲端，探索雲端的核心服務與概念。</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10393772">Day 21 ｜ AWS 初探 (1)：什麼是雲端服務？</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10394112">Day 22 ｜ AWS 初探 (2)：破關拿獎金・預算防護</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10394375">Day 23 ｜從零啟動雲端主機：帶你開出第一台 AWS EC2！</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10394986">Day 24 ｜從本地到雲端：把你的 Node.js 專案部署上 AWS EC2！</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10395279">Day 25 ｜ AWS RDS 入門：在雲端打造你的第一個資料庫服務</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10395419">Day 26 ｜雲端串接實戰：Node.js 成功連上 AWS RDS！</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10395913">Day 27 ｜ AWS S3 實作檔案上傳：打造你的雲端檔案儲存中心</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10396471">Day 28 ｜ AWS VPC 入門：初探雲端世界的隱形網路</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10396573">Day 29 ｜ AWS IAM 入門：讓雲端安全運作的身分與權限管理</a></li>
</ul>
<hr>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>挑戰鐵人賽真的不容易。</p>
<p>每天想主題、寫內容、驗證程式、排版、上圖，還要兼顧可讀性與教學節奏。</p>
<p>有時候邊寫邊懷疑：「我真的寫得完嗎？」</p>
<p>但一步步走到這裡，才發現<strong>堅持本身就是一種力量。</strong></p>
<p>感謝這三十天以來所有閱讀、按讚、留言、給建議的朋友們，</p>
<p>你們的互動都是我撐下去的重要動力 ❤️</p>
<p>如果這個系列能讓你對 TypeScript + Node.js</p>
<p>或是部署到雲端的流程有更清晰的理解，那就太值得了。</p>
<p>未來我也會持續更新相關技術主題，</p>
<p>讓我們在開發這條路上，一起學習、一起成長。</p>
<h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2><ul>
<li><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/tree/feature/init-ts-express">GitHub 專案原始碼</a></li>
<li><a href="https://arvinyang1925.github.io/">個人部落格</a></li>
</ul>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 4 - TypeScript 核心語法 (2)：union、enum</title>
    <url>/2025/09/18/Day4%20-%20TypeScript%20%E6%A0%B8%E5%BF%83%E8%AA%9E%E6%B3%95%20(2)/</url>
    <content><![CDATA[<p>昨天我們介紹了基本型別，今天要進一步學會 <strong>Union Type（聯合型別）</strong> 和 <strong>Enum（列舉）</strong>。</p>
<p>這次一樣用「搭火車」的例子 🚄，讓程式碼更貼近生活！</p>
<span id="more"></span>

<hr>
<h2 id="1-Union-Type（聯合型別）"><a href="#1-Union-Type（聯合型別）" class="headerlink" title="1. Union Type（聯合型別）"></a>1. Union Type（聯合型別）</h2><p>Union 的特色是用 <strong><code>|</code></strong> 將多種可能型別區分開來。</p>
<p>當一個值可能有「多種型別」時，Union 非常好用。</p>
<h3 id="搭火車範例：乘客的票號"><a href="#搭火車範例：乘客的票號" class="headerlink" title="搭火車範例：乘客的票號"></a>搭火車範例：乘客的票號</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">ticketId</span>: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">ticketId = <span class="number">12345</span>; <span class="comment">// 數字型票號</span></span><br><span class="line">ticketId = <span class="string">&quot;A12&quot;</span>; <span class="comment">// 字串型票號</span></span><br><span class="line"><span class="comment">// ticketId = true; // ❌ 編譯錯誤</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="常見搭配：型別守衛-Type-Guards"><a href="#常見搭配：型別守衛-Type-Guards" class="headerlink" title="常見搭配：型別守衛 (Type Guards)"></a>常見搭配：型別守衛 (Type Guards)</h3><p>在使用 Union 時，我們通常需要用 <strong><code>typeof</code></strong> 來判斷型別後再操作，避免出錯。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printTicketId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;票號（字串）：&quot;</span> + id.<span class="title function_">toUpperCase</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;票號（數字）：&quot;</span> + id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printTicketId</span>(<span class="number">12345</span>);</span><br><span class="line"><span class="title function_">printTicketId</span>(<span class="string">&quot;b23&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Union-Type-補充說明-🚉"><a href="#Union-Type-補充說明-🚉" class="headerlink" title="Union Type 補充說明 🚉"></a>Union Type 補充說明 🚉</h3><ul>
<li><strong>優點</strong>：<ol>
<li>適合處理「多種可能型別」的情境，例如 <strong>API 回傳值</strong> 或 <strong>使用者輸入</strong>。</li>
<li>可以搭配 <strong>Type Guards</strong> 提高安全性。</li>
</ol>
</li>
<li><strong>常見使用場景</strong>：<ul>
<li>車票 ID（可能是數字 &#x2F; 字串）</li>
<li>車廂座位（可能是 “A12” 也可能是 12）</li>
<li>付款方式（可能是 “現金” | “信用卡” | “行動支付”）</li>
</ul>
</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PaymentMethod</span> = <span class="string">&quot;Cash&quot;</span> | <span class="string">&quot;CreditCard&quot;</span> | <span class="string">&quot;MobilePay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">payment</span>: <span class="title class_">PaymentMethod</span>;</span><br><span class="line"></span><br><span class="line">payment = <span class="string">&quot;Cash&quot;</span>; <span class="comment">// ✅</span></span><br><span class="line">payment = <span class="string">&quot;MobilePay&quot;</span>; <span class="comment">// ✅</span></span><br><span class="line"><span class="comment">// payment = &quot;Coupon&quot;;  // ❌ 不在定義範圍</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-Enum（列舉）"><a href="#2-Enum（列舉）" class="headerlink" title="2. Enum（列舉）"></a>2. Enum（列舉）</h2><p>Enum 適合定義「固定範圍內的值」，比 Union 更有「名稱 → 值」的對應關係。</p>
<h3 id="搭火車範例：車票狀態"><a href="#搭火車範例：車票狀態" class="headerlink" title="搭火車範例：車票狀態"></a>搭火車範例：車票狀態</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TicketStatus</span> &#123;</span><br><span class="line">  <span class="title class_">NotBought</span>, <span class="comment">// 尚未購買</span></span><br><span class="line">  <span class="title class_">Bought</span>, <span class="comment">// 已購票</span></span><br><span class="line">  <span class="title class_">Used</span>, <span class="comment">// 已使用</span></span><br><span class="line">  <span class="title class_">Expired</span>, <span class="comment">// 已過期</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myTicket</span>: &#123; <span class="attr">passenger</span>: <span class="built_in">string</span>; <span class="attr">status</span>: <span class="title class_">TicketStatus</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">passenger</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="title class_">TicketStatus</span>.<span class="property">Bought</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myTicket);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Enum-陣列應用：乘客清單"><a href="#Enum-陣列應用：乘客清單" class="headerlink" title="Enum + 陣列應用：乘客清單"></a>Enum + 陣列應用：乘客清單</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">passengers</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">status</span>: <span class="title class_">TicketStatus</span> &#125;[] = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addPassenger</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  passengers.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">status</span>: <span class="title class_">TicketStatus</span>.<span class="property">NotBought</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addPassenger</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="title function_">addPassenger</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(passengers);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Enum-設定字串值（更直觀）"><a href="#Enum-設定字串值（更直觀）" class="headerlink" title="Enum 設定字串值（更直觀）"></a>Enum 設定字串值（更直觀）</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TrainClass</span> &#123;</span><br><span class="line">  <span class="title class_">Express</span> = <span class="string">&quot;自強號&quot;</span>,</span><br><span class="line">  <span class="title class_">Local</span> = <span class="string">&quot;區間車&quot;</span>,</span><br><span class="line">  <span class="title class_">HighSpeed</span> = <span class="string">&quot;高鐵&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printTrainClass</span>(<span class="params">c: TrainClass</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;列車種類：&quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printTrainClass</span>(<span class="title class_">TrainClass</span>.<span class="property">Express</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Enum-補充說明-🚆"><a href="#Enum-補充說明-🚆" class="headerlink" title="Enum 補充說明 🚆"></a>Enum 補充說明 🚆</h3><ul>
<li><strong>優點</strong>：<ol>
<li>讓「固定選項」更清楚（比字串常數更有語意）。</li>
<li>避免拼錯字串（TS 編譯時就會檢查錯誤）。</li>
<li>可讀性高，適合大型專案。</li>
</ol>
</li>
<li><strong>常見使用場景</strong>：<ul>
<li>票券狀態（已購買 &#x2F; 未購買 &#x2F; 已使用 &#x2F; 過期）</li>
<li>列車種類（自強號 &#x2F; 區間車 &#x2F; 高鐵）</li>
<li>座位等級（普通 &#x2F; 商務 &#x2F; 頭等）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>Union Type</strong>：讓一個變數可以有多種型別，常用於「票號、付款方式」這類不確定型別的場景。</li>
<li><strong>Enum</strong>：讓「固定範圍的值」更有語意，常用於「票券狀態、列車種類、座位等級」。</li>
<li>Union 靈活，Enum 嚴謹 —— 搭配使用可以讓程式碼更乾淨又安全。</li>
</ul>
<p>👉 明天（Day 5）我們會介紹 <strong>interface</strong> 和 <strong>type</strong>，讓我們的火車旅程更結構化！ 🚉</p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 6 - 如何建立一個 TypeScript + Node.js 環境 (1)：初始化專案</title>
    <url>/2025/09/20/Day6%20-%20Node.js%20+%20TS%20(1)/</url>
    <content><![CDATA[<p>昨天我們聊了很多概念，今天開始要<strong>動手實作</strong>啦！💻</p>
<p>我們的目標很簡單：建立一個能跑起來的 <strong>TypeScript + Node.js 專案環境</strong>，並讓瀏覽器成功回應 <strong>「Hello, iThome2025 !」</strong> 🚀</p>
<p>準備好了嗎？Let’s go！</p>
<span id="more"></span>

<hr>
<h2 id="一、專案初始化"><a href="#一、專案初始化" class="headerlink" title="一、專案初始化"></a>一、專案初始化</h2><h3 id="1-開一個專案資料夾"><a href="#1-開一個專案資料夾" class="headerlink" title="1. 開一個專案資料夾"></a>1. 開一個專案資料夾</h3><p>你可以直接在電腦裡開一個新資料夾，或是從 GitHub Clone 專案下來。</p>
<p>這邊示範 Git 版本，順便練習一下分支管理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;你的專案網址&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;專案資料夾&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立 develop 分支</span></span><br><span class="line">git checkout -b develop</span><br><span class="line">git push --set-upstream origin develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立功能分支</span></span><br><span class="line">git checkout -b feature/init-ts-express</span><br><span class="line">git push --set-upstream origin feature/init-ts-express</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>👉 這樣就能在一個乾淨的分支上開始開發，方便日後合併 PR。</p>
<hr>
<h3 id="2-加上-gitignore"><a href="#2-加上-gitignore" class="headerlink" title="2. 加上 .gitignore"></a>2. 加上 <code>.gitignore</code></h3><p>為了避免「一些不必要的檔案」被推到 GitHub，我們要新增一個 <code>.gitignore</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Node modules</span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"># Logs</span><br><span class="line">logs/</span><br><span class="line">*.log</span><br><span class="line">npm-debug.log*</span><br><span class="line"></span><br><span class="line"># Environment variables</span><br><span class="line">.env</span><br><span class="line"></span><br><span class="line"># Build output</span><br><span class="line">dist/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># TypeScript cache</span><br><span class="line">*.tsbuildinfo</span><br><span class="line"></span><br><span class="line"># OS / Editor 系統檔案</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line"></span><br><span class="line"># VS Code 設定</span><br><span class="line">.vscode/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>小提醒</strong>：這一步很容易被忽略，但很重要，因為上傳 <code>node_modules</code> 到 GitHub 真的有可能會被嫌棄 😅</p>
<hr>
<h3 id="3-初始化-Node-js-專案"><a href="#3-初始化-Node-js-專案" class="headerlink" title="3. 初始化 Node.js 專案"></a>3. 初始化 Node.js 專案</h3><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這會快速生成一個 <code>package.json</code>，裡面記錄專案資訊和套件清單。</p>
<p>按下 <code>-y</code> 代表接受所有預設值，超省時！👌</p>
<hr>
<h2 id="二、安裝必要套件"><a href="#二、安裝必要套件" class="headerlink" title="二、安裝必要套件"></a>二、安裝必要套件</h2><p>我們的工具包包含：</p>
<ul>
<li><strong>Express</strong>：後端 API 框架</li>
<li><strong>TypeScript</strong>：型別安全</li>
<li><strong>@types</strong>：型別定義檔</li>
<li><strong>ts-node-dev</strong>：開發時自動編譯 + 重啟</li>
</ul>
<p>一次裝好：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm install -D typescript @types/express @types/node ts-node-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>裝完後，<code>package.json</code> 的 <code>dependencies</code> 和 <code>devDependencies</code> 就會多出這些小夥伴。</p>
<hr>
<h2 id="三、設定-TypeScript"><a href="#三、設定-TypeScript" class="headerlink" title="三、設定 TypeScript"></a>三、設定 TypeScript</h2><h3 id="1-建立-tsconfig-json"><a href="#1-建立-tsconfig-json" class="headerlink" title="1. 建立 tsconfig.json"></a>1. 建立 <code>tsconfig.json</code></h3><p>輸入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx tsc --init</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>這會生成 <code>tsconfig.json</code>。接著編輯成以下版本（直接覆蓋即可）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span> <span class="comment">// 用 ES2020 的 JavaScript 版本</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 用 CommonJS 模組</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 編譯輸出目錄</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span> <span class="comment">// 程式碼根目錄</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 啟用嚴格型別檢查</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 支援模組互操作</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 啟用裝飾器語法</span></span><br><span class="line">    <span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 為 TypeORM 生成元數據</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 編譯 src 資料夾內的檔案</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span> <span class="comment">// 排除 node_modules</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>這邊要記住幾個關鍵設定：</p>
<ul>
<li><code>rootDir</code> → 原始碼放哪裡</li>
<li><code>outDir</code> → 編譯輸出到哪裡</li>
<li><code>strict</code> → 打開型別檢查，保護你的程式碼</li>
<li><code>experimentalDecorators</code> + <code>emitDecoratorMetadata</code> → 為之後用 TypeORM 預先鋪路</li>
</ul>
<p>然後新增一個 <code>src</code> 資料夾：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> src</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、寫第一支程式-🚀"><a href="#四、寫第一支程式-🚀" class="headerlink" title="四、寫第一支程式 🚀"></a>四、寫第一支程式 🚀</h2><p>在 <code>src</code> 裡新增 <code>app.ts</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> src/app.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>寫入以下內容：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, iThome2025!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 Server running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>到這裡，你已經完成一個最小可運行的 Express + TS 程式！🎉</p>
<hr>
<h2 id="五、啟動與測試"><a href="#五、啟動與測試" class="headerlink" title="五、啟動與測試"></a>五、啟動與測試</h2><h3 id="1-修改-package-json"><a href="#1-修改-package-json" class="headerlink" title="1. 修改 package.json"></a>1. 修改 <code>package.json</code></h3><p>在 <code>scripts</code> 中加上：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node-dev src/app.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-啟動伺服器"><a href="#2-啟動伺服器" class="headerlink" title="2. 啟動伺服器"></a>2. 啟動伺服器</h3><p>執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果一切順利，你會看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🚀 Server running on http://localhost:3000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-開瀏覽器測試"><a href="#3-開瀏覽器測試" class="headerlink" title="3. 開瀏覽器測試"></a>3. 開瀏覽器測試</h3><p>輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看到 **Hello, iThome2025 !**，就代表環境完成 ✅</p>
<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天我們完成了專案初始化的整個流程：</p>
<ul>
<li>Git 分支管理</li>
<li>設定 <code>.gitignore</code></li>
<li>初始化 <code>package.json</code></li>
<li>安裝必要套件</li>
<li>設定 TypeScript</li>
<li>建立第一個 Express 程式</li>
</ul>
<p>從現在開始，你已經有一個能跑起來的 <strong>TypeScript + Node.js 開發環境</strong> 🎯</p>
<p>明天，我們會進一步讓專案結構更有組織感，並準備好迎接更複雜的 API 開發。</p>
<hr>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/tree/feature/init-ts-express">Github 範例程式碼</a></p>
<blockquote>
<p>commit message: Day 6 - set up Express + TS environment</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 5 - TypeScript 核心語法 (3)：interface、type、generics</title>
    <url>/2025/09/19/Day5%20-%20TypeScript%20-%20interface%E3%80%81type%E3%80%81generics/</url>
    <content><![CDATA[<p>昨天我們介紹了 <strong>Union</strong> 和 <strong>Enum</strong>，今天要進一步學習如何用 <strong>Interface、Type、Generics</strong> 來讓程式更有結構、更可重用。</p>
<p>這次一樣用「搭火車」的例子 🚄，幫助你快速理解！</p>
<span id="more"></span>

<hr>
<h2 id="1-Interface（介面）"><a href="#1-Interface（介面）" class="headerlink" title="1. Interface（介面）"></a>1. Interface（介面）</h2><p>介面用來定義「物件的形狀」，就像規劃「火車乘客」需要有什麼資料。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Passenger</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  seat?: <span class="built_in">string</span>; <span class="comment">// 可選屬性（可能沒劃位）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerA</span>: <span class="title class_">Passenger</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerB</span>: <span class="title class_">Passenger</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">seat</span>: <span class="string">&quot;A12&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>👉 特點：</p>
<ul>
<li>適合用來描述「物件結構」。</li>
<li>支援 <strong>extends</strong>（繼承），方便擴充。</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">VipPassenger</span> <span class="keyword">extends</span> <span class="title class_">Passenger</span> &#123;</span><br><span class="line">  <span class="attr">loungeAccess</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">vip</span>: <span class="title class_">VipPassenger</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">  <span class="attr">seat</span>: <span class="string">&quot;B10&quot;</span>,</span><br><span class="line">  <span class="attr">loungeAccess</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-Type（型別別名）"><a href="#2-Type（型別別名）" class="headerlink" title="2. Type（型別別名）"></a>2. Type（型別別名）</h2><p><code>type</code> 與 <code>interface</code> 很像，不過它更靈活，不只可以描述物件，還能用來定義 <strong>聯合型別、基本型別別名</strong>。</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 車票編號可能是數字或字串</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TicketID</span> = <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘客物件</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PassengerType</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">TicketID</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerC</span>: <span class="title class_">PassengerType</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&quot;T-123&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>👉 差異比較：</p>
<ul>
<li><strong>interface</strong>：專注描述物件結構，可繼承、擴充。</li>
<li><strong>type</strong>：更靈活，可以描述各種型別組合（物件、Union、Tuple 等）。</li>
</ul>
<hr>
<h2 id="3-泛型（Generics）"><a href="#3-泛型（Generics）" class="headerlink" title="3. 泛型（Generics）"></a>3. 泛型（Generics）</h2><p>泛型就像「火車車廂」🚃：</p>
<p>同樣的車廂結構，可以載不同種類的乘客或貨物。</p>
<h3 id="函式中的泛型"><a href="#函式中的泛型" class="headerlink" title="函式中的泛型"></a>函式中的泛型</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 明確指定型別</span></span><br><span class="line"><span class="keyword">const</span> ticketNumber = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">const</span> passengerName = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;David&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以自動推斷</span></span><br><span class="line"><span class="keyword">const</span> autoTicket = <span class="title function_">identity</span>(<span class="string">&quot;E12&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="介面中的泛型"><a href="#介面中的泛型" class="headerlink" title="介面中的泛型"></a>介面中的泛型</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TrainResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳單一乘客</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengerResponse</span>: <span class="title class_">TrainResponse</span>&lt;<span class="title class_">Passenger</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳乘客陣列</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">passengersResponse</span>: <span class="title class_">TrainResponse</span>&lt;<span class="title class_">Passenger</span>[]&gt; = &#123;</span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">seat</span>: <span class="string">&quot;C3&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="類別中的泛型"><a href="#類別中的泛型" class="headerlink" title="類別中的泛型"></a>類別中的泛型</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrainCar</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">items</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getAll</span>(): T[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立「乘客車廂」</span></span><br><span class="line"><span class="keyword">const</span> passengerCar = <span class="keyword">new</span> <span class="title class_">TrainCar</span>&lt;<span class="title class_">Passenger</span>&gt;();</span><br><span class="line">passengerCar.<span class="title function_">add</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Arvin&quot;</span> &#125;);</span><br><span class="line">passengerCar.<span class="title function_">add</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立「行李車廂」</span></span><br><span class="line"><span class="keyword">const</span> luggageCar = <span class="keyword">new</span> <span class="title class_">TrainCar</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">luggageCar.<span class="title function_">add</span>(<span class="string">&quot;背包&quot;</span>);</span><br><span class="line">luggageCar.<span class="title function_">add</span>(<span class="string">&quot;行李箱&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(passengerCar.<span class="title function_">getAll</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(luggageCar.<span class="title function_">getAll</span>());</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul>
<li><strong>Interface</strong>：適合描述物件結構，例如「乘客」或「車票」。</li>
<li><strong>Type</strong>：更靈活，可以描述 <strong>物件 + Union + Tuple</strong>，常用來定義「票號、付款方式」等。</li>
<li><strong>Generics</strong>：像「火車車廂」，同一套結構可以裝不同型別，讓程式碼更可重用。</li>
</ul>
<hr>
<h2 id="Interface-vs-Type-vs-Generics-對照表"><a href="#Interface-vs-Type-vs-Generics-對照表" class="headerlink" title="Interface vs Type vs Generics 對照表"></a>Interface vs Type vs Generics 對照表</h2><table>
<thead>
<tr>
<th>特點</th>
<th>Interface</th>
<th>Type</th>
<th>Generics</th>
</tr>
</thead>
<tbody><tr>
<td><strong>用途</strong></td>
<td>定義物件結構</td>
<td>定義各種型別（物件、Union、Tuple…）</td>
<td>建立可重用、保留型別的模板</td>
</tr>
<tr>
<td><strong>延伸性</strong></td>
<td>可用 <code>extends</code> 繼承、擴充</td>
<td>不可繼承，但可用 <code>&amp;</code> 做交集合併</td>
<td>可套用在函式、介面、類別</td>
</tr>
<tr>
<td><strong>優點</strong></td>
<td>清楚描述物件結構、支援擴充</td>
<td>彈性大，可用於各種型別組合</td>
<td>可重用，提高型別安全性</td>
</tr>
</tbody></table>
<hr>
<p>👉 明天（Day 6）我們會開始進入實戰的一個全新篇章，開始初始化一個 <strong>TypeScript + Node.js 專案 !</strong></p>
]]></content>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 8 - 打造你的第一個 TodoList API：一步步實現 CRUD 功能</title>
    <url>/2025/09/22/Day8%20-%20TS-Node-TodoList%20API/</url>
    <content><![CDATA[<p>在學習 <strong>Express + TypeScript + TypeORM</strong> 的過程中，<code>TodoList API</code> 是非常適合新手上手的練習案例。</p>
<p>因為它的邏輯簡單（新增、讀取、更新、刪除），卻又涵蓋了 RESTful API 的核心概念：</p>
<ul>
<li><strong>CRUD</strong>（Create &#x2F; Read &#x2F; Update &#x2F; Delete）</li>
<li><strong>Controller &#x2F; Route 分層</strong></li>
<li><strong>與資料庫的互動（Repository）</strong></li>
</ul>
<p>這樣的練習不僅可以打好基礎，還能快速理解 <strong>後端架構設計</strong> 的常見模式。</p>
<span id="more"></span>

<hr>
<h2 id="建立-Controller"><a href="#建立-Controller" class="headerlink" title="建立 Controller"></a>建立 Controller</h2><p>Controller（控制器）是 <strong>專門負責處理業務邏輯</strong> 的地方：</p>
<ul>
<li>收到請求 (<code>req</code>) → 驗證&#x2F;處理 → 回傳回應 (<code>res</code>)</li>
<li>不直接決定路由，而是提供「功能」讓 Route 使用</li>
<li>好處是：<strong>程式碼結構清楚、可讀性佳、方便測試與維護</strong></li>
</ul>
<p>建立 <code>src/controllers/todoController.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/Todo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoRepository = <span class="title class_">AppDataSource</span>.<span class="title function_">getRepository</span>(<span class="title class_">Todo</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getTodos</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> todos = <span class="keyword">await</span> todoRepository.<span class="title function_">find</span>();</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: todos &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (!title) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Title is required&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newTodo = todoRepository.<span class="title function_">create</span>(&#123; title &#125;);</span><br><span class="line">    <span class="keyword">const</span> savedTodo = <span class="keyword">await</span> todoRepository.<span class="title function_">save</span>(newTodo);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: savedTodo &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, completed &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">const</span> todo = <span class="keyword">await</span> todoRepository.<span class="title function_">findOneBy</span>(&#123; id &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!todo) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Todo not found&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    todo.<span class="property">title</span> = title !== <span class="literal">undefined</span> ? title : todo.<span class="property">title</span>;</span><br><span class="line">    todo.<span class="property">completed</span> = completed !== <span class="literal">undefined</span> ? completed : todo.<span class="property">completed</span>;</span><br><span class="line">    <span class="keyword">const</span> updatedTodo = <span class="keyword">await</span> todoRepository.<span class="title function_">save</span>(todo);</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: updatedTodo &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deleteTodo</span>(<span class="params"></span></span><br><span class="line"><span class="params">  req: Request,</span></span><br><span class="line"><span class="params">  res: Response,</span></span><br><span class="line"><span class="params">  next: NextFunction</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> todoRepository.<span class="title function_">delete</span>(&#123; id &#125;);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">affected</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;Todo not found&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">data</span>: result &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">next</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="設定路由"><a href="#設定路由" class="headerlink" title="設定路由"></a>設定路由</h2><p>Route（路由）的工作就是 <strong>決定請求要交給哪個 Controller 處理</strong>。</p>
<p>它就像是 <strong>導航地圖</strong>：</p>
<ul>
<li><code>GET /todos</code> → 查詢所有代辦事項 → <code>getTodos</code></li>
<li><code>POST /todos</code> → 建立新代辦 → <code>createTodo</code></li>
<li><code>PUT /todos/:id</code> → 更新某筆代辦 → <code>updateTodo</code></li>
<li><code>DELETE /todos/:id</code> → 刪除某筆代辦 → <code>deleteTodo</code></li>
</ul>
<p>這樣一來，Controller 和 Route 的責任就分得很清楚：</p>
<ul>
<li><strong>Route &#x3D; 請求分配器</strong></li>
<li><strong>Controller &#x3D; 處理邏輯</strong></li>
</ul>
<p>建立 <code>src/routes/todoRoutes.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getTodos,</span><br><span class="line">  createTodo,</span><br><span class="line">  updateTodo,</span><br><span class="line">  deleteTodo,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;../controllers/todoController&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, getTodos);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, createTodo);</span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&quot;/:id&quot;</span>, updateTodo);</span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&quot;/:id&quot;</span>, deleteTodo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="整合到主程式"><a href="#整合到主程式" class="headerlink" title="整合到主程式"></a>整合到主程式</h2><p>最後一步就是在 <code>app.ts</code> 裡，把 <code>todoRoutes</code> 整合進主程式。</p>
<p>這樣當使用者發送請求到 <code>/api/todos</code> 時，Express 就會把它交給我們剛剛寫好的 <code>todoRoutes</code>，再由對應的 Controller 去處理。</p>
<p>修改 <code>src/app.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;express&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppDataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./config/db&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> todoRoutes <span class="keyword">from</span> <span class="string">&quot;./routes/todoRoutes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/api/todos&quot;</span>, todoRoutes); <span class="comment">// 加上 Todo 路由</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, iThome 2025!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppDataSource</span>.<span class="title function_">initialize</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;📦 DB Connected!&quot;</span>);</span><br><span class="line">    app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 Server running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;❌ DB connection failed:&quot;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>👉 到這裡，我們就完成了一個最基礎的 TodoList API。</p>
<p>但是目前還沒有資料庫可以測試 (還不能用 Postman 打 API 😂)，下一篇我們就來介紹 Render 服務上的資料庫應用，把整段串接起來。</p>
<hr>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/d766050e40229dd97cd90a5c94c667d14cc90c2f">Github 範例程式碼</a></p>
<blockquote>
<p>commit : Day 8 initialize todo‑list API</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 7 - 如何建立一個 TypeScript + Node.js 環境 (2)：專案架構與資料庫設定</title>
    <url>/2025/09/21/Day7%20-%20Node.js%20+%20TS%20(2)/</url>
    <content><![CDATA[<p>嗨～昨天我們已經有一個能跑起來的 <strong>TypeScript + Node.js 開發環境</strong>。接著，在正式開發 API 之前，先來點暖身 —— 建立一個清晰、可維護的專案架構，並完成環境變數與資料庫連線設定。這些基礎工具就是未來專案能否穩定推進的關鍵。</p>
<span id="more"></span>

<hr>
<h2 id="專案架構整理"><a href="#專案架構整理" class="headerlink" title="專案架構整理"></a>專案架構整理</h2><h3 id="建立資料夾結構"><a href="#建立資料夾結構" class="headerlink" title="建立資料夾結構"></a>建立資料夾結構</h3><p>為了讓專案更有條理、方便後續維護，我們在 <code>src</code> 底下建立以下資料夾：</p>
<ul>
<li><code>config</code>：存放設定檔（例如資料庫連線設定）。</li>
<li><code>controllers</code>：處理 API 業務邏輯。</li>
<li><code>entities</code>：定義資料庫模型 (Entity)。</li>
<li><code>middleware</code>：存放中間件。</li>
<li><code>routes</code>：定義 API 路由。</li>
<li><code>utils</code>：常用工具函數。</li>
</ul>
<p>建立指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">mkdir</span> config controllers entities middleware routes utils</span><br></pre></td></tr></table></figure>

<p>最終結構如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">  ├── config/</span><br><span class="line">  ├── controllers/</span><br><span class="line">  ├── entities/</span><br><span class="line">  ├── middleware/</span><br><span class="line">  ├── routes/</span><br><span class="line">  ├── utils/</span><br><span class="line">  └── app.ts</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="環境變數設定"><a href="#環境變數設定" class="headerlink" title="環境變數設定"></a>環境變數設定</h2><p>為什麼要用環境變數？</p>
<p>因為專案常常需要存放敏感資訊（像是資料庫密碼、API 金鑰），這些東西絕不能直接寫死在程式碼裡。</p>
<h3 id="安裝與設定-dotenv"><a href="#安裝與設定-dotenv" class="headerlink" title="安裝與設定 dotenv"></a>安裝與設定 dotenv</h3><ol>
<li><p>安裝套件與型別：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install dotenv</span><br><span class="line">npm install @types/dotenv --save-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>在專案根目錄建立 <code>.env</code> 檔案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .<span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<p>在檔案內輸入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_HOST=localhost</span><br><span class="line">DB_NAME=db_name</span><br><span class="line">DB_USERNAME=你的資料庫使用者</span><br><span class="line">DB_PASSWORD=你的密碼</span><br><span class="line">DB_PORT=5432</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 <code>.gitignore</code>有下方配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.env</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>⚠️ .env 內含敏感資訊，務必避免上傳到 GitHub！</p>
</blockquote>
<hr>
<h2 id="資料庫連線設定"><a href="#資料庫連線設定" class="headerlink" title="資料庫連線設定"></a>資料庫連線設定</h2><p>這裡我們會使用 <strong>PostgreSQL</strong> 搭配 <strong>TypeORM</strong> 作為 ORM 工具。</p>
<h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install typeorm pg</span><br></pre></td></tr></table></figure>

<h3 id="設定-TypeORM-連線"><a href="#設定-TypeORM-連線" class="headerlink" title="設定 TypeORM 連線"></a>設定 TypeORM 連線</h3><p>在 <code>src/config</code> 建立 <code>db.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataSource</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Todo</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../entities/Todo&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span>;</span><br><span class="line"></span><br><span class="line">dotenv.<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppDataSource</span> = <span class="keyword">new</span> <span class="title class_">DataSource</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span>),</span><br><span class="line">  <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">DB_USERNAME</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="title class_">Todo</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>, <span class="comment">// 開發階段建議 true，正式環境請改成 false</span></span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ synchronize: true 會自動產生 ORM 所對應的資料表，僅限開發階段使用；正式環境建議使用 migration！</p>
</blockquote>
<hr>
<h2 id="定義資料模型"><a href="#定義資料模型" class="headerlink" title="定義資料模型"></a>定義資料模型</h2><p>在 TypeORM 裡，<strong>Entity 就是資料庫模型</strong>，負責定義表格結構。</p>
<h3 id="建立-Todo-Entity"><a href="#建立-Todo-Entity" class="headerlink" title="建立 Todo Entity"></a>建立 Todo Entity</h3><ol>
<li><p>新增檔案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> src/entities/Todo.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>編輯內容：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span> &#125; <span class="keyword">from</span> <span class="string">&quot;typeorm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(<span class="string">&quot;uuid&quot;</span>)</span><br><span class="line">  id!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  title!: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">default</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  completed!: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>確認 <code>tsconfig.json</code>，確保支援裝飾器：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>💡 小技巧：</p>
<ul>
<li><code>!</code> 表示該屬性必填。</li>
</ul>
</blockquote>
<hr>
<p>👉 明天（Day 8）我們即將開始開發 API ，讓 <strong>TypeScript + Node.js 專案更豐富 🚀 !</strong></p>
<h2 id="補充資源"><a href="#補充資源" class="headerlink" title="補充資源"></a>補充資源</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/ea9757e05ffe4d0a7dd48d65c1e4cc37f25361d8">Github 範例程式碼</a></p>
<blockquote>
<p>git commit : setup backend structure and typeORM setting</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 9｜Render 雲端啟動：資料庫連線全攻略</title>
    <url>/2025/09/23/Day9%20-%20Render-pgsql-db/</url>
    <content><![CDATA[<h2 id="前言-什麼是資料庫？"><a href="#前言-什麼是資料庫？" class="headerlink" title="前言 - 什麼是資料庫？"></a>前言 - 什麼是資料庫？</h2><p>簡單來說，<strong>資料庫（Database）</strong> 是一種用來 <strong>儲存、管理與存取資料</strong> 的系統。</p>
<p>它能幫助我們把資料有條理地組織起來，並透過查詢語言（例如 SQL）快速檢索與更新。</p>
<p>常見的資料庫類型有：</p>
<ul>
<li><strong>關聯式資料庫（RDBMS）</strong>：以表格（Tables）方式存放資料，支援 SQL，例如 MySQL、PostgreSQL、SQLite。</li>
<li><strong>非關聯式資料庫（NoSQL）</strong>：不一定使用表格，常見於 JSON 文件、Key-Value、Graph 等結構，例如 MongoDB、Redis。</li>
</ul>
<span id="more"></span>

<h3 id="常見資料庫比較"><a href="#常見資料庫比較" class="headerlink" title="常見資料庫比較"></a>常見資料庫比較</h3><table>
<thead>
<tr>
<th>特點</th>
<th>MySQL</th>
<th>PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td>歷史</td>
<td>1995 年誕生，社群廣泛</td>
<td>1996 年誕生，功能強大</td>
</tr>
<tr>
<td>使用場景</td>
<td>網站後端（WordPress、電商系統）</td>
<td>複雜商業系統、數據分析平台</td>
</tr>
<tr>
<td>SQL 標準相容</td>
<td>普及但部分不相容</td>
<td>高度相容 ANSI-SQL</td>
</tr>
<tr>
<td>擴充能力</td>
<td>功能完整，但擴展性略少</td>
<td>支援更多型別（JSON、陣列）、自定義函數</td>
</tr>
<tr>
<td>性能</td>
<td>讀取速度快，適合高頻查詢</td>
<td>交易一致性（ACID）更嚴謹</td>
</tr>
<tr>
<td>儲存 JSON</td>
<td>有支援，但功能較基本</td>
<td>支援 JSONB，操作更強大</td>
</tr>
<tr>
<td>授權</td>
<td>開源 GPL</td>
<td>開源 PostgreSQL License</td>
</tr>
</tbody></table>
<p>👉 <strong>簡單來說</strong>：</p>
<ul>
<li><strong>MySQL</strong>：適合中小型專案或網站開發。</li>
<li><strong>PostgreSQL</strong>：功能更全面，適合大型專案、金融系統、數據分析。</li>
</ul>
<p>以上為兩種資料庫的主要定位，但實際選擇時還是要根據具體團隊需求和情境來決定。</p>
<hr>
<h2 id="Render-資料庫服務簡介"><a href="#Render-資料庫服務簡介" class="headerlink" title="Render 資料庫服務簡介"></a>Render 資料庫服務簡介</h2><p>Render 除了能部署前後端應用程式，也提供 <strong>PostgreSQL 資料庫服務</strong>，其優點包括：</p>
<ul>
<li>免費方案可用（適合開發 &#x2F; 測試）。</li>
<li>內建 <strong>自動備份</strong> 功能。</li>
<li>提供 <strong>Connection Info</strong>，可直接複製連線字串使用。</li>
<li>支援外部連線（可用 DBeaver、pgAdmin、psql 連線）。</li>
<li>內建 SSL 安全機制，保障連線安全。</li>
</ul>
<hr>
<h2 id="✅-建立-PostgreSQL-資料庫"><a href="#✅-建立-PostgreSQL-資料庫" class="headerlink" title="✅ 建立 PostgreSQL 資料庫"></a>✅ 建立 PostgreSQL 資料庫</h2><ol>
<li>點擊右上角的 <strong>「New」</strong> 按鈕。</li>
<li>選擇「<strong>Postgres</strong>」。</li>
</ol>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/1-create-pg-database.png?raw=true" alt="Screenshot 2025-04-24 at 9.21.05 PM"></p>
<ol>
<li>設定資料庫細節（如下）：<ul>
<li><strong>Name</strong>：資料庫 Instance 名稱。</li>
<li><strong>Region</strong>：選擇靠近你的地區（例如 Singapore 新加坡）。</li>
<li><strong>Database Name &#x2F; User &#x2F; Password</strong>：Render 會自動產生，也可以自訂。</li>
<li><strong>Plan Option</strong>：先選擇 Free 方案即可，方便測試使用。<br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/2-new-pg-db-info.png?raw=true" alt="dashboard.render.com_new_database"></li>
</ul>
</li>
<li>點擊「<strong>Create Database</strong>」。</li>
<li>等待 DB Instance 生成後，即可在 Dashboard 中看到。</li>
</ol>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/3-db-instance.png?raw=true"></p>
<ol start="4">
<li>點擊對應的 Service Name 以查看資料庫詳細資訊。</li>
</ol>
<hr>
<h2 id="✅-資料庫存取方式"><a href="#✅-資料庫存取方式" class="headerlink" title="✅ 資料庫存取方式"></a>✅ 資料庫存取方式</h2><p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/4-external-url.png?raw=true"></p>
<p>Render 會自動產生一組 <strong>外部連線網址（External Connection URL）</strong>，可供應用程式或團隊使用：</p>
<ul>
<li>進入 Postgres 資料庫頁面。</li>
<li>在「<strong>Connection Info</strong>」找到 <code>External Database URL</code>。</li>
<li>複製這組 URL，並用於 <code>psql</code>、DBeaver、應用程式或 ORM。</li>
</ul>
<p>ℹ️ 注意：這組 URL 含有帳號密碼，<strong>務必保護好，不要放在 GitHub 等公開地方</strong>。</p>
<hr>
<h3 id="External-Database-URL"><a href="#External-Database-URL" class="headerlink" title="External Database URL"></a>External Database URL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">postgresql://node_ts_demo_db_user:&lt;password&gt;@dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com/node_ts_demo_db</span><br></pre></td></tr></table></figure>

<p>格式通常為：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">postgres://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;</span><br></pre></td></tr></table></figure>

<p>拆解（設定 DBeaver 可用）：</p>
<ul>
<li><strong>使用者</strong>：node_ts_demo_db_user</li>
<li><strong>密碼</strong>：password</li>
<li><strong>主機</strong>：<a href="http://dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com/">dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com</a></li>
<li><strong>資料庫名稱</strong>：node_ts_demo_db</li>
</ul>
<hr>
<h2 id="用-DBeaver-測試連線"><a href="#用-DBeaver-測試連線" class="headerlink" title="用 DBeaver 測試連線"></a>用 DBeaver 測試連線</h2><p><a href="https://dbeaver.io/">DBeaver</a> 是一款跨平台的開源資料庫管理工具，支援 MySQL、PostgreSQL、SQLite、MongoDB 等多種資料庫。</p>
<h3 id="安裝與連線步驟"><a href="#安裝與連線步驟" class="headerlink" title="安裝與連線步驟"></a>安裝與連線步驟</h3><ol>
<li><p>下載並安裝 DBeaver。</p>
</li>
<li><p>點選「<strong>New Database Connection</strong>」。</p>
</li>
<li><p>選擇「<strong>PostgreSQL</strong>」。</p>
</li>
<li><p>輸入 Render 提供的資訊：</p>
<ul>
<li><strong>Host</strong>：<code>dpg-xxxxx.singapore-postgres.render.com</code></li>
<li><strong>Database</strong>：<code>ts_template_db</code></li>
<li><strong>Username</strong>：<code>ts_template_db_user</code></li>
<li><strong>Password</strong>：<code>password</code></li>
<li><strong>Port</strong>：<code>5432</code><br><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/5-dbeaver-test-conn.png?raw=true"></li>
</ul>
</li>
<li><p>點擊 <strong>Test Connection</strong>，成功會顯示「Connected」。</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/6-db-connected.png?raw=true"></p>
</li>
</ol>
<hr>
<h2 id="Node-js-專案連線-Render-資料庫與-API-測試"><a href="#Node-js-專案連線-Render-資料庫與-API-測試" class="headerlink" title="Node.js 專案連線 Render 資料庫與 API 測試"></a>Node.js 專案連線 Render 資料庫與 API 測試</h2><h3 id="修改-env-檔案，加入資料庫連線資訊"><a href="#修改-env-檔案，加入資料庫連線資訊" class="headerlink" title="修改 .env 檔案，加入資料庫連線資訊"></a>修改 <code>.env</code> 檔案，加入資料庫連線資訊</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DB_HOST=dpg-d33uq4q4d50c73ejo3rg-a.singapore-postgres.render.com</span><br><span class="line">DB_NAME=node_ts_demo_db</span><br><span class="line">DB_USERNAME=node_ts_demo_db_user</span><br><span class="line">DB_PASSWORD=password</span><br><span class="line">DB_PORT=5432</span><br></pre></td></tr></table></figure>

<h3 id="啟動伺服器並測試連線"><a href="#啟動伺服器並測試連線" class="headerlink" title="啟動伺服器並測試連線"></a>啟動伺服器並測試連線</h3><p>使用先前 Day 6 設定好的 script：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/7-ssl-problem.png?raw=true"></p>
<p>會發現連線失敗，因為 SSL 相關問題。</p>
<hr>
<h3 id="解決-SSL-問題"><a href="#解決-SSL-問題" class="headerlink" title="解決 SSL 問題"></a>解決 SSL 問題</h3><ul>
<li><strong>開發環境</strong>：可暫時關閉驗證以便快速測試。</li>
<li><strong>正式環境（Production）</strong>：建議保持預設驗證（<code>true</code>），以確保安全性。</li>
</ul>
<p>若遇到 SSL 連線錯誤，在 <code>db.ts</code> 的 <code>AppDataSource</code> 配置中加入：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="attr">ssl</span>: &#123; <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span> &#125;,</span><br></pre></td></tr></table></figure>

<p>更新後的 <code>src/config/db.ts</code>：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">AppDataSource</span> = <span class="keyword">new</span> <span class="title class_">DataSource</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;postgres&quot;</span>,</span><br><span class="line">  <span class="attr">host</span>: process.<span class="property">env</span>.<span class="property">DB_HOST</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="title class_">Number</span>(process.<span class="property">env</span>.<span class="property">DB_PORT</span>),</span><br><span class="line">  <span class="attr">username</span>: process.<span class="property">env</span>.<span class="property">DB_USERNAME</span>,</span><br><span class="line">  <span class="attr">password</span>: process.<span class="property">env</span>.<span class="property">DB_PASSWORD</span>,</span><br><span class="line">  <span class="attr">database</span>: process.<span class="property">env</span>.<span class="property">DB_NAME</span>,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="title class_">Todo</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">logging</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">ssl</span>: &#123; <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>✅ 成功連線的終端機畫面：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/8-nodejs-conn-success.png?raw=true"></p>
<p>(可觀察到 typeORM 已經跟資料庫互動並藉由 Todo Entity 創立 Todo 表格)</p>
<p>DBeaver 畫面：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/9-todo-table.png?raw=true"></p>
<hr>
<h2 id="API-測試範例"><a href="#API-測試範例" class="headerlink" title="API 測試範例"></a>API 測試範例</h2><p>使用 Postman 測試幾個簡單的 API：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>路徑</th>
<th>Body 範例</th>
<th>回應範例</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td><code>/api/todos</code></td>
<td>-</td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: [ ... ] &#125;</code></td>
</tr>
<tr>
<td>POST</td>
<td><code>/api/todos</code></td>
<td><code>&#123; &quot;title&quot;: &quot;學 TypeScript&quot; &#125;</code></td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;id&quot;: &quot;xxx&quot;, &quot;title&quot;: &quot;學 TypeScript&quot;, &quot;completed&quot;: false &#125; &#125;</code></td>
</tr>
<tr>
<td>PUT</td>
<td><code>/api/todos/&lt;uuid&gt;</code></td>
<td><code>&#123; &quot;completed&quot;: true &#125;</code></td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;id&quot;: &quot;1&quot;, &quot;title&quot;: &quot;學 TypeScript&quot;, &quot;completed&quot;: true &#125; &#125;</code></td>
</tr>
<tr>
<td>DELETE</td>
<td><code>/api/todos/&lt;uuid&gt;</code></td>
<td>-</td>
<td><code>&#123; &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;affected&quot;: 1 &#125; &#125;</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="Postman-測試結果"><a href="#Postman-測試結果" class="headerlink" title="Postman 測試結果"></a>Postman 測試結果</h2><p>成功新增 API 資料：</p>
<p><img src="https://github.com/ArvinYang1925/iThome-2025/blob/main/images/Day9-Render-DB/10-postman-create-todo.png?raw=true"></p>
<hr>
<h2 id="🎯-今日收穫"><a href="#🎯-今日收穫" class="headerlink" title="🎯 今日收穫"></a>🎯 今日收穫</h2><p>今天我們不只學會了如何在 Render 上建立 PostgreSQL 資料庫，還實際完成了幾件關鍵任務：</p>
<ul>
<li>了解了 <strong>資料庫的基本概念</strong>，並比較了 MySQL 與 PostgreSQL 的差異。</li>
<li>在 Render 建立了 <strong>Postgres 資料庫服務</strong>，並熟悉了連線方式。</li>
<li>使用 <strong>DBeaver</strong> 成功測試連線，確認資料庫可以正常使用。</li>
<li>在 <strong>Node.js + TypeORM 專案</strong>中完成連線，並處理 SSL 問題。</li>
<li>用 <strong>Postman</strong> 驗證了 API 與資料庫的互動，確認 CRUD 功能正常。</li>
</ul>
<p>👉 到這一步，我們的專案已經有了「<strong>完整的後端 + 真實的雲端資料庫</strong>」，下一步就能進一步嘗試部署專案了！ 🚀</p>
<h2 id="補充資料"><a href="#補充資料" class="headerlink" title="補充資料"></a>補充資料</h2><p><a href="https://github.com/ArvinYang1925/iThome2025-node-ts/commit/280a18f58c08410d2aebf95f6781766a45b18946">Github 範例程式碼</a></p>
<blockquote>
<p>git commit : setup render database connection info</p>
</blockquote>
]]></content>
      <tags>
        <tag>TypeScript</tag>
        <tag>Node.js</tag>
        <tag>Render</tag>
        <tag>pgSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 完整介紹：從入門到實戰</title>
    <url>/2025/01/27/TypeScript%20%E4%BB%8B%E7%B4%B9/</url>
    <content><![CDATA[<h2 id="什麼是-TypeScript？"><a href="#什麼是-TypeScript？" class="headerlink" title="什麼是 TypeScript？"></a>什麼是 TypeScript？</h2><p>TypeScript 是由 Microsoft 開發的一種開源程式語言，它是 JavaScript 的一個<strong>型別化超集</strong>（typed superset），最終會編譯成純 JavaScript 代碼。簡單來說，任何有效的 JavaScript 代碼都是有效的 TypeScript 代碼。</p>
<span id="more"></span>

<h3 id="🎯-為什麼選擇-TypeScript？"><a href="#🎯-為什麼選擇-TypeScript？" class="headerlink" title="🎯 為什麼選擇 TypeScript？"></a>🎯 為什麼選擇 TypeScript？</h3><ol>
<li><strong>靜態型別檢查</strong> - 在編譯時期就能發現錯誤</li>
<li><strong>更好的 IDE 支援</strong> - 智能提示、自動完成、重構工具</li>
<li><strong>增強的可讀性</strong> - 代碼更容易理解和維護</li>
<li><strong>漸進式採用</strong> - 可以逐步將現有 JavaScript 專案遷移到 TypeScript</li>
</ol>
<h2 id="🚀-快速開始"><a href="#🚀-快速開始" class="headerlink" title="🚀 快速開始"></a>🚀 快速開始</h2><h3 id="安裝-TypeScript"><a href="#安裝-TypeScript" class="headerlink" title="安裝 TypeScript"></a>安裝 TypeScript</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全域安裝</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 專案內安裝</span></span><br><span class="line">npm install --save-dev typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驗證安裝</span></span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure>

<h3 id="第一個-TypeScript-檔案"><a href="#第一個-TypeScript-檔案" class="headerlink" title="第一個 TypeScript 檔案"></a>第一個 TypeScript 檔案</h3><p>建立 <code>hello.ts</code> 檔案：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userName</span>: <span class="built_in">string</span> = <span class="string">&quot;Arvin&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(userName));</span><br></pre></td></tr></table></figure>

<p>編譯並執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 編譯</span></span><br><span class="line">tsc hello.ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行生成的 JavaScript</span></span><br><span class="line">node hello.js</span><br></pre></td></tr></table></figure>

<h2 id="📚-核心概念"><a href="#📚-核心概念" class="headerlink" title="📚 核心概念"></a>📚 核心概念</h2><h3 id="1-基本型別"><a href="#1-基本型別" class="headerlink" title="1. 基本型別"></a>1. 基本型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本型別</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Any 型別（盡量避免使用）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Void 型別</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warnUser</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Null 和 Undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-介面-Interface"><a href="#2-介面-Interface" class="headerlink" title="2. 介面 (Interface)"></a>2. 介面 (Interface)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 可選屬性</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="comment">// 唯讀屬性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">person: Person</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;person.firstName&#125;</span> <span class="subst">$&#123;person.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-類別-Classes"><a href="#3-類別-Classes" class="headerlink" title="3. 類別 (Classes)"></a>3. 類別 (Classes)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">species</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, species: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes a sound`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">getInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is a <span class="subst">$&#123;<span class="variable language_">this</span>.species&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, breed: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, <span class="string">&quot;Canine&quot;</span>, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">bark</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof! Woof!&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">makeSound</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getBreedInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.getInfo()&#125;</span> of breed <span class="subst">$&#123;<span class="variable language_">this</span>.breed&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-泛型-Generics"><a href="#4-泛型-Generics" class="headerlink" title="4. 泛型 (Generics)"></a>4. 泛型 (Generics)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型函數</span></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output1 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> output2 = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型介面</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型類別</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">zero: T, addFn: (x: T, y: T) =&gt; T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zeroValue</span> = zero;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">add</span> = addFn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-聯合型別與交集型別"><a href="#5-聯合型別與交集型別" class="headerlink" title="5. 聯合型別與交集型別"></a>5. 聯合型別與交集型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聯合型別</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringOrNumber</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: StringOrNumber</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集型別</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ErrorHandling</span> &#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  error?: &#123; <span class="attr">message</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ArtworksData</span> &#123;</span><br><span class="line">  <span class="attr">artworks</span>: &#123; <span class="attr">title</span>: <span class="built_in">string</span> &#125;[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ArtworksResponse</span> = <span class="title class_">ArtworksData</span> &amp; <span class="title class_">ErrorHandling</span>;</span><br></pre></td></tr></table></figure>

<h2 id="⚙️-進階特性"><a href="#⚙️-進階特性" class="headerlink" title="⚙️ 進階特性"></a>⚙️ 進階特性</h2><h3 id="1-型別別名-Type-Aliases"><a href="#1-型別別名-Type-Aliases" class="headerlink" title="1. 型別別名 (Type Aliases)"></a>1. 型別別名 (Type Aliases)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EventHandler</span> = <span class="function">(<span class="params">event: Event</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="string">&quot;loading&quot;</span> | <span class="string">&quot;success&quot;</span> | <span class="string">&quot;error&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-條件型別"><a href="#2-條件型別" class="headerlink" title="2. 條件型別"></a>2. 條件型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MessageOf</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: infer U &#125; ? U : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EmailMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Email</span>&gt;; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DogMessageContents</span> = <span class="title class_">MessageOf</span>&lt;<span class="title class_">Dog</span>&gt;; <span class="comment">// never</span></span><br></pre></td></tr></table></figure>

<h3 id="3-映射型別"><a href="#3-映射型別" class="headerlink" title="3. 映射型別"></a>3. 映射型別</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyTodo</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialTodo</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Todo</span>&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="🛠️-實戰應用"><a href="#🛠️-實戰應用" class="headerlink" title="🛠️ 實戰應用"></a>🛠️ 實戰應用</h2><h3 id="TypeScript-設定檔-tsconfig-json"><a href="#TypeScript-設定檔-tsconfig-json" class="headerlink" title="TypeScript 設定檔 (tsconfig.json)"></a>TypeScript 設定檔 (tsconfig.json)</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES2020&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="React-TypeScript-範例"><a href="#React-TypeScript-範例" class="headerlink" title="React + TypeScript 範例"></a>React + TypeScript 範例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserListProps</span> &#123;</span><br><span class="line">  initialUsers?: <span class="title class_">User</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserList</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">UserListProps</span>&gt; = <span class="function">(<span class="params">&#123; initialUsers = [] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState&lt;<span class="title class_">User</span>[]&gt;(initialUsers);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchUsers = <span class="keyword">async</span> (): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">userData</span>: <span class="title class_">User</span>[] = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="title function_">setUsers</span>(userData);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Failed to fetch users:&quot;</span>, error);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (initialUsers.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">fetchUsers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [initialUsers.<span class="property">length</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;users.map((user: User) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;user.name&#125; - &#123;user.email&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserList</span>;</span><br></pre></td></tr></table></figure>

<h2 id="📝-最佳實踐"><a href="#📝-最佳實踐" class="headerlink" title="📝 最佳實踐"></a>📝 最佳實踐</h2><h3 id="1-型別定義"><a href="#1-型別定義" class="headerlink" title="1. 型別定義"></a>1. 型別定義</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 好的做法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiResponse</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T;</span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 避免使用 any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processData</span>(<span class="params">data: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 使用具體型別</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processUserData</span>(<span class="params">data: User[]</span>): <span class="title class_">ProcessedUser</span>[] &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">    <span class="attr">displayName</span>: <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">isActive</span>: user.<span class="property">status</span> === <span class="string">&quot;active&quot;</span>,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-錯誤處理"><a href="#2-錯誤處理" class="headerlink" title="2. 錯誤處理"></a>2. 錯誤處理</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T, E = <span class="title class_">Error</span>&gt; =</span><br><span class="line">  | &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>;</span><br><span class="line">      <span class="attr">data</span>: T;</span><br><span class="line">    &#125;</span><br><span class="line">  | &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>;</span><br><span class="line">      <span class="attr">error</span>: E;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">id: <span class="built_in">string</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&lt;<span class="title class_">User</span>&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/users/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP <span class="subst">$&#123;response.status&#125;</span>: <span class="subst">$&#123;response.statusText&#125;</span>`</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">data</span>: user &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">error</span>: error <span class="keyword">instanceof</span> <span class="title class_">Error</span> ? error : <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unknown error&quot;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🔍-常見問題與解決方案"><a href="#🔍-常見問題與解決方案" class="headerlink" title="🔍 常見問題與解決方案"></a>🔍 常見問題與解決方案</h2><h3 id="1-型別斷言"><a href="#1-型別斷言" class="headerlink" title="1. 型別斷言"></a>1. 型別斷言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 型別斷言（謹慎使用）</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更安全的做法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">value: <span class="built_in">unknown</span></span>): value is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isString</span>(someValue)) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = someValue.<span class="property">length</span>; <span class="comment">// TypeScript 知道這裡是 string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-可選鏈與空值合併"><a href="#2-可選鏈與空值合併" class="headerlink" title="2. 可選鏈與空值合併"></a>2. 可選鏈與空值合併</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NestedObject</span> &#123;</span><br><span class="line">  level1?: &#123;</span><br><span class="line">    level2?: &#123;</span><br><span class="line">      value?: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">NestedObject</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可選鏈</span></span><br><span class="line"><span class="keyword">const</span> value = obj.<span class="property">level1</span>?.<span class="property">level2</span>?.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空值合併</span></span><br><span class="line"><span class="keyword">const</span> displayValue = value ?? <span class="string">&quot;Default Value&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="🎓-學習資源與工具"><a href="#🎓-學習資源與工具" class="headerlink" title="🎓 學習資源與工具"></a>🎓 學習資源與工具</h2><h3 id="推薦工具"><a href="#推薦工具" class="headerlink" title="推薦工具"></a>推薦工具</h3><ul>
<li><strong>VS Code</strong> - 最佳的 TypeScript 開發體驗</li>
<li><strong>TypeScript Playground</strong> - 在線練習和測試</li>
<li><strong>TSLint&#x2F;ESLint</strong> - 代碼檢查工具</li>
<li><strong>Prettier</strong> - 代碼格式化工具</li>
</ul>
<h3 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h3><ul>
<li><a href="https://www.typescriptlang.org/docs/">TypeScript 官方文檔</a></li>
<li><a href="https://basarat.gitbook.io/typescript/">TypeScript Deep Dive</a></li>
<li><a href="https://github.com/typescript-cheatsheets/react">React TypeScript 速查表</a></li>
</ul>
<h2 id="📈-總結"><a href="#📈-總結" class="headerlink" title="📈 總結"></a>📈 總結</h2><p>TypeScript 為 JavaScript 開發帶來了強大的型別系統，幫助開發者：</p>
<ol>
<li><strong>提前發現錯誤</strong> - 編譯時期的型別檢查</li>
<li><strong>提升開發效率</strong> - 更好的 IDE 支援和智能提示</li>
<li><strong>改善代碼品質</strong> - 更清晰的 API 設計和文檔</li>
<li><strong>降低維護成本</strong> - 重構更安全，代碼更容易理解</li>
</ol>
<p>對於現代 JavaScript 開發，特別是大型專案，TypeScript 已經成為不可或缺的工具。它不僅提升了開發體驗，也讓代碼更加健壯和可維護。</p>
<h2 id="🚀-下一步"><a href="#🚀-下一步" class="headerlink" title="🚀 下一步"></a>🚀 下一步</h2><p>如果您剛開始學習 TypeScript，建議：</p>
<ol>
<li>從簡單的型別標註開始</li>
<li>逐步學習介面和類別</li>
<li>在小專案中實踐</li>
<li>探索進階特性如泛型和條件型別</li>
<li>整合到您喜愛的框架中（React, Vue, Angular）</li>
</ol>
<p>開始您的 TypeScript 之旅吧！這將是一個值得投資的技術選擇。</p>
<hr>
<blockquote>
<p>💡 <strong>小提示</strong>: 記住，TypeScript 的目標不是替代 JavaScript，而是讓 JavaScript 開發更加安全和高效。漸進式採用是最佳策略！</p>
</blockquote>
]]></content>
      <categories>
        <category>技術教學</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>JavaScript</tag>
        <tag>前端開發</tag>
        <tag>程式語言</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/08/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>常用 Hexo 指令帶你無往不利</title>
    <url>/2024/06/07/%E5%B8%B8%E7%94%A8%20Hexo%20%E6%8C%87%E4%BB%A4%E5%B8%B6%E4%BD%A0%E7%84%A1%E5%BE%80%E4%B8%8D%E5%88%A9/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简单且功能强大的静态博客框架。以下是一些常用的 Hexo 指令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new 文章名稱</span><br><span class="line">hexo generate 產生 public 資料夾內容</span><br><span class="line">hexo server</span><br><span class="line">hexo clean 清理緩存</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol>
<li><p><strong>安装 Hexo</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>初始化 Hexo 项目</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成静态文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启动本地服务器</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>新建文章</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发布文章</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>清理缓存和生成的静态文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>列出所有 Hexo 命令</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo list</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看 Hexo 帮助信息</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装插件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install &lt;plugin-name&gt; --save</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以下是一些额外的有用命令和操作：</p>
<ul>
<li><p><strong>新建页面</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page &lt;page-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>草稿转发布</strong><br>如果你使用 <code>hexo new draft &lt;title&gt;</code> 创建了草稿，可以通过以下命令将草稿发布为正式文章：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成并部署</strong><br>这会在生成静态文件后立即部署它们：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate --deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看当前配置</strong><br>你可以直接编辑 <code>_config.yml</code> 文件来配置 Hexo，但也可以用以下命令查看当前配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo config</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这些命令涵盖了 Hexo 的大部分基本功能，可以帮助你快速上手并管理你的博客。</p>
]]></content>
      <tags>
        <tag>Hexo 指令</tag>
      </tags>
  </entry>
  <entry>
    <title>關於嚴格模式</title>
    <url>/2024/06/12/%E9%97%9C%E6%96%BC%E5%9A%B4%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在 JavaScript 和 PHP 中，嚴格模式（strict mode）都是後期引入的。</p>
<span id="more"></span>

<h2 id="JavaScript-的嚴格模式"><a href="#JavaScript-的嚴格模式" class="headerlink" title="JavaScript 的嚴格模式"></a>JavaScript 的嚴格模式</h2><p>JavaScript 的嚴格模式首次出現在 ECMAScript 5（ES5）標準中，於 2009 年發布。嚴格模式通過 <code>&quot;use strict&quot;;</code> 指令來啟用，它將代碼執行模式從寬鬆模式切換到嚴格模式，並引入了一些新的限制和改變，以幫助開發者避免常見的問題，提高代碼的品質和性能。</p>
<h2 id="PHP-的嚴格模式"><a href="#PHP-的嚴格模式" class="headerlink" title="PHP 的嚴格模式"></a>PHP 的嚴格模式</h2><p>PHP 的嚴格模式首次出現在 PHP 7.0 版本中，於 2015 年發布。它通過引入 <code>declare(strict_types=1);</code> 來啟用，用於強制函數和方法的傳入參數和返回值進行嚴格的類型檢查。在嚴格模式下，函數和方法的參數類型和返回類型必須與函數和方法的聲明一致，否則將引發致命錯誤。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>儘管嚴格模式在 JavaScript 和 PHP 中的實現方式有所不同，但它們的目標都是提高代碼的品質和可靠性，並幫助開發者避免常見的錯誤。JavaScript 的嚴格模式於 ECMAScript 5 中首次出現，而 PHP 的嚴格模式則在 PHP 7.0 中首次引入。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
